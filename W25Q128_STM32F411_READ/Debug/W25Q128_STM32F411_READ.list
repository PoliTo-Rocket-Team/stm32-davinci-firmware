
W25Q128_STM32F411_READ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000394  20000004  20000004  00001004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  20000398  20000398  00001398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  200003a0  200003a0  000013a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  200003a4  200003a4  000013a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  200003a8  200003a8  000013a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f0  20000418  20000418  00001418  2**2
                  ALLOC
  6 .text         00009e10  20000608  20000608  00001608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .RamFunc      00000110  2000a418  2000a418  0000b418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .Dev_info     000000c8  2000a528  2000a528  0000c528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rodata       00000068  2000a5f0  2000a5f0  0000b5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .eh_frame     00000004  2000a658  2000a658  0000b658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 ._user_heap_stack 00000600  2000a65c  2000a65c  0000b65c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c5f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aaa1  00000000  00000000  0000c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d49  00000000  00000000  000170c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00019e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e81  00000000  00000000  0001aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011be7  00000000  00000000  00032949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088667  00000000  00000000  00044530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ccb97  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000091e  00000000  00000000  000ccbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003458  00000000  00000000  000cd4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000d0950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

20000608 <__do_global_dtors_aux>:
20000608:	b510      	push	{r4, lr}
2000060a:	4c05      	ldr	r4, [pc, #20]	@ (20000620 <__do_global_dtors_aux+0x18>)
2000060c:	7823      	ldrb	r3, [r4, #0]
2000060e:	b933      	cbnz	r3, 2000061e <__do_global_dtors_aux+0x16>
20000610:	4b04      	ldr	r3, [pc, #16]	@ (20000624 <__do_global_dtors_aux+0x1c>)
20000612:	b113      	cbz	r3, 2000061a <__do_global_dtors_aux+0x12>
20000614:	4804      	ldr	r0, [pc, #16]	@ (20000628 <__do_global_dtors_aux+0x20>)
20000616:	f3af 8000 	nop.w
2000061a:	2301      	movs	r3, #1
2000061c:	7023      	strb	r3, [r4, #0]
2000061e:	bd10      	pop	{r4, pc}
20000620:	20000418 	.word	0x20000418
20000624:	00000000 	.word	0x00000000
20000628:	2000a658 	.word	0x2000a658

2000062c <frame_dummy>:
2000062c:	b508      	push	{r3, lr}
2000062e:	4b03      	ldr	r3, [pc, #12]	@ (2000063c <frame_dummy+0x10>)
20000630:	b11b      	cbz	r3, 2000063a <frame_dummy+0xe>
20000632:	4903      	ldr	r1, [pc, #12]	@ (20000640 <frame_dummy+0x14>)
20000634:	4803      	ldr	r0, [pc, #12]	@ (20000644 <frame_dummy+0x18>)
20000636:	f3af 8000 	nop.w
2000063a:	bd08      	pop	{r3, pc}
2000063c:	00000000 	.word	0x00000000
20000640:	2000041c 	.word	0x2000041c
20000644:	2000a658 	.word	0x2000a658

20000648 <_stack_init>:
20000648:	f5a3 3a80 	sub.w	sl, r3, #65536	@ 0x10000
2000064c:	4770      	bx	lr
2000064e:	bf00      	nop

20000650 <_mainCRTStartup>:
20000650:	4b17      	ldr	r3, [pc, #92]	@ (200006b0 <_mainCRTStartup+0x60>)
20000652:	2b00      	cmp	r3, #0
20000654:	bf08      	it	eq
20000656:	4b13      	ldreq	r3, [pc, #76]	@ (200006a4 <_mainCRTStartup+0x54>)
20000658:	469d      	mov	sp, r3
2000065a:	f7ff fff5 	bl	20000648 <_stack_init>
2000065e:	2100      	movs	r1, #0
20000660:	468b      	mov	fp, r1
20000662:	460f      	mov	r7, r1
20000664:	4813      	ldr	r0, [pc, #76]	@ (200006b4 <_mainCRTStartup+0x64>)
20000666:	4a14      	ldr	r2, [pc, #80]	@ (200006b8 <_mainCRTStartup+0x68>)
20000668:	1a12      	subs	r2, r2, r0
2000066a:	f009 fc26 	bl	20009eba <memset>
2000066e:	4b0e      	ldr	r3, [pc, #56]	@ (200006a8 <_mainCRTStartup+0x58>)
20000670:	2b00      	cmp	r3, #0
20000672:	d000      	beq.n	20000676 <_mainCRTStartup+0x26>
20000674:	4798      	blx	r3
20000676:	4b0d      	ldr	r3, [pc, #52]	@ (200006ac <_mainCRTStartup+0x5c>)
20000678:	2b00      	cmp	r3, #0
2000067a:	d000      	beq.n	2000067e <_mainCRTStartup+0x2e>
2000067c:	4798      	blx	r3
2000067e:	2000      	movs	r0, #0
20000680:	2100      	movs	r1, #0
20000682:	0004      	movs	r4, r0
20000684:	000d      	movs	r5, r1
20000686:	480d      	ldr	r0, [pc, #52]	@ (200006bc <_mainCRTStartup+0x6c>)
20000688:	2800      	cmp	r0, #0
2000068a:	d002      	beq.n	20000692 <_mainCRTStartup+0x42>
2000068c:	480c      	ldr	r0, [pc, #48]	@ (200006c0 <_mainCRTStartup+0x70>)
2000068e:	f3af 8000 	nop.w
20000692:	f009 fcbd 	bl	2000a010 <__libc_init_array>
20000696:	0020      	movs	r0, r4
20000698:	0029      	movs	r1, r5
2000069a:	f000 fc3d 	bl	20000f18 <main>
2000069e:	f009 fa6d 	bl	20009b7c <exit>
200006a2:	bf00      	nop
200006a4:	00080000 	.word	0x00080000
	...
200006b4:	20000418 	.word	0x20000418
200006b8:	20000608 	.word	0x20000608
	...
200006c4:	200003a8 	.word	0x200003a8
200006c8:	200003a8 	.word	0x200003a8
200006cc:	20000418 	.word	0x20000418
200006d0:	20000418 	.word	0x20000418
200006d4:	20000608 	.word	0x20000608

200006d8 <__aeabi_uldivmod>:
200006d8:	b953      	cbnz	r3, 200006f0 <__aeabi_uldivmod+0x18>
200006da:	b94a      	cbnz	r2, 200006f0 <__aeabi_uldivmod+0x18>
200006dc:	2900      	cmp	r1, #0
200006de:	bf08      	it	eq
200006e0:	2800      	cmpeq	r0, #0
200006e2:	bf1c      	itt	ne
200006e4:	f04f 31ff 	movne.w	r1, #4294967295
200006e8:	f04f 30ff 	movne.w	r0, #4294967295
200006ec:	f000 b96a 	b.w	200009c4 <__aeabi_idiv0>
200006f0:	f1ad 0c08 	sub.w	ip, sp, #8
200006f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
200006f8:	f000 f806 	bl	20000708 <__udivmoddi4>
200006fc:	f8dd e004 	ldr.w	lr, [sp, #4]
20000700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000704:	b004      	add	sp, #16
20000706:	4770      	bx	lr

20000708 <__udivmoddi4>:
20000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000070c:	9d08      	ldr	r5, [sp, #32]
2000070e:	460c      	mov	r4, r1
20000710:	2b00      	cmp	r3, #0
20000712:	d14e      	bne.n	200007b2 <__udivmoddi4+0xaa>
20000714:	4694      	mov	ip, r2
20000716:	458c      	cmp	ip, r1
20000718:	4686      	mov	lr, r0
2000071a:	fab2 f282 	clz	r2, r2
2000071e:	d962      	bls.n	200007e6 <__udivmoddi4+0xde>
20000720:	b14a      	cbz	r2, 20000736 <__udivmoddi4+0x2e>
20000722:	f1c2 0320 	rsb	r3, r2, #32
20000726:	4091      	lsls	r1, r2
20000728:	fa20 f303 	lsr.w	r3, r0, r3
2000072c:	fa0c fc02 	lsl.w	ip, ip, r2
20000730:	4319      	orrs	r1, r3
20000732:	fa00 fe02 	lsl.w	lr, r0, r2
20000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
2000073a:	fa1f f68c 	uxth.w	r6, ip
2000073e:	fbb1 f4f7 	udiv	r4, r1, r7
20000742:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000746:	fb07 1114 	mls	r1, r7, r4, r1
2000074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000074e:	fb04 f106 	mul.w	r1, r4, r6
20000752:	4299      	cmp	r1, r3
20000754:	d90a      	bls.n	2000076c <__udivmoddi4+0x64>
20000756:	eb1c 0303 	adds.w	r3, ip, r3
2000075a:	f104 30ff 	add.w	r0, r4, #4294967295
2000075e:	f080 8112 	bcs.w	20000986 <__udivmoddi4+0x27e>
20000762:	4299      	cmp	r1, r3
20000764:	f240 810f 	bls.w	20000986 <__udivmoddi4+0x27e>
20000768:	3c02      	subs	r4, #2
2000076a:	4463      	add	r3, ip
2000076c:	1a59      	subs	r1, r3, r1
2000076e:	fa1f f38e 	uxth.w	r3, lr
20000772:	fbb1 f0f7 	udiv	r0, r1, r7
20000776:	fb07 1110 	mls	r1, r7, r0, r1
2000077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000077e:	fb00 f606 	mul.w	r6, r0, r6
20000782:	429e      	cmp	r6, r3
20000784:	d90a      	bls.n	2000079c <__udivmoddi4+0x94>
20000786:	eb1c 0303 	adds.w	r3, ip, r3
2000078a:	f100 31ff 	add.w	r1, r0, #4294967295
2000078e:	f080 80fc 	bcs.w	2000098a <__udivmoddi4+0x282>
20000792:	429e      	cmp	r6, r3
20000794:	f240 80f9 	bls.w	2000098a <__udivmoddi4+0x282>
20000798:	4463      	add	r3, ip
2000079a:	3802      	subs	r0, #2
2000079c:	1b9b      	subs	r3, r3, r6
2000079e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
200007a2:	2100      	movs	r1, #0
200007a4:	b11d      	cbz	r5, 200007ae <__udivmoddi4+0xa6>
200007a6:	40d3      	lsrs	r3, r2
200007a8:	2200      	movs	r2, #0
200007aa:	e9c5 3200 	strd	r3, r2, [r5]
200007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200007b2:	428b      	cmp	r3, r1
200007b4:	d905      	bls.n	200007c2 <__udivmoddi4+0xba>
200007b6:	b10d      	cbz	r5, 200007bc <__udivmoddi4+0xb4>
200007b8:	e9c5 0100 	strd	r0, r1, [r5]
200007bc:	2100      	movs	r1, #0
200007be:	4608      	mov	r0, r1
200007c0:	e7f5      	b.n	200007ae <__udivmoddi4+0xa6>
200007c2:	fab3 f183 	clz	r1, r3
200007c6:	2900      	cmp	r1, #0
200007c8:	d146      	bne.n	20000858 <__udivmoddi4+0x150>
200007ca:	42a3      	cmp	r3, r4
200007cc:	d302      	bcc.n	200007d4 <__udivmoddi4+0xcc>
200007ce:	4290      	cmp	r0, r2
200007d0:	f0c0 80f0 	bcc.w	200009b4 <__udivmoddi4+0x2ac>
200007d4:	1a86      	subs	r6, r0, r2
200007d6:	eb64 0303 	sbc.w	r3, r4, r3
200007da:	2001      	movs	r0, #1
200007dc:	2d00      	cmp	r5, #0
200007de:	d0e6      	beq.n	200007ae <__udivmoddi4+0xa6>
200007e0:	e9c5 6300 	strd	r6, r3, [r5]
200007e4:	e7e3      	b.n	200007ae <__udivmoddi4+0xa6>
200007e6:	2a00      	cmp	r2, #0
200007e8:	f040 8090 	bne.w	2000090c <__udivmoddi4+0x204>
200007ec:	eba1 040c 	sub.w	r4, r1, ip
200007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
200007f4:	fa1f f78c 	uxth.w	r7, ip
200007f8:	2101      	movs	r1, #1
200007fa:	fbb4 f6f8 	udiv	r6, r4, r8
200007fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
20000802:	fb08 4416 	mls	r4, r8, r6, r4
20000806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
2000080a:	fb07 f006 	mul.w	r0, r7, r6
2000080e:	4298      	cmp	r0, r3
20000810:	d908      	bls.n	20000824 <__udivmoddi4+0x11c>
20000812:	eb1c 0303 	adds.w	r3, ip, r3
20000816:	f106 34ff 	add.w	r4, r6, #4294967295
2000081a:	d202      	bcs.n	20000822 <__udivmoddi4+0x11a>
2000081c:	4298      	cmp	r0, r3
2000081e:	f200 80cd 	bhi.w	200009bc <__udivmoddi4+0x2b4>
20000822:	4626      	mov	r6, r4
20000824:	1a1c      	subs	r4, r3, r0
20000826:	fa1f f38e 	uxth.w	r3, lr
2000082a:	fbb4 f0f8 	udiv	r0, r4, r8
2000082e:	fb08 4410 	mls	r4, r8, r0, r4
20000832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
20000836:	fb00 f707 	mul.w	r7, r0, r7
2000083a:	429f      	cmp	r7, r3
2000083c:	d908      	bls.n	20000850 <__udivmoddi4+0x148>
2000083e:	eb1c 0303 	adds.w	r3, ip, r3
20000842:	f100 34ff 	add.w	r4, r0, #4294967295
20000846:	d202      	bcs.n	2000084e <__udivmoddi4+0x146>
20000848:	429f      	cmp	r7, r3
2000084a:	f200 80b0 	bhi.w	200009ae <__udivmoddi4+0x2a6>
2000084e:	4620      	mov	r0, r4
20000850:	1bdb      	subs	r3, r3, r7
20000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000856:	e7a5      	b.n	200007a4 <__udivmoddi4+0x9c>
20000858:	f1c1 0620 	rsb	r6, r1, #32
2000085c:	408b      	lsls	r3, r1
2000085e:	fa22 f706 	lsr.w	r7, r2, r6
20000862:	431f      	orrs	r7, r3
20000864:	fa20 fc06 	lsr.w	ip, r0, r6
20000868:	fa04 f301 	lsl.w	r3, r4, r1
2000086c:	ea43 030c 	orr.w	r3, r3, ip
20000870:	40f4      	lsrs	r4, r6
20000872:	fa00 f801 	lsl.w	r8, r0, r1
20000876:	0c38      	lsrs	r0, r7, #16
20000878:	ea4f 4913 	mov.w	r9, r3, lsr #16
2000087c:	fbb4 fef0 	udiv	lr, r4, r0
20000880:	fa1f fc87 	uxth.w	ip, r7
20000884:	fb00 441e 	mls	r4, r0, lr, r4
20000888:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
2000088c:	fb0e f90c 	mul.w	r9, lr, ip
20000890:	45a1      	cmp	r9, r4
20000892:	fa02 f201 	lsl.w	r2, r2, r1
20000896:	d90a      	bls.n	200008ae <__udivmoddi4+0x1a6>
20000898:	193c      	adds	r4, r7, r4
2000089a:	f10e 3aff 	add.w	sl, lr, #4294967295
2000089e:	f080 8084 	bcs.w	200009aa <__udivmoddi4+0x2a2>
200008a2:	45a1      	cmp	r9, r4
200008a4:	f240 8081 	bls.w	200009aa <__udivmoddi4+0x2a2>
200008a8:	f1ae 0e02 	sub.w	lr, lr, #2
200008ac:	443c      	add	r4, r7
200008ae:	eba4 0409 	sub.w	r4, r4, r9
200008b2:	fa1f f983 	uxth.w	r9, r3
200008b6:	fbb4 f3f0 	udiv	r3, r4, r0
200008ba:	fb00 4413 	mls	r4, r0, r3, r4
200008be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
200008c2:	fb03 fc0c 	mul.w	ip, r3, ip
200008c6:	45a4      	cmp	ip, r4
200008c8:	d907      	bls.n	200008da <__udivmoddi4+0x1d2>
200008ca:	193c      	adds	r4, r7, r4
200008cc:	f103 30ff 	add.w	r0, r3, #4294967295
200008d0:	d267      	bcs.n	200009a2 <__udivmoddi4+0x29a>
200008d2:	45a4      	cmp	ip, r4
200008d4:	d965      	bls.n	200009a2 <__udivmoddi4+0x29a>
200008d6:	3b02      	subs	r3, #2
200008d8:	443c      	add	r4, r7
200008da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
200008de:	fba0 9302 	umull	r9, r3, r0, r2
200008e2:	eba4 040c 	sub.w	r4, r4, ip
200008e6:	429c      	cmp	r4, r3
200008e8:	46ce      	mov	lr, r9
200008ea:	469c      	mov	ip, r3
200008ec:	d351      	bcc.n	20000992 <__udivmoddi4+0x28a>
200008ee:	d04e      	beq.n	2000098e <__udivmoddi4+0x286>
200008f0:	b155      	cbz	r5, 20000908 <__udivmoddi4+0x200>
200008f2:	ebb8 030e 	subs.w	r3, r8, lr
200008f6:	eb64 040c 	sbc.w	r4, r4, ip
200008fa:	fa04 f606 	lsl.w	r6, r4, r6
200008fe:	40cb      	lsrs	r3, r1
20000900:	431e      	orrs	r6, r3
20000902:	40cc      	lsrs	r4, r1
20000904:	e9c5 6400 	strd	r6, r4, [r5]
20000908:	2100      	movs	r1, #0
2000090a:	e750      	b.n	200007ae <__udivmoddi4+0xa6>
2000090c:	f1c2 0320 	rsb	r3, r2, #32
20000910:	fa20 f103 	lsr.w	r1, r0, r3
20000914:	fa0c fc02 	lsl.w	ip, ip, r2
20000918:	fa24 f303 	lsr.w	r3, r4, r3
2000091c:	4094      	lsls	r4, r2
2000091e:	430c      	orrs	r4, r1
20000920:	ea4f 481c 	mov.w	r8, ip, lsr #16
20000924:	fa00 fe02 	lsl.w	lr, r0, r2
20000928:	fa1f f78c 	uxth.w	r7, ip
2000092c:	fbb3 f0f8 	udiv	r0, r3, r8
20000930:	fb08 3110 	mls	r1, r8, r0, r3
20000934:	0c23      	lsrs	r3, r4, #16
20000936:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000093a:	fb00 f107 	mul.w	r1, r0, r7
2000093e:	4299      	cmp	r1, r3
20000940:	d908      	bls.n	20000954 <__udivmoddi4+0x24c>
20000942:	eb1c 0303 	adds.w	r3, ip, r3
20000946:	f100 36ff 	add.w	r6, r0, #4294967295
2000094a:	d22c      	bcs.n	200009a6 <__udivmoddi4+0x29e>
2000094c:	4299      	cmp	r1, r3
2000094e:	d92a      	bls.n	200009a6 <__udivmoddi4+0x29e>
20000950:	3802      	subs	r0, #2
20000952:	4463      	add	r3, ip
20000954:	1a5b      	subs	r3, r3, r1
20000956:	b2a4      	uxth	r4, r4
20000958:	fbb3 f1f8 	udiv	r1, r3, r8
2000095c:	fb08 3311 	mls	r3, r8, r1, r3
20000960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000964:	fb01 f307 	mul.w	r3, r1, r7
20000968:	42a3      	cmp	r3, r4
2000096a:	d908      	bls.n	2000097e <__udivmoddi4+0x276>
2000096c:	eb1c 0404 	adds.w	r4, ip, r4
20000970:	f101 36ff 	add.w	r6, r1, #4294967295
20000974:	d213      	bcs.n	2000099e <__udivmoddi4+0x296>
20000976:	42a3      	cmp	r3, r4
20000978:	d911      	bls.n	2000099e <__udivmoddi4+0x296>
2000097a:	3902      	subs	r1, #2
2000097c:	4464      	add	r4, ip
2000097e:	1ae4      	subs	r4, r4, r3
20000980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
20000984:	e739      	b.n	200007fa <__udivmoddi4+0xf2>
20000986:	4604      	mov	r4, r0
20000988:	e6f0      	b.n	2000076c <__udivmoddi4+0x64>
2000098a:	4608      	mov	r0, r1
2000098c:	e706      	b.n	2000079c <__udivmoddi4+0x94>
2000098e:	45c8      	cmp	r8, r9
20000990:	d2ae      	bcs.n	200008f0 <__udivmoddi4+0x1e8>
20000992:	ebb9 0e02 	subs.w	lr, r9, r2
20000996:	eb63 0c07 	sbc.w	ip, r3, r7
2000099a:	3801      	subs	r0, #1
2000099c:	e7a8      	b.n	200008f0 <__udivmoddi4+0x1e8>
2000099e:	4631      	mov	r1, r6
200009a0:	e7ed      	b.n	2000097e <__udivmoddi4+0x276>
200009a2:	4603      	mov	r3, r0
200009a4:	e799      	b.n	200008da <__udivmoddi4+0x1d2>
200009a6:	4630      	mov	r0, r6
200009a8:	e7d4      	b.n	20000954 <__udivmoddi4+0x24c>
200009aa:	46d6      	mov	lr, sl
200009ac:	e77f      	b.n	200008ae <__udivmoddi4+0x1a6>
200009ae:	4463      	add	r3, ip
200009b0:	3802      	subs	r0, #2
200009b2:	e74d      	b.n	20000850 <__udivmoddi4+0x148>
200009b4:	4606      	mov	r6, r0
200009b6:	4623      	mov	r3, r4
200009b8:	4608      	mov	r0, r1
200009ba:	e70f      	b.n	200007dc <__udivmoddi4+0xd4>
200009bc:	3e02      	subs	r6, #2
200009be:	4463      	add	r3, ip
200009c0:	e730      	b.n	20000824 <__udivmoddi4+0x11c>
200009c2:	bf00      	nop

200009c4 <__aeabi_idiv0>:
200009c4:	4770      	bx	lr
200009c6:	bf00      	nop

200009c8 <LOC_SPI_Init>:
/* STEP 3 *************************************
 * change the init function to call as per SPI
 * port used (hint: that's the function
 * available in spi.c, check it)
 * ********************************************/
void LOC_SPI_Init(){
200009c8:	b580      	push	{r7, lr}
200009ca:	af00      	add	r7, sp, #0
	MX_SPI3_Init();        // !!! this line needs to be aligned to the SPI port used!  Check this function: it is defined in spi.c !!!
200009cc:	f000 fb1e 	bl	2000100c <MX_SPI3_Init>
}
200009d0:	bf00      	nop
200009d2:	bd80      	pop	{r7, pc}

200009d4 <LOC_Delay>:
/**********************************************
 * roughly waints for "Delay" ms before return
 * set uC clock speed. Tested on M4, maybe has
 *  to change using other uC.
 * ********************************************/
void LOC_Delay(uint32_t Delay) {
200009d4:	b480      	push	{r7}
200009d6:	b087      	sub	sp, #28
200009d8:	af00      	add	r7, sp, #0
200009da:	6078      	str	r0, [r7, #4]
const uint32_t clock=100; 		// uC MHz
200009dc:	2364      	movs	r3, #100	@ 0x64
200009de:	617b      	str	r3, [r7, #20]
volatile uint32_t delay1;			//
volatile uint32_t multiplier=35;  // that's "converting" Delay value into time spent in the below loop
200009e0:	2323      	movs	r3, #35	@ 0x23
200009e2:	60fb      	str	r3, [r7, #12]
volatile uint32_t k;
	delay1=Delay;
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	613b      	str	r3, [r7, #16]
	for (k=0; (k<(delay1*clock*multiplier)); k++) {};
200009e8:	2300      	movs	r3, #0
200009ea:	60bb      	str	r3, [r7, #8]
200009ec:	e002      	b.n	200009f4 <LOC_Delay+0x20>
200009ee:	68bb      	ldr	r3, [r7, #8]
200009f0:	3301      	adds	r3, #1
200009f2:	60bb      	str	r3, [r7, #8]
200009f4:	693b      	ldr	r3, [r7, #16]
200009f6:	697a      	ldr	r2, [r7, #20]
200009f8:	fb02 f303 	mul.w	r3, r2, r3
200009fc:	68fa      	ldr	r2, [r7, #12]
200009fe:	fb03 f202 	mul.w	r2, r3, r2
20000a02:	68bb      	ldr	r3, [r7, #8]
20000a04:	429a      	cmp	r2, r3
20000a06:	d8f2      	bhi.n	200009ee <LOC_Delay+0x1a>
}
20000a08:	bf00      	nop
20000a0a:	bf00      	nop
20000a0c:	371c      	adds	r7, #28
20000a0e:	46bd      	mov	sp, r7
20000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a14:	4770      	bx	lr

20000a16 <HAL_GetTick>:



uint32_t HAL_GetTick(void) {
20000a16:	b480      	push	{r7}
20000a18:	af00      	add	r7, sp, #0
	return 1;
20000a1a:	2301      	movs	r3, #1
}
20000a1c:	4618      	mov	r0, r3
20000a1e:	46bd      	mov	sp, r7
20000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a24:	4770      	bx	lr

20000a26 <HAL_Delay>:


void HAL_Delay(uint32_t Delay) {
20000a26:	b580      	push	{r7, lr}
20000a28:	b082      	sub	sp, #8
20000a2a:	af00      	add	r7, sp, #0
20000a2c:	6078      	str	r0, [r7, #4]
	LOC_Delay(Delay);
20000a2e:	6878      	ldr	r0, [r7, #4]
20000a30:	f7ff ffd0 	bl	200009d4 <LOC_Delay>
}
20000a34:	bf00      	nop
20000a36:	3708      	adds	r7, #8
20000a38:	46bd      	mov	sp, r7
20000a3a:	bd80      	pop	{r7, pc}

20000a3c <HAL_InitTick>:


HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
20000a3c:	b480      	push	{r7}
20000a3e:	b083      	sub	sp, #12
20000a40:	af00      	add	r7, sp, #0
20000a42:	6078      	str	r0, [r7, #4]
	return HAL_OK;
20000a44:	2300      	movs	r3, #0
}
20000a46:	4618      	mov	r0, r3
20000a48:	370c      	adds	r7, #12
20000a4a:	46bd      	mov	sp, r7
20000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a50:	4770      	bx	lr
	...

20000a54 <LOC_LedOn>:



void LOC_LedOn(){
20000a54:	b580      	push	{r7, lr}
20000a56:	af00      	add	r7, sp, #0
#ifdef IS_LED
	HAL_GPIO_WritePin(DEBUG_LED_FLASH_GPIO_Port, DEBUG_LED_FLASH_Pin, LED_PIN_ON);
20000a58:	2200      	movs	r2, #0
20000a5a:	2104      	movs	r1, #4
20000a5c:	4802      	ldr	r0, [pc, #8]	@ (20000a68 <LOC_LedOn+0x14>)
20000a5e:	f005 f9d5 	bl	20005e0c <HAL_GPIO_WritePin>
#endif //IS_LED

}
20000a62:	bf00      	nop
20000a64:	bd80      	pop	{r7, pc}
20000a66:	bf00      	nop
20000a68:	40020c00 	.word	0x40020c00

20000a6c <LOC_LedOff>:

void LOC_LedOff(){
20000a6c:	b580      	push	{r7, lr}
20000a6e:	af00      	add	r7, sp, #0
#ifdef IS_LED
	HAL_GPIO_WritePin(DEBUG_LED_FLASH_GPIO_Port, DEBUG_LED_FLASH_Pin, !LED_PIN_ON);
20000a70:	2201      	movs	r2, #1
20000a72:	2104      	movs	r1, #4
20000a74:	4802      	ldr	r0, [pc, #8]	@ (20000a80 <LOC_LedOff+0x14>)
20000a76:	f005 f9c9 	bl	20005e0c <HAL_GPIO_WritePin>
#endif //IS_LED
}
20000a7a:	bf00      	nop
20000a7c:	bd80      	pop	{r7, pc}
20000a7e:	bf00      	nop
20000a80:	40020c00 	.word	0x40020c00

20000a84 <Init>:



int Init (void){
20000a84:	b580      	push	{r7, lr}
20000a86:	b084      	sub	sp, #16
20000a88:	af00      	add	r7, sp, #0

	*(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
20000a8a:	4b14      	ldr	r3, [pc, #80]	@ (20000adc <Init+0x58>)
20000a8c:	4a14      	ldr	r2, [pc, #80]	@ (20000ae0 <Init+0x5c>)
20000a8e:	601a      	str	r2, [r3, #0]

    SystemInit();
20000a90:	f000 fcf0 	bl	20001474 <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     */

    SCB->VTOR = 0x20000000 | 0x200;
20000a94:	4b13      	ldr	r3, [pc, #76]	@ (20000ae4 <Init+0x60>)
20000a96:	4a14      	ldr	r2, [pc, #80]	@ (20000ae8 <Init+0x64>)
20000a98:	609a      	str	r2, [r3, #8]
20000a9a:	2300      	movs	r3, #0
20000a9c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a9e:	687b      	ldr	r3, [r7, #4]
20000aa0:	f383 8810 	msr	PRIMASK, r3
}
20000aa4:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    HAL_Init();
20000aa6:	f001 f8e5 	bl	20001c74 <HAL_Init>
    uint8_t result;

    SystemClock_Config();
20000aaa:	f000 fa41 	bl	20000f30 <SystemClock_Config>

    MX_GPIO_Init();
20000aae:	f000 f9cb 	bl	20000e48 <MX_GPIO_Init>
    LOC_SPI_Init();
20000ab2:	f7ff ff89 	bl	200009c8 <LOC_SPI_Init>

	LOC_LedOn();
20000ab6:	f7ff ffcd 	bl	20000a54 <LOC_LedOn>
    result = Flash_Init();
20000aba:	f001 f84e 	bl	20001b5a <Flash_Init>
20000abe:	4603      	mov	r3, r0
20000ac0:	73fb      	strb	r3, [r7, #15]
	LOC_LedOff();
20000ac2:	f7ff ffd3 	bl	20000a6c <LOC_LedOff>
20000ac6:	2301      	movs	r3, #1
20000ac8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000aca:	68bb      	ldr	r3, [r7, #8]
20000acc:	f383 8810 	msr	PRIMASK, r3
}
20000ad0:	bf00      	nop

    __set_PRIMASK(1); //disable interrupts

    return result;
20000ad2:	7bfb      	ldrb	r3, [r7, #15]

}
20000ad4:	4618      	mov	r0, r3
20000ad6:	3710      	adds	r7, #16
20000ad8:	46bd      	mov	sp, r7
20000ada:	bd80      	pop	{r7, pc}
20000adc:	e000edf0 	.word	0xe000edf0
20000ae0:	a05f0000 	.word	0xa05f0000
20000ae4:	e000ed00 	.word	0xe000ed00
20000ae8:	20000200 	.word	0x20000200

20000aec <Read>:
  * outputs   :
  *      R0             : "1" 			: Operation succeeded
  * 			 		  "0" 			: Operation failure
  * Note: Mandatory for all types except SRAM and PSRAM	
  */
int Read (uint32_t Address, uint32_t Size, uint8_t* buffer){
20000aec:	b580      	push	{r7, lr}
20000aee:	b086      	sub	sp, #24
20000af0:	af00      	add	r7, sp, #0
20000af2:	60f8      	str	r0, [r7, #12]
20000af4:	60b9      	str	r1, [r7, #8]
20000af6:	607a      	str	r2, [r7, #4]
20000af8:	2300      	movs	r3, #0
20000afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000afc:	693b      	ldr	r3, [r7, #16]
20000afe:	f383 8810 	msr	PRIMASK, r3
}
20000b02:	bf00      	nop
    __set_PRIMASK(0); //enable interrupts
	Address = Address & EXT_FLASH_ADDR_MASK;
20000b04:	68fb      	ldr	r3, [r7, #12]
20000b06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
20000b0a:	60fb      	str	r3, [r7, #12]
	LOC_LedOn();
20000b0c:	f7ff ffa2 	bl	20000a54 <LOC_LedOn>
	Flash_Read(Address, buffer, Size);
20000b10:	68ba      	ldr	r2, [r7, #8]
20000b12:	6879      	ldr	r1, [r7, #4]
20000b14:	68f8      	ldr	r0, [r7, #12]
20000b16:	f000 fdb9 	bl	2000168c <Flash_Read>
	LOC_LedOff();
20000b1a:	f7ff ffa7 	bl	20000a6c <LOC_LedOff>
20000b1e:	2301      	movs	r3, #1
20000b20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000b22:	697b      	ldr	r3, [r7, #20]
20000b24:	f383 8810 	msr	PRIMASK, r3
}
20000b28:	bf00      	nop
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000b2a:	2301      	movs	r3, #1
} 
20000b2c:	4618      	mov	r0, r3
20000b2e:	3718      	adds	r7, #24
20000b30:	46bd      	mov	sp, r7
20000b32:	bd80      	pop	{r7, pc}

20000b34 <Write>:
  * outputs   :
  *      R0           : "1" 			: Operation succeeded
  *                     "0" 			: Operation failure
  * Note: Mandatory for all types except SRAM and PSRAM	
  */
int Write (uint32_t Address, uint32_t Size, uint8_t* buffer){
20000b34:	b580      	push	{r7, lr}
20000b36:	b086      	sub	sp, #24
20000b38:	af00      	add	r7, sp, #0
20000b3a:	60f8      	str	r0, [r7, #12]
20000b3c:	60b9      	str	r1, [r7, #8]
20000b3e:	607a      	str	r2, [r7, #4]
20000b40:	2300      	movs	r3, #0
20000b42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000b44:	693b      	ldr	r3, [r7, #16]
20000b46:	f383 8810 	msr	PRIMASK, r3
}
20000b4a:	bf00      	nop
    __set_PRIMASK(0); //enable interrupts
	Address = Address & EXT_FLASH_ADDR_MASK;
20000b4c:	68fb      	ldr	r3, [r7, #12]
20000b4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
20000b52:	60fb      	str	r3, [r7, #12]
	LOC_LedOn();
20000b54:	f7ff ff7e 	bl	20000a54 <LOC_LedOn>
	Flash_Write(Address, buffer, Size);
20000b58:	68ba      	ldr	r2, [r7, #8]
20000b5a:	6879      	ldr	r1, [r7, #4]
20000b5c:	68f8      	ldr	r0, [r7, #12]
20000b5e:	f000 fdfa 	bl	20001756 <Flash_Write>
	LOC_LedOff();
20000b62:	f7ff ff83 	bl	20000a6c <LOC_LedOff>
20000b66:	2301      	movs	r3, #1
20000b68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000b6a:	697b      	ldr	r3, [r7, #20]
20000b6c:	f383 8810 	msr	PRIMASK, r3
}
20000b70:	bf00      	nop
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000b72:	2301      	movs	r3, #1
} 
20000b74:	4618      	mov	r0, r3
20000b76:	3718      	adds	r7, #24
20000b78:	46bd      	mov	sp, r7
20000b7a:	bd80      	pop	{r7, pc}

20000b7c <MassErase>:
  * outputs   :
  *     R0             : "1" : Operation succeeded
  * 					 "0" : Operation failure
  * Note: Not Mandatory for SRAM PSRAM and NOR_FLASH
  */
int MassErase (void){
20000b7c:	b580      	push	{r7, lr}
20000b7e:	b082      	sub	sp, #8
20000b80:	af00      	add	r7, sp, #0
20000b82:	2300      	movs	r3, #0
20000b84:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000b86:	683b      	ldr	r3, [r7, #0]
20000b88:	f383 8810 	msr	PRIMASK, r3
}
20000b8c:	bf00      	nop
    __set_PRIMASK(0); //enable interrupts
	LOC_LedOn();
20000b8e:	f7ff ff61 	bl	20000a54 <LOC_LedOn>
	Flash_ChipErase();
20000b92:	f000 fec9 	bl	20001928 <Flash_ChipErase>
	LOC_LedOff();
20000b96:	f7ff ff69 	bl	20000a6c <LOC_LedOff>
20000b9a:	2301      	movs	r3, #1
20000b9c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000b9e:	687b      	ldr	r3, [r7, #4]
20000ba0:	f383 8810 	msr	PRIMASK, r3
}
20000ba4:	bf00      	nop
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000ba6:	2301      	movs	r3, #1
}
20000ba8:	4618      	mov	r0, r3
20000baa:	3708      	adds	r7, #8
20000bac:	46bd      	mov	sp, r7
20000bae:	bd80      	pop	{r7, pc}

20000bb0 <SectorErase>:
  * outputs   :
  *     R0             : "1" : Operation succeeded
  * 			 		 "0" : Operation failure
  * Note: Not Mandatory for SRAM PSRAM and NOR_FLASH
  */
int SectorErase (uint32_t EraseStartAddress ,uint32_t EraseEndAddress) {
20000bb0:	b580      	push	{r7, lr}
20000bb2:	b084      	sub	sp, #16
20000bb4:	af00      	add	r7, sp, #0
20000bb6:	6078      	str	r0, [r7, #4]
20000bb8:	6039      	str	r1, [r7, #0]
	EraseStartAddress = EraseStartAddress & EXT_FLASH_ADDR_MASK;
20000bba:	687b      	ldr	r3, [r7, #4]
20000bbc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
20000bc0:	607b      	str	r3, [r7, #4]
	EraseEndAddress = EraseEndAddress & EXT_FLASH_ADDR_MASK;
20000bc2:	683b      	ldr	r3, [r7, #0]
20000bc4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
20000bc8:	603b      	str	r3, [r7, #0]
20000bca:	2300      	movs	r3, #0
20000bcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000bce:	68fb      	ldr	r3, [r7, #12]
20000bd0:	f383 8810 	msr	PRIMASK, r3
}
20000bd4:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts
	EraseStartAddress = (EraseStartAddress -  (EraseStartAddress % EXT_FLASH_BLOCK_SIZE));
20000bd6:	687b      	ldr	r3, [r7, #4]
20000bd8:	0c1b      	lsrs	r3, r3, #16
20000bda:	041b      	lsls	r3, r3, #16
20000bdc:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress) {
20000bde:	e00a      	b.n	20000bf6 <SectorErase+0x46>
		LOC_LedOn();
20000be0:	f7ff ff38 	bl	20000a54 <LOC_LedOn>
		Flash_BErase64k(EraseStartAddress);
20000be4:	6878      	ldr	r0, [r7, #4]
20000be6:	f000 fe72 	bl	200018ce <Flash_BErase64k>
		LOC_LedOff();
20000bea:	f7ff ff3f 	bl	20000a6c <LOC_LedOff>
		EraseStartAddress += EXT_FLASH_BLOCK_SIZE;
20000bee:	687b      	ldr	r3, [r7, #4]
20000bf0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
20000bf4:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress) {
20000bf6:	683a      	ldr	r2, [r7, #0]
20000bf8:	687b      	ldr	r3, [r7, #4]
20000bfa:	429a      	cmp	r2, r3
20000bfc:	d2f0      	bcs.n	20000be0 <SectorErase+0x30>
20000bfe:	2301      	movs	r3, #1
20000c00:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000c02:	68bb      	ldr	r3, [r7, #8]
20000c04:	f383 8810 	msr	PRIMASK, r3
}
20000c08:	bf00      	nop
	}
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000c0a:	2301      	movs	r3, #1
}
20000c0c:	4618      	mov	r0, r3
20000c0e:	3710      	adds	r7, #16
20000c10:	46bd      	mov	sp, r7
20000c12:	bd80      	pop	{r7, pc}

20000c14 <CheckSum>:
  * outputs   :
  *     R0             : Checksum value
  * Note - Optional for all types of device
  * NOTE - keeping original ST algorithm: not verified and optimized
  */
uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
20000c14:	b580      	push	{r7, lr}
20000c16:	b088      	sub	sp, #32
20000c18:	af00      	add	r7, sp, #0
20000c1a:	60f8      	str	r0, [r7, #12]
20000c1c:	60b9      	str	r1, [r7, #8]
20000c1e:	607a      	str	r2, [r7, #4]
uint8_t missalignementAddress = StartAddress%4;
20000c20:	68fb      	ldr	r3, [r7, #12]
20000c22:	b2db      	uxtb	r3, r3
20000c24:	f003 0303 	and.w	r3, r3, #3
20000c28:	77fb      	strb	r3, [r7, #31]
uint8_t missalignementSize = Size ;
20000c2a:	68bb      	ldr	r3, [r7, #8]
20000c2c:	77bb      	strb	r3, [r7, #30]
int cnt;
uint32_t Val;
//uint8_t value;
	
  StartAddress-=StartAddress%4;
20000c2e:	68fb      	ldr	r3, [r7, #12]
20000c30:	f023 0303 	bic.w	r3, r3, #3
20000c34:	60fb      	str	r3, [r7, #12]
  Size += (Size%4==0)?0:4-(Size%4);
20000c36:	68bb      	ldr	r3, [r7, #8]
20000c38:	f003 0303 	and.w	r3, r3, #3
20000c3c:	2b00      	cmp	r3, #0
20000c3e:	d005      	beq.n	20000c4c <CheckSum+0x38>
20000c40:	68bb      	ldr	r3, [r7, #8]
20000c42:	f003 0303 	and.w	r3, r3, #3
20000c46:	f1c3 0304 	rsb	r3, r3, #4
20000c4a:	e000      	b.n	20000c4e <CheckSum+0x3a>
20000c4c:	2300      	movs	r3, #0
20000c4e:	68ba      	ldr	r2, [r7, #8]
20000c50:	4413      	add	r3, r2
20000c52:	60bb      	str	r3, [r7, #8]
  
  for(cnt=0; cnt<Size ; cnt+=4)
20000c54:	2300      	movs	r3, #0
20000c56:	61bb      	str	r3, [r7, #24]
20000c58:	e068      	b.n	20000d2c <CheckSum+0x118>
  {
	LOC_LedOn();
20000c5a:	f7ff fefb 	bl	20000a54 <LOC_LedOn>
	Flash_Read(StartAddress + 1,(uint8_t *) &Val, 4);
20000c5e:	68fb      	ldr	r3, [r7, #12]
20000c60:	3301      	adds	r3, #1
20000c62:	f107 0110 	add.w	r1, r7, #16
20000c66:	2204      	movs	r2, #4
20000c68:	4618      	mov	r0, r3
20000c6a:	f000 fd0f 	bl	2000168c <Flash_Read>
	LOC_LedOff();
20000c6e:	f7ff fefd 	bl	20000a6c <LOC_LedOff>

	if(missalignementAddress)
20000c72:	7ffb      	ldrb	r3, [r7, #31]
20000c74:	2b00      	cmp	r3, #0
20000c76:	d015      	beq.n	20000ca4 <CheckSum+0x90>
    {
      for (uint8_t k=missalignementAddress; k<=3;k++){
20000c78:	7ffb      	ldrb	r3, [r7, #31]
20000c7a:	75fb      	strb	r3, [r7, #23]
20000c7c:	e00c      	b.n	20000c98 <CheckSum+0x84>
          InitVal += (uint8_t) (Val>>(8*k) & 0xff);
20000c7e:	693a      	ldr	r2, [r7, #16]
20000c80:	7dfb      	ldrb	r3, [r7, #23]
20000c82:	00db      	lsls	r3, r3, #3
20000c84:	fa22 f303 	lsr.w	r3, r2, r3
20000c88:	b2db      	uxtb	r3, r3
20000c8a:	461a      	mov	r2, r3
20000c8c:	687b      	ldr	r3, [r7, #4]
20000c8e:	4413      	add	r3, r2
20000c90:	607b      	str	r3, [r7, #4]
      for (uint8_t k=missalignementAddress; k<=3;k++){
20000c92:	7dfb      	ldrb	r3, [r7, #23]
20000c94:	3301      	adds	r3, #1
20000c96:	75fb      	strb	r3, [r7, #23]
20000c98:	7dfb      	ldrb	r3, [r7, #23]
20000c9a:	2b03      	cmp	r3, #3
20000c9c:	d9ef      	bls.n	20000c7e <CheckSum+0x6a>
      }
      missalignementAddress=0;
20000c9e:	2300      	movs	r3, #0
20000ca0:	77fb      	strb	r3, [r7, #31]
20000ca2:	e03d      	b.n	20000d20 <CheckSum+0x10c>
    }
    else if((Size-missalignementSize)%4 && (Size-cnt) <=4)
20000ca4:	7fbb      	ldrb	r3, [r7, #30]
20000ca6:	68ba      	ldr	r2, [r7, #8]
20000ca8:	1ad3      	subs	r3, r2, r3
20000caa:	f003 0303 	and.w	r3, r3, #3
20000cae:	2b00      	cmp	r3, #0
20000cb0:	d023      	beq.n	20000cfa <CheckSum+0xe6>
20000cb2:	69bb      	ldr	r3, [r7, #24]
20000cb4:	68ba      	ldr	r2, [r7, #8]
20000cb6:	1ad3      	subs	r3, r2, r3
20000cb8:	2b04      	cmp	r3, #4
20000cba:	d81e      	bhi.n	20000cfa <CheckSum+0xe6>
    {
      for (uint8_t k=(Size-missalignementSize); k<=3;k++){
20000cbc:	68bb      	ldr	r3, [r7, #8]
20000cbe:	b2da      	uxtb	r2, r3
20000cc0:	7fbb      	ldrb	r3, [r7, #30]
20000cc2:	1ad3      	subs	r3, r2, r3
20000cc4:	75bb      	strb	r3, [r7, #22]
20000cc6:	e00d      	b.n	20000ce4 <CheckSum+0xd0>
          InitVal += (uint8_t) (Val>>(8*(k-1)) & 0xff);
20000cc8:	693a      	ldr	r2, [r7, #16]
20000cca:	7dbb      	ldrb	r3, [r7, #22]
20000ccc:	3b01      	subs	r3, #1
20000cce:	00db      	lsls	r3, r3, #3
20000cd0:	fa22 f303 	lsr.w	r3, r2, r3
20000cd4:	b2db      	uxtb	r3, r3
20000cd6:	461a      	mov	r2, r3
20000cd8:	687b      	ldr	r3, [r7, #4]
20000cda:	4413      	add	r3, r2
20000cdc:	607b      	str	r3, [r7, #4]
      for (uint8_t k=(Size-missalignementSize); k<=3;k++){
20000cde:	7dbb      	ldrb	r3, [r7, #22]
20000ce0:	3301      	adds	r3, #1
20000ce2:	75bb      	strb	r3, [r7, #22]
20000ce4:	7dbb      	ldrb	r3, [r7, #22]
20000ce6:	2b03      	cmp	r3, #3
20000ce8:	d9ee      	bls.n	20000cc8 <CheckSum+0xb4>
      }
      missalignementSize=2 * missalignementSize - Size;
20000cea:	7fbb      	ldrb	r3, [r7, #30]
20000cec:	005b      	lsls	r3, r3, #1
20000cee:	b2da      	uxtb	r2, r3
20000cf0:	68bb      	ldr	r3, [r7, #8]
20000cf2:	b2db      	uxtb	r3, r3
20000cf4:	1ad3      	subs	r3, r2, r3
20000cf6:	77bb      	strb	r3, [r7, #30]
20000cf8:	e012      	b.n	20000d20 <CheckSum+0x10c>
    }
    else
    {
        for (uint8_t k=0; k<=3;k++){
20000cfa:	2300      	movs	r3, #0
20000cfc:	757b      	strb	r3, [r7, #21]
20000cfe:	e00c      	b.n	20000d1a <CheckSum+0x106>
            InitVal += (uint8_t) (Val>>(8*k) & 0xff);
20000d00:	693a      	ldr	r2, [r7, #16]
20000d02:	7d7b      	ldrb	r3, [r7, #21]
20000d04:	00db      	lsls	r3, r3, #3
20000d06:	fa22 f303 	lsr.w	r3, r2, r3
20000d0a:	b2db      	uxtb	r3, r3
20000d0c:	461a      	mov	r2, r3
20000d0e:	687b      	ldr	r3, [r7, #4]
20000d10:	4413      	add	r3, r2
20000d12:	607b      	str	r3, [r7, #4]
        for (uint8_t k=0; k<=3;k++){
20000d14:	7d7b      	ldrb	r3, [r7, #21]
20000d16:	3301      	adds	r3, #1
20000d18:	757b      	strb	r3, [r7, #21]
20000d1a:	7d7b      	ldrb	r3, [r7, #21]
20000d1c:	2b03      	cmp	r3, #3
20000d1e:	d9ef      	bls.n	20000d00 <CheckSum+0xec>
        }
    }
    StartAddress+=4;
20000d20:	68fb      	ldr	r3, [r7, #12]
20000d22:	3304      	adds	r3, #4
20000d24:	60fb      	str	r3, [r7, #12]
  for(cnt=0; cnt<Size ; cnt+=4)
20000d26:	69bb      	ldr	r3, [r7, #24]
20000d28:	3304      	adds	r3, #4
20000d2a:	61bb      	str	r3, [r7, #24]
20000d2c:	69bb      	ldr	r3, [r7, #24]
20000d2e:	68ba      	ldr	r2, [r7, #8]
20000d30:	429a      	cmp	r2, r3
20000d32:	d892      	bhi.n	20000c5a <CheckSum+0x46>
  }
  
  return (InitVal);
20000d34:	687b      	ldr	r3, [r7, #4]
}
20000d36:	4618      	mov	r0, r3
20000d38:	3720      	adds	r7, #32
20000d3a:	46bd      	mov	sp, r7
20000d3c:	bd80      	pop	{r7, pc}

20000d3e <Verify>:
  *     R1             : Checksum value
  * Note: Optional for all types of device
  * NOTE - keeping original ST algorithm: not verified and optimized
  */

uint64_t Verify (uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement){
20000d3e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20000d42:	b090      	sub	sp, #64	@ 0x40
20000d44:	af00      	add	r7, sp, #0
20000d46:	61f8      	str	r0, [r7, #28]
20000d48:	61b9      	str	r1, [r7, #24]
20000d4a:	617a      	str	r2, [r7, #20]
20000d4c:	613b      	str	r3, [r7, #16]
#define BUF_SIZE 2
  uint32_t InitVal = 0;
20000d4e:	2300      	movs	r3, #0
20000d50:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t VerifiedData = 0;
20000d52:	2300      	movs	r3, #0
20000d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
//  uint8_t TmpBuffer = 0x00;
	uint64_t checksum;
  Size*=4;
20000d56:	697b      	ldr	r3, [r7, #20]
20000d58:	009b      	lsls	r3, r3, #2
20000d5a:	617b      	str	r3, [r7, #20]
  uint8_t Buffer[BUF_SIZE];
  uint32_t LocAddr = MemoryAddr & EXT_FLASH_ADDR_MASK;
20000d5c:	69fb      	ldr	r3, [r7, #28]
20000d5e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
20000d62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t posBuf;
        
  checksum = CheckSum((uint32_t)LocAddr + (missalignement & 0xf), Size - ((missalignement >> 16) & 0xF), InitVal);
20000d64:	693b      	ldr	r3, [r7, #16]
20000d66:	f003 020f 	and.w	r2, r3, #15
20000d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000d6c:	18d0      	adds	r0, r2, r3
20000d6e:	693b      	ldr	r3, [r7, #16]
20000d70:	0c1b      	lsrs	r3, r3, #16
20000d72:	f003 030f 	and.w	r3, r3, #15
20000d76:	697a      	ldr	r2, [r7, #20]
20000d78:	1ad3      	subs	r3, r2, r3
20000d7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
20000d7c:	4619      	mov	r1, r3
20000d7e:	f7ff ff49 	bl	20000c14 <CheckSum>
20000d82:	4603      	mov	r3, r0
20000d84:	2200      	movs	r2, #0
20000d86:	603b      	str	r3, [r7, #0]
20000d88:	607a      	str	r2, [r7, #4]
20000d8a:	e9d7 2300 	ldrd	r2, r3, [r7]
20000d8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  
  while (Size>VerifiedData)
20000d92:	e045      	b.n	20000e20 <Verify+0xe2>
  {
	LOC_LedOn();
20000d94:	f7ff fe5e 	bl	20000a54 <LOC_LedOn>
	Flash_Read(MemoryAddr+VerifiedData, Buffer, BUF_SIZE);
20000d98:	69fa      	ldr	r2, [r7, #28]
20000d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20000d9c:	4413      	add	r3, r2
20000d9e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
20000da2:	2202      	movs	r2, #2
20000da4:	4618      	mov	r0, r3
20000da6:	f000 fc71 	bl	2000168c <Flash_Read>
	LOC_LedOff();
20000daa:	f7ff fe5f 	bl	20000a6c <LOC_LedOff>

	posBuf=0;
20000dae:	2300      	movs	r3, #0
20000db0:	63bb      	str	r3, [r7, #56]	@ 0x38
	while ((Size>VerifiedData) && (posBuf<1024)) {
20000db2:	e02d      	b.n	20000e10 <Verify+0xd2>
	    if (Buffer[posBuf] != *((uint8_t*)RAMBufferAddr+VerifiedData))
20000db4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
20000db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000dba:	4413      	add	r3, r2
20000dbc:	781a      	ldrb	r2, [r3, #0]
20000dbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
20000dc0:	69bb      	ldr	r3, [r7, #24]
20000dc2:	440b      	add	r3, r1
20000dc4:	781b      	ldrb	r3, [r3, #0]
20000dc6:	429a      	cmp	r2, r3
20000dc8:	d01c      	beq.n	20000e04 <Verify+0xc6>
	      return ((checksum<<32) + MemoryAddr+VerifiedData);
20000dca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
20000dce:	f04f 0200 	mov.w	r2, #0
20000dd2:	f04f 0300 	mov.w	r3, #0
20000dd6:	0003      	movs	r3, r0
20000dd8:	2200      	movs	r2, #0
20000dda:	69f9      	ldr	r1, [r7, #28]
20000ddc:	2000      	movs	r0, #0
20000dde:	468a      	mov	sl, r1
20000de0:	4683      	mov	fp, r0
20000de2:	eb12 080a 	adds.w	r8, r2, sl
20000de6:	eb43 090b 	adc.w	r9, r3, fp
20000dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20000dec:	2200      	movs	r2, #0
20000dee:	60bb      	str	r3, [r7, #8]
20000df0:	60fa      	str	r2, [r7, #12]
20000df2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
20000df6:	460b      	mov	r3, r1
20000df8:	eb18 0403 	adds.w	r4, r8, r3
20000dfc:	4613      	mov	r3, r2
20000dfe:	eb49 0503 	adc.w	r5, r9, r3
20000e02:	e019      	b.n	20000e38 <Verify+0xfa>
	    posBuf++;
20000e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000e06:	3301      	adds	r3, #1
20000e08:	63bb      	str	r3, [r7, #56]	@ 0x38
	    VerifiedData++;
20000e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20000e0c:	3301      	adds	r3, #1
20000e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while ((Size>VerifiedData) && (posBuf<1024)) {
20000e10:	697a      	ldr	r2, [r7, #20]
20000e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20000e14:	429a      	cmp	r2, r3
20000e16:	d903      	bls.n	20000e20 <Verify+0xe2>
20000e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
20000e1e:	d3c9      	bcc.n	20000db4 <Verify+0x76>
  while (Size>VerifiedData)
20000e20:	697a      	ldr	r2, [r7, #20]
20000e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
20000e24:	429a      	cmp	r2, r3
20000e26:	d8b5      	bhi.n	20000d94 <Verify+0x56>
	}
  }
       
  return (checksum<<32);
20000e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
20000e2c:	f04f 0400 	mov.w	r4, #0
20000e30:	f04f 0500 	mov.w	r5, #0
20000e34:	0015      	movs	r5, r2
20000e36:	2400      	movs	r4, #0
}
20000e38:	4622      	mov	r2, r4
20000e3a:	462b      	mov	r3, r5
20000e3c:	4610      	mov	r0, r2
20000e3e:	4619      	mov	r1, r3
20000e40:	3740      	adds	r7, #64	@ 0x40
20000e42:	46bd      	mov	sp, r7
20000e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

20000e48 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
20000e48:	b580      	push	{r7, lr}
20000e4a:	b088      	sub	sp, #32
20000e4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000e4e:	f107 030c 	add.w	r3, r7, #12
20000e52:	2200      	movs	r2, #0
20000e54:	601a      	str	r2, [r3, #0]
20000e56:	605a      	str	r2, [r3, #4]
20000e58:	609a      	str	r2, [r3, #8]
20000e5a:	60da      	str	r2, [r3, #12]
20000e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
20000e5e:	2300      	movs	r3, #0
20000e60:	60bb      	str	r3, [r7, #8]
20000e62:	4b2a      	ldr	r3, [pc, #168]	@ (20000f0c <MX_GPIO_Init+0xc4>)
20000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20000e66:	4a29      	ldr	r2, [pc, #164]	@ (20000f0c <MX_GPIO_Init+0xc4>)
20000e68:	f043 0301 	orr.w	r3, r3, #1
20000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
20000e6e:	4b27      	ldr	r3, [pc, #156]	@ (20000f0c <MX_GPIO_Init+0xc4>)
20000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20000e72:	f003 0301 	and.w	r3, r3, #1
20000e76:	60bb      	str	r3, [r7, #8]
20000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
20000e7a:	2300      	movs	r3, #0
20000e7c:	607b      	str	r3, [r7, #4]
20000e7e:	4b23      	ldr	r3, [pc, #140]	@ (20000f0c <MX_GPIO_Init+0xc4>)
20000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20000e82:	4a22      	ldr	r2, [pc, #136]	@ (20000f0c <MX_GPIO_Init+0xc4>)
20000e84:	f043 0304 	orr.w	r3, r3, #4
20000e88:	6313      	str	r3, [r2, #48]	@ 0x30
20000e8a:	4b20      	ldr	r3, [pc, #128]	@ (20000f0c <MX_GPIO_Init+0xc4>)
20000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20000e8e:	f003 0304 	and.w	r3, r3, #4
20000e92:	607b      	str	r3, [r7, #4]
20000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
20000e96:	2300      	movs	r3, #0
20000e98:	603b      	str	r3, [r7, #0]
20000e9a:	4b1c      	ldr	r3, [pc, #112]	@ (20000f0c <MX_GPIO_Init+0xc4>)
20000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20000e9e:	4a1b      	ldr	r2, [pc, #108]	@ (20000f0c <MX_GPIO_Init+0xc4>)
20000ea0:	f043 0308 	orr.w	r3, r3, #8
20000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
20000ea6:	4b19      	ldr	r3, [pc, #100]	@ (20000f0c <MX_GPIO_Init+0xc4>)
20000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20000eaa:	f003 0308 	and.w	r3, r3, #8
20000eae:	603b      	str	r3, [r7, #0]
20000eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);
20000eb2:	2201      	movs	r2, #1
20000eb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
20000eb8:	4815      	ldr	r0, [pc, #84]	@ (20000f10 <MX_GPIO_Init+0xc8>)
20000eba:	f004 ffa7 	bl	20005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_FLASH_GPIO_Port, DEBUG_LED_FLASH_Pin, GPIO_PIN_RESET);
20000ebe:	2200      	movs	r2, #0
20000ec0:	2104      	movs	r1, #4
20000ec2:	4814      	ldr	r0, [pc, #80]	@ (20000f14 <MX_GPIO_Init+0xcc>)
20000ec4:	f004 ffa2 	bl	20005e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_nCS_Pin;
20000ec8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
20000ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20000ece:	2301      	movs	r3, #1
20000ed0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20000ed2:	2300      	movs	r3, #0
20000ed4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
20000ed6:	2302      	movs	r3, #2
20000ed8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_nCS_GPIO_Port, &GPIO_InitStruct);
20000eda:	f107 030c 	add.w	r3, r7, #12
20000ede:	4619      	mov	r1, r3
20000ee0:	480b      	ldr	r0, [pc, #44]	@ (20000f10 <MX_GPIO_Init+0xc8>)
20000ee2:	f004 fd13 	bl	2000590c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_LED_FLASH_Pin;
20000ee6:	2304      	movs	r3, #4
20000ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20000eea:	2301      	movs	r3, #1
20000eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20000eee:	2300      	movs	r3, #0
20000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
20000ef2:	2302      	movs	r3, #2
20000ef4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DEBUG_LED_FLASH_GPIO_Port, &GPIO_InitStruct);
20000ef6:	f107 030c 	add.w	r3, r7, #12
20000efa:	4619      	mov	r1, r3
20000efc:	4805      	ldr	r0, [pc, #20]	@ (20000f14 <MX_GPIO_Init+0xcc>)
20000efe:	f004 fd05 	bl	2000590c <HAL_GPIO_Init>

}
20000f02:	bf00      	nop
20000f04:	3720      	adds	r7, #32
20000f06:	46bd      	mov	sp, r7
20000f08:	bd80      	pop	{r7, pc}
20000f0a:	bf00      	nop
20000f0c:	40023800 	.word	0x40023800
20000f10:	40020000 	.word	0x40020000
20000f14:	40020c00 	.word	0x40020c00

20000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20000f18:	b580      	push	{r7, lr}
20000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
20000f1c:	f000 feaa 	bl	20001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20000f20:	f000 f806 	bl	20000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20000f24:	f7ff ff90 	bl	20000e48 <MX_GPIO_Init>
  MX_SPI3_Init();
20000f28:	f000 f870 	bl	2000100c <MX_SPI3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
20000f2c:	bf00      	nop
20000f2e:	e7fd      	b.n	20000f2c <main+0x14>

20000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20000f30:	b580      	push	{r7, lr}
20000f32:	b094      	sub	sp, #80	@ 0x50
20000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000f36:	f107 0320 	add.w	r3, r7, #32
20000f3a:	2230      	movs	r2, #48	@ 0x30
20000f3c:	2100      	movs	r1, #0
20000f3e:	4618      	mov	r0, r3
20000f40:	f008 ffbb 	bl	20009eba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20000f44:	f107 030c 	add.w	r3, r7, #12
20000f48:	2200      	movs	r2, #0
20000f4a:	601a      	str	r2, [r3, #0]
20000f4c:	605a      	str	r2, [r3, #4]
20000f4e:	609a      	str	r2, [r3, #8]
20000f50:	60da      	str	r2, [r3, #12]
20000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20000f54:	2300      	movs	r3, #0
20000f56:	60bb      	str	r3, [r7, #8]
20000f58:	4b27      	ldr	r3, [pc, #156]	@ (20000ff8 <SystemClock_Config+0xc8>)
20000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20000f5c:	4a26      	ldr	r2, [pc, #152]	@ (20000ff8 <SystemClock_Config+0xc8>)
20000f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20000f62:	6413      	str	r3, [r2, #64]	@ 0x40
20000f64:	4b24      	ldr	r3, [pc, #144]	@ (20000ff8 <SystemClock_Config+0xc8>)
20000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20000f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20000f6c:	60bb      	str	r3, [r7, #8]
20000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20000f70:	2300      	movs	r3, #0
20000f72:	607b      	str	r3, [r7, #4]
20000f74:	4b21      	ldr	r3, [pc, #132]	@ (20000ffc <SystemClock_Config+0xcc>)
20000f76:	681b      	ldr	r3, [r3, #0]
20000f78:	4a20      	ldr	r2, [pc, #128]	@ (20000ffc <SystemClock_Config+0xcc>)
20000f7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
20000f7e:	6013      	str	r3, [r2, #0]
20000f80:	4b1e      	ldr	r3, [pc, #120]	@ (20000ffc <SystemClock_Config+0xcc>)
20000f82:	681b      	ldr	r3, [r3, #0]
20000f84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
20000f88:	607b      	str	r3, [r7, #4]
20000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
20000f8c:	2301      	movs	r3, #1
20000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
20000f90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20000f94:	627b      	str	r3, [r7, #36]	@ 0x24
  //RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20000f96:	2302      	movs	r3, #2
20000f98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
20000f9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20000f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
20000fa0:	2308      	movs	r3, #8
20000fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
20000fa4:	2360      	movs	r3, #96	@ 0x60
20000fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20000fa8:	2302      	movs	r3, #2
20000faa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
20000fac:	2304      	movs	r3, #4
20000fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20000fb0:	f107 0320 	add.w	r3, r7, #32
20000fb4:	4618      	mov	r0, r3
20000fb6:	f005 fa6b 	bl	20006490 <HAL_RCC_OscConfig>
20000fba:	4603      	mov	r3, r0
20000fbc:	2b00      	cmp	r3, #0
20000fbe:	d001      	beq.n	20000fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
20000fc0:	f000 f81e 	bl	20001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20000fc4:	230f      	movs	r3, #15
20000fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20000fc8:	2302      	movs	r3, #2
20000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20000fcc:	2300      	movs	r3, #0
20000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
20000fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
20000fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
20000fd6:	2300      	movs	r3, #0
20000fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
20000fda:	f107 030c 	add.w	r3, r7, #12
20000fde:	2103      	movs	r1, #3
20000fe0:	4618      	mov	r0, r3
20000fe2:	f005 fccd 	bl	20006980 <HAL_RCC_ClockConfig>
20000fe6:	4603      	mov	r3, r0
20000fe8:	2b00      	cmp	r3, #0
20000fea:	d001      	beq.n	20000ff0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
20000fec:	f000 f808 	bl	20001000 <Error_Handler>
  }
}
20000ff0:	bf00      	nop
20000ff2:	3750      	adds	r7, #80	@ 0x50
20000ff4:	46bd      	mov	sp, r7
20000ff6:	bd80      	pop	{r7, pc}
20000ff8:	40023800 	.word	0x40023800
20000ffc:	40007000 	.word	0x40007000

20001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20001000:	b480      	push	{r7}
20001002:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
20001004:	b672      	cpsid	i
}
20001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20001008:	bf00      	nop
2000100a:	e7fd      	b.n	20001008 <Error_Handler+0x8>

2000100c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
2000100c:	b580      	push	{r7, lr}
2000100e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
20001010:	4b17      	ldr	r3, [pc, #92]	@ (20001070 <MX_SPI3_Init+0x64>)
20001012:	4a18      	ldr	r2, [pc, #96]	@ (20001074 <MX_SPI3_Init+0x68>)
20001014:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
20001016:	4b16      	ldr	r3, [pc, #88]	@ (20001070 <MX_SPI3_Init+0x64>)
20001018:	f44f 7282 	mov.w	r2, #260	@ 0x104
2000101c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
2000101e:	4b14      	ldr	r3, [pc, #80]	@ (20001070 <MX_SPI3_Init+0x64>)
20001020:	2200      	movs	r2, #0
20001022:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
20001024:	4b12      	ldr	r3, [pc, #72]	@ (20001070 <MX_SPI3_Init+0x64>)
20001026:	2200      	movs	r2, #0
20001028:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
2000102a:	4b11      	ldr	r3, [pc, #68]	@ (20001070 <MX_SPI3_Init+0x64>)
2000102c:	2200      	movs	r2, #0
2000102e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
20001030:	4b0f      	ldr	r3, [pc, #60]	@ (20001070 <MX_SPI3_Init+0x64>)
20001032:	2200      	movs	r2, #0
20001034:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
20001036:	4b0e      	ldr	r3, [pc, #56]	@ (20001070 <MX_SPI3_Init+0x64>)
20001038:	f44f 7200 	mov.w	r2, #512	@ 0x200
2000103c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
2000103e:	4b0c      	ldr	r3, [pc, #48]	@ (20001070 <MX_SPI3_Init+0x64>)
20001040:	2200      	movs	r2, #0
20001042:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
20001044:	4b0a      	ldr	r3, [pc, #40]	@ (20001070 <MX_SPI3_Init+0x64>)
20001046:	2200      	movs	r2, #0
20001048:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
2000104a:	4b09      	ldr	r3, [pc, #36]	@ (20001070 <MX_SPI3_Init+0x64>)
2000104c:	2200      	movs	r2, #0
2000104e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20001050:	4b07      	ldr	r3, [pc, #28]	@ (20001070 <MX_SPI3_Init+0x64>)
20001052:	2200      	movs	r2, #0
20001054:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
20001056:	4b06      	ldr	r3, [pc, #24]	@ (20001070 <MX_SPI3_Init+0x64>)
20001058:	220a      	movs	r2, #10
2000105a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
2000105c:	4804      	ldr	r0, [pc, #16]	@ (20001070 <MX_SPI3_Init+0x64>)
2000105e:	f006 fab9 	bl	200075d4 <HAL_SPI_Init>
20001062:	4603      	mov	r3, r0
20001064:	2b00      	cmp	r3, #0
20001066:	d001      	beq.n	2000106c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
20001068:	f7ff ffca 	bl	20001000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
2000106c:	bf00      	nop
2000106e:	bd80      	pop	{r7, pc}
20001070:	20000434 	.word	0x20000434
20001074:	40003c00 	.word	0x40003c00

20001078 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
20001078:	b580      	push	{r7, lr}
2000107a:	b08a      	sub	sp, #40	@ 0x28
2000107c:	af00      	add	r7, sp, #0
2000107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
20001080:	f107 0314 	add.w	r3, r7, #20
20001084:	2200      	movs	r2, #0
20001086:	601a      	str	r2, [r3, #0]
20001088:	605a      	str	r2, [r3, #4]
2000108a:	609a      	str	r2, [r3, #8]
2000108c:	60da      	str	r2, [r3, #12]
2000108e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
20001090:	687b      	ldr	r3, [r7, #4]
20001092:	681b      	ldr	r3, [r3, #0]
20001094:	4a19      	ldr	r2, [pc, #100]	@ (200010fc <HAL_SPI_MspInit+0x84>)
20001096:	4293      	cmp	r3, r2
20001098:	d12c      	bne.n	200010f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
2000109a:	2300      	movs	r3, #0
2000109c:	613b      	str	r3, [r7, #16]
2000109e:	4b18      	ldr	r3, [pc, #96]	@ (20001100 <HAL_SPI_MspInit+0x88>)
200010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200010a2:	4a17      	ldr	r2, [pc, #92]	@ (20001100 <HAL_SPI_MspInit+0x88>)
200010a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
200010a8:	6413      	str	r3, [r2, #64]	@ 0x40
200010aa:	4b15      	ldr	r3, [pc, #84]	@ (20001100 <HAL_SPI_MspInit+0x88>)
200010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200010ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
200010b2:	613b      	str	r3, [r7, #16]
200010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
200010b6:	2300      	movs	r3, #0
200010b8:	60fb      	str	r3, [r7, #12]
200010ba:	4b11      	ldr	r3, [pc, #68]	@ (20001100 <HAL_SPI_MspInit+0x88>)
200010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200010be:	4a10      	ldr	r2, [pc, #64]	@ (20001100 <HAL_SPI_MspInit+0x88>)
200010c0:	f043 0304 	orr.w	r3, r3, #4
200010c4:	6313      	str	r3, [r2, #48]	@ 0x30
200010c6:	4b0e      	ldr	r3, [pc, #56]	@ (20001100 <HAL_SPI_MspInit+0x88>)
200010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200010ca:	f003 0304 	and.w	r3, r3, #4
200010ce:	60fb      	str	r3, [r7, #12]
200010d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SPI3_SCKH_FLASH_Pin|SPI3_MISO_FLASH_Pin|SPI3_MOSI_FLASH_Pin;
200010d2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
200010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200010d8:	2302      	movs	r3, #2
200010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200010dc:	2300      	movs	r3, #0
200010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200010e0:	2303      	movs	r3, #3
200010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
200010e4:	2306      	movs	r3, #6
200010e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
200010e8:	f107 0314 	add.w	r3, r7, #20
200010ec:	4619      	mov	r1, r3
200010ee:	4805      	ldr	r0, [pc, #20]	@ (20001104 <HAL_SPI_MspInit+0x8c>)
200010f0:	f004 fc0c 	bl	2000590c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
200010f4:	bf00      	nop
200010f6:	3728      	adds	r7, #40	@ 0x28
200010f8:	46bd      	mov	sp, r7
200010fa:	bd80      	pop	{r7, pc}
200010fc:	40003c00 	.word	0x40003c00
20001100:	40023800 	.word	0x40023800
20001104:	40020800 	.word	0x40020800

20001108 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
20001108:	b580      	push	{r7, lr}
2000110a:	b082      	sub	sp, #8
2000110c:	af00      	add	r7, sp, #0
2000110e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
20001110:	687b      	ldr	r3, [r7, #4]
20001112:	681b      	ldr	r3, [r3, #0]
20001114:	4a08      	ldr	r2, [pc, #32]	@ (20001138 <HAL_SPI_MspDeInit+0x30>)
20001116:	4293      	cmp	r3, r2
20001118:	d10a      	bne.n	20001130 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
2000111a:	4b08      	ldr	r3, [pc, #32]	@ (2000113c <HAL_SPI_MspDeInit+0x34>)
2000111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000111e:	4a07      	ldr	r2, [pc, #28]	@ (2000113c <HAL_SPI_MspDeInit+0x34>)
20001120:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
20001124:	6413      	str	r3, [r2, #64]	@ 0x40
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, SPI3_SCKH_FLASH_Pin|SPI3_MISO_FLASH_Pin|SPI3_MOSI_FLASH_Pin);
20001126:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
2000112a:	4805      	ldr	r0, [pc, #20]	@ (20001140 <HAL_SPI_MspDeInit+0x38>)
2000112c:	f004 fd72 	bl	20005c14 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
20001130:	bf00      	nop
20001132:	3708      	adds	r7, #8
20001134:	46bd      	mov	sp, r7
20001136:	bd80      	pop	{r7, pc}
20001138:	40003c00 	.word	0x40003c00
2000113c:	40023800 	.word	0x40023800
20001140:	40020800 	.word	0x40020800

20001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
20001144:	b480      	push	{r7}
20001146:	b083      	sub	sp, #12
20001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000114a:	2300      	movs	r3, #0
2000114c:	607b      	str	r3, [r7, #4]
2000114e:	4b10      	ldr	r3, [pc, #64]	@ (20001190 <HAL_MspInit+0x4c>)
20001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20001152:	4a0f      	ldr	r2, [pc, #60]	@ (20001190 <HAL_MspInit+0x4c>)
20001154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20001158:	6453      	str	r3, [r2, #68]	@ 0x44
2000115a:	4b0d      	ldr	r3, [pc, #52]	@ (20001190 <HAL_MspInit+0x4c>)
2000115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000115e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20001162:	607b      	str	r3, [r7, #4]
20001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
20001166:	2300      	movs	r3, #0
20001168:	603b      	str	r3, [r7, #0]
2000116a:	4b09      	ldr	r3, [pc, #36]	@ (20001190 <HAL_MspInit+0x4c>)
2000116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000116e:	4a08      	ldr	r2, [pc, #32]	@ (20001190 <HAL_MspInit+0x4c>)
20001170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20001174:	6413      	str	r3, [r2, #64]	@ 0x40
20001176:	4b06      	ldr	r3, [pc, #24]	@ (20001190 <HAL_MspInit+0x4c>)
20001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000117a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2000117e:	603b      	str	r3, [r7, #0]
20001180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
20001182:	bf00      	nop
20001184:	370c      	adds	r7, #12
20001186:	46bd      	mov	sp, r7
20001188:	f85d 7b04 	ldr.w	r7, [sp], #4
2000118c:	4770      	bx	lr
2000118e:	bf00      	nop
20001190:	40023800 	.word	0x40023800

20001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20001194:	b480      	push	{r7}
20001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
20001198:	bf00      	nop
2000119a:	e7fd      	b.n	20001198 <NMI_Handler+0x4>

2000119c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2000119c:	b480      	push	{r7}
2000119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
200011a0:	bf00      	nop
200011a2:	e7fd      	b.n	200011a0 <HardFault_Handler+0x4>

200011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
200011a4:	b480      	push	{r7}
200011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
200011a8:	bf00      	nop
200011aa:	e7fd      	b.n	200011a8 <MemManage_Handler+0x4>

200011ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
200011ac:	b480      	push	{r7}
200011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
200011b0:	bf00      	nop
200011b2:	e7fd      	b.n	200011b0 <BusFault_Handler+0x4>

200011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
200011b4:	b480      	push	{r7}
200011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
200011b8:	bf00      	nop
200011ba:	e7fd      	b.n	200011b8 <UsageFault_Handler+0x4>

200011bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
200011bc:	b480      	push	{r7}
200011be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
200011c0:	bf00      	nop
200011c2:	46bd      	mov	sp, r7
200011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200011c8:	4770      	bx	lr

200011ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
200011ca:	b480      	push	{r7}
200011cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
200011ce:	bf00      	nop
200011d0:	46bd      	mov	sp, r7
200011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200011d6:	4770      	bx	lr

200011d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
200011d8:	b480      	push	{r7}
200011da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
200011dc:	bf00      	nop
200011de:	46bd      	mov	sp, r7
200011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
200011e4:	4770      	bx	lr

200011e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
200011e6:	b580      	push	{r7, lr}
200011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
200011ea:	f000 fdd1 	bl	20001d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
200011ee:	bf00      	nop
200011f0:	bd80      	pop	{r7, pc}

200011f2 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
200011f2:	b480      	push	{r7}
200011f4:	af00      	add	r7, sp, #0
}
200011f6:	bf00      	nop
200011f8:	46bd      	mov	sp, r7
200011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200011fe:	4770      	bx	lr

20001200 <_getpid>:

int _getpid(void)
{
20001200:	b480      	push	{r7}
20001202:	af00      	add	r7, sp, #0
  return 1;
20001204:	2301      	movs	r3, #1
}
20001206:	4618      	mov	r0, r3
20001208:	46bd      	mov	sp, r7
2000120a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000120e:	4770      	bx	lr

20001210 <_kill>:

int _kill(int pid, int sig)
{
20001210:	b580      	push	{r7, lr}
20001212:	b082      	sub	sp, #8
20001214:	af00      	add	r7, sp, #0
20001216:	6078      	str	r0, [r7, #4]
20001218:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
2000121a:	f008 fef3 	bl	2000a004 <__errno>
2000121e:	4603      	mov	r3, r0
20001220:	2216      	movs	r2, #22
20001222:	601a      	str	r2, [r3, #0]
  return -1;
20001224:	f04f 33ff 	mov.w	r3, #4294967295
}
20001228:	4618      	mov	r0, r3
2000122a:	3708      	adds	r7, #8
2000122c:	46bd      	mov	sp, r7
2000122e:	bd80      	pop	{r7, pc}

20001230 <_exit>:

void _exit (int status)
{
20001230:	b580      	push	{r7, lr}
20001232:	b082      	sub	sp, #8
20001234:	af00      	add	r7, sp, #0
20001236:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
20001238:	f04f 31ff 	mov.w	r1, #4294967295
2000123c:	6878      	ldr	r0, [r7, #4]
2000123e:	f7ff ffe7 	bl	20001210 <_kill>
  while (1) {}    /* Make sure we hang here */
20001242:	bf00      	nop
20001244:	e7fd      	b.n	20001242 <_exit+0x12>

20001246 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
20001246:	b580      	push	{r7, lr}
20001248:	b086      	sub	sp, #24
2000124a:	af00      	add	r7, sp, #0
2000124c:	60f8      	str	r0, [r7, #12]
2000124e:	60b9      	str	r1, [r7, #8]
20001250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
20001252:	2300      	movs	r3, #0
20001254:	617b      	str	r3, [r7, #20]
20001256:	e00a      	b.n	2000126e <_read+0x28>
  {
    *ptr++ = __io_getchar();
20001258:	f3af 8000 	nop.w
2000125c:	4601      	mov	r1, r0
2000125e:	68bb      	ldr	r3, [r7, #8]
20001260:	1c5a      	adds	r2, r3, #1
20001262:	60ba      	str	r2, [r7, #8]
20001264:	b2ca      	uxtb	r2, r1
20001266:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
20001268:	697b      	ldr	r3, [r7, #20]
2000126a:	3301      	adds	r3, #1
2000126c:	617b      	str	r3, [r7, #20]
2000126e:	697a      	ldr	r2, [r7, #20]
20001270:	687b      	ldr	r3, [r7, #4]
20001272:	429a      	cmp	r2, r3
20001274:	dbf0      	blt.n	20001258 <_read+0x12>
  }

  return len;
20001276:	687b      	ldr	r3, [r7, #4]
}
20001278:	4618      	mov	r0, r3
2000127a:	3718      	adds	r7, #24
2000127c:	46bd      	mov	sp, r7
2000127e:	bd80      	pop	{r7, pc}

20001280 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
20001280:	b580      	push	{r7, lr}
20001282:	b086      	sub	sp, #24
20001284:	af00      	add	r7, sp, #0
20001286:	60f8      	str	r0, [r7, #12]
20001288:	60b9      	str	r1, [r7, #8]
2000128a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
2000128c:	2300      	movs	r3, #0
2000128e:	617b      	str	r3, [r7, #20]
20001290:	e009      	b.n	200012a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
20001292:	68bb      	ldr	r3, [r7, #8]
20001294:	1c5a      	adds	r2, r3, #1
20001296:	60ba      	str	r2, [r7, #8]
20001298:	781b      	ldrb	r3, [r3, #0]
2000129a:	4618      	mov	r0, r3
2000129c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
200012a0:	697b      	ldr	r3, [r7, #20]
200012a2:	3301      	adds	r3, #1
200012a4:	617b      	str	r3, [r7, #20]
200012a6:	697a      	ldr	r2, [r7, #20]
200012a8:	687b      	ldr	r3, [r7, #4]
200012aa:	429a      	cmp	r2, r3
200012ac:	dbf1      	blt.n	20001292 <_write+0x12>
  }
  return len;
200012ae:	687b      	ldr	r3, [r7, #4]
}
200012b0:	4618      	mov	r0, r3
200012b2:	3718      	adds	r7, #24
200012b4:	46bd      	mov	sp, r7
200012b6:	bd80      	pop	{r7, pc}

200012b8 <_close>:

int _close(int file)
{
200012b8:	b480      	push	{r7}
200012ba:	b083      	sub	sp, #12
200012bc:	af00      	add	r7, sp, #0
200012be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
200012c0:	f04f 33ff 	mov.w	r3, #4294967295
}
200012c4:	4618      	mov	r0, r3
200012c6:	370c      	adds	r7, #12
200012c8:	46bd      	mov	sp, r7
200012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
200012ce:	4770      	bx	lr

200012d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
200012d0:	b480      	push	{r7}
200012d2:	b083      	sub	sp, #12
200012d4:	af00      	add	r7, sp, #0
200012d6:	6078      	str	r0, [r7, #4]
200012d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
200012da:	683b      	ldr	r3, [r7, #0]
200012dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
200012e0:	605a      	str	r2, [r3, #4]
  return 0;
200012e2:	2300      	movs	r3, #0
}
200012e4:	4618      	mov	r0, r3
200012e6:	370c      	adds	r7, #12
200012e8:	46bd      	mov	sp, r7
200012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200012ee:	4770      	bx	lr

200012f0 <_isatty>:

int _isatty(int file)
{
200012f0:	b480      	push	{r7}
200012f2:	b083      	sub	sp, #12
200012f4:	af00      	add	r7, sp, #0
200012f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
200012f8:	2301      	movs	r3, #1
}
200012fa:	4618      	mov	r0, r3
200012fc:	370c      	adds	r7, #12
200012fe:	46bd      	mov	sp, r7
20001300:	f85d 7b04 	ldr.w	r7, [sp], #4
20001304:	4770      	bx	lr

20001306 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
20001306:	b480      	push	{r7}
20001308:	b085      	sub	sp, #20
2000130a:	af00      	add	r7, sp, #0
2000130c:	60f8      	str	r0, [r7, #12]
2000130e:	60b9      	str	r1, [r7, #8]
20001310:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
20001312:	2300      	movs	r3, #0
}
20001314:	4618      	mov	r0, r3
20001316:	3714      	adds	r7, #20
20001318:	46bd      	mov	sp, r7
2000131a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000131e:	4770      	bx	lr

20001320 <_open>:

int _open(char *path, int flags, ...)
{
20001320:	b40e      	push	{r1, r2, r3}
20001322:	b480      	push	{r7}
20001324:	b082      	sub	sp, #8
20001326:	af00      	add	r7, sp, #0
20001328:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
2000132a:	f04f 33ff 	mov.w	r3, #4294967295
}
2000132e:	4618      	mov	r0, r3
20001330:	3708      	adds	r7, #8
20001332:	46bd      	mov	sp, r7
20001334:	f85d 7b04 	ldr.w	r7, [sp], #4
20001338:	b003      	add	sp, #12
2000133a:	4770      	bx	lr

2000133c <_wait>:

int _wait(int *status)
{
2000133c:	b580      	push	{r7, lr}
2000133e:	b082      	sub	sp, #8
20001340:	af00      	add	r7, sp, #0
20001342:	6078      	str	r0, [r7, #4]
  (void)status;
  errno = ECHILD;
20001344:	f008 fe5e 	bl	2000a004 <__errno>
20001348:	4603      	mov	r3, r0
2000134a:	220a      	movs	r2, #10
2000134c:	601a      	str	r2, [r3, #0]
  return -1;
2000134e:	f04f 33ff 	mov.w	r3, #4294967295
}
20001352:	4618      	mov	r0, r3
20001354:	3708      	adds	r7, #8
20001356:	46bd      	mov	sp, r7
20001358:	bd80      	pop	{r7, pc}

2000135a <_unlink>:

int _unlink(char *name)
{
2000135a:	b580      	push	{r7, lr}
2000135c:	b082      	sub	sp, #8
2000135e:	af00      	add	r7, sp, #0
20001360:	6078      	str	r0, [r7, #4]
  (void)name;
  errno = ENOENT;
20001362:	f008 fe4f 	bl	2000a004 <__errno>
20001366:	4603      	mov	r3, r0
20001368:	2202      	movs	r2, #2
2000136a:	601a      	str	r2, [r3, #0]
  return -1;
2000136c:	f04f 33ff 	mov.w	r3, #4294967295
}
20001370:	4618      	mov	r0, r3
20001372:	3708      	adds	r7, #8
20001374:	46bd      	mov	sp, r7
20001376:	bd80      	pop	{r7, pc}

20001378 <_times>:

int _times(struct tms *buf)
{
20001378:	b480      	push	{r7}
2000137a:	b083      	sub	sp, #12
2000137c:	af00      	add	r7, sp, #0
2000137e:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
20001380:	f04f 33ff 	mov.w	r3, #4294967295
}
20001384:	4618      	mov	r0, r3
20001386:	370c      	adds	r7, #12
20001388:	46bd      	mov	sp, r7
2000138a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000138e:	4770      	bx	lr

20001390 <_stat>:

int _stat(char *file, struct stat *st)
{
20001390:	b480      	push	{r7}
20001392:	b083      	sub	sp, #12
20001394:	af00      	add	r7, sp, #0
20001396:	6078      	str	r0, [r7, #4]
20001398:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
2000139a:	683b      	ldr	r3, [r7, #0]
2000139c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
200013a0:	605a      	str	r2, [r3, #4]
  return 0;
200013a2:	2300      	movs	r3, #0
}
200013a4:	4618      	mov	r0, r3
200013a6:	370c      	adds	r7, #12
200013a8:	46bd      	mov	sp, r7
200013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200013ae:	4770      	bx	lr

200013b0 <_link>:

int _link(char *old, char *new)
{
200013b0:	b580      	push	{r7, lr}
200013b2:	b082      	sub	sp, #8
200013b4:	af00      	add	r7, sp, #0
200013b6:	6078      	str	r0, [r7, #4]
200013b8:	6039      	str	r1, [r7, #0]
  (void)old;
  (void)new;
  errno = EMLINK;
200013ba:	f008 fe23 	bl	2000a004 <__errno>
200013be:	4603      	mov	r3, r0
200013c0:	221f      	movs	r2, #31
200013c2:	601a      	str	r2, [r3, #0]
  return -1;
200013c4:	f04f 33ff 	mov.w	r3, #4294967295
}
200013c8:	4618      	mov	r0, r3
200013ca:	3708      	adds	r7, #8
200013cc:	46bd      	mov	sp, r7
200013ce:	bd80      	pop	{r7, pc}

200013d0 <_fork>:

int _fork(void)
{
200013d0:	b580      	push	{r7, lr}
200013d2:	af00      	add	r7, sp, #0
  errno = EAGAIN;
200013d4:	f008 fe16 	bl	2000a004 <__errno>
200013d8:	4603      	mov	r3, r0
200013da:	220b      	movs	r2, #11
200013dc:	601a      	str	r2, [r3, #0]
  return -1;
200013de:	f04f 33ff 	mov.w	r3, #4294967295
}
200013e2:	4618      	mov	r0, r3
200013e4:	bd80      	pop	{r7, pc}

200013e6 <_execve>:

int _execve(char *name, char **argv, char **env)
{
200013e6:	b580      	push	{r7, lr}
200013e8:	b084      	sub	sp, #16
200013ea:	af00      	add	r7, sp, #0
200013ec:	60f8      	str	r0, [r7, #12]
200013ee:	60b9      	str	r1, [r7, #8]
200013f0:	607a      	str	r2, [r7, #4]
  (void)name;
  (void)argv;
  (void)env;
  errno = ENOMEM;
200013f2:	f008 fe07 	bl	2000a004 <__errno>
200013f6:	4603      	mov	r3, r0
200013f8:	220c      	movs	r2, #12
200013fa:	601a      	str	r2, [r3, #0]
  return -1;
200013fc:	f04f 33ff 	mov.w	r3, #4294967295
}
20001400:	4618      	mov	r0, r3
20001402:	3710      	adds	r7, #16
20001404:	46bd      	mov	sp, r7
20001406:	bd80      	pop	{r7, pc}

20001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
20001408:	b580      	push	{r7, lr}
2000140a:	b086      	sub	sp, #24
2000140c:	af00      	add	r7, sp, #0
2000140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
20001410:	4a14      	ldr	r2, [pc, #80]	@ (20001464 <_sbrk+0x5c>)
20001412:	4b15      	ldr	r3, [pc, #84]	@ (20001468 <_sbrk+0x60>)
20001414:	1ad3      	subs	r3, r2, r3
20001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
20001418:	697b      	ldr	r3, [r7, #20]
2000141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
2000141c:	4b13      	ldr	r3, [pc, #76]	@ (2000146c <_sbrk+0x64>)
2000141e:	681b      	ldr	r3, [r3, #0]
20001420:	2b00      	cmp	r3, #0
20001422:	d102      	bne.n	2000142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
20001424:	4b11      	ldr	r3, [pc, #68]	@ (2000146c <_sbrk+0x64>)
20001426:	4a12      	ldr	r2, [pc, #72]	@ (20001470 <_sbrk+0x68>)
20001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
2000142a:	4b10      	ldr	r3, [pc, #64]	@ (2000146c <_sbrk+0x64>)
2000142c:	681a      	ldr	r2, [r3, #0]
2000142e:	687b      	ldr	r3, [r7, #4]
20001430:	4413      	add	r3, r2
20001432:	693a      	ldr	r2, [r7, #16]
20001434:	429a      	cmp	r2, r3
20001436:	d207      	bcs.n	20001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
20001438:	f008 fde4 	bl	2000a004 <__errno>
2000143c:	4603      	mov	r3, r0
2000143e:	220c      	movs	r2, #12
20001440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
20001442:	f04f 33ff 	mov.w	r3, #4294967295
20001446:	e009      	b.n	2000145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
20001448:	4b08      	ldr	r3, [pc, #32]	@ (2000146c <_sbrk+0x64>)
2000144a:	681b      	ldr	r3, [r3, #0]
2000144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2000144e:	4b07      	ldr	r3, [pc, #28]	@ (2000146c <_sbrk+0x64>)
20001450:	681a      	ldr	r2, [r3, #0]
20001452:	687b      	ldr	r3, [r7, #4]
20001454:	4413      	add	r3, r2
20001456:	4a05      	ldr	r2, [pc, #20]	@ (2000146c <_sbrk+0x64>)
20001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
2000145a:	68fb      	ldr	r3, [r7, #12]
}
2000145c:	4618      	mov	r0, r3
2000145e:	3718      	adds	r7, #24
20001460:	46bd      	mov	sp, r7
20001462:	bd80      	pop	{r7, pc}
20001464:	20020004 	.word	0x20020004
20001468:	00000400 	.word	0x00000400
2000146c:	20000490 	.word	0x20000490
20001470:	2000a65c 	.word	0x2000a65c

20001474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20001474:	b480      	push	{r7}
20001476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20001478:	4b06      	ldr	r3, [pc, #24]	@ (20001494 <SystemInit+0x20>)
2000147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
2000147e:	4a05      	ldr	r2, [pc, #20]	@ (20001494 <SystemInit+0x20>)
20001480:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
20001484:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
20001488:	bf00      	nop
2000148a:	46bd      	mov	sp, r7
2000148c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001490:	4770      	bx	lr
20001492:	bf00      	nop
20001494:	e000ed00 	.word	0xe000ed00

20001498 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
20001498:	b480      	push	{r7}
2000149a:	b087      	sub	sp, #28
2000149c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
2000149e:	2300      	movs	r3, #0
200014a0:	613b      	str	r3, [r7, #16]
200014a2:	2300      	movs	r3, #0
200014a4:	617b      	str	r3, [r7, #20]
200014a6:	2302      	movs	r3, #2
200014a8:	60fb      	str	r3, [r7, #12]
200014aa:	2300      	movs	r3, #0
200014ac:	60bb      	str	r3, [r7, #8]
200014ae:	2302      	movs	r3, #2
200014b0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
200014b2:	4b34      	ldr	r3, [pc, #208]	@ (20001584 <SystemCoreClockUpdate+0xec>)
200014b4:	689b      	ldr	r3, [r3, #8]
200014b6:	f003 030c 	and.w	r3, r3, #12
200014ba:	613b      	str	r3, [r7, #16]

  switch (tmp)
200014bc:	693b      	ldr	r3, [r7, #16]
200014be:	2b08      	cmp	r3, #8
200014c0:	d011      	beq.n	200014e6 <SystemCoreClockUpdate+0x4e>
200014c2:	693b      	ldr	r3, [r7, #16]
200014c4:	2b08      	cmp	r3, #8
200014c6:	d844      	bhi.n	20001552 <SystemCoreClockUpdate+0xba>
200014c8:	693b      	ldr	r3, [r7, #16]
200014ca:	2b00      	cmp	r3, #0
200014cc:	d003      	beq.n	200014d6 <SystemCoreClockUpdate+0x3e>
200014ce:	693b      	ldr	r3, [r7, #16]
200014d0:	2b04      	cmp	r3, #4
200014d2:	d004      	beq.n	200014de <SystemCoreClockUpdate+0x46>
200014d4:	e03d      	b.n	20001552 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
200014d6:	4b2c      	ldr	r3, [pc, #176]	@ (20001588 <SystemCoreClockUpdate+0xf0>)
200014d8:	4a2c      	ldr	r2, [pc, #176]	@ (2000158c <SystemCoreClockUpdate+0xf4>)
200014da:	601a      	str	r2, [r3, #0]
      break;
200014dc:	e03d      	b.n	2000155a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
200014de:	4b2a      	ldr	r3, [pc, #168]	@ (20001588 <SystemCoreClockUpdate+0xf0>)
200014e0:	4a2b      	ldr	r2, [pc, #172]	@ (20001590 <SystemCoreClockUpdate+0xf8>)
200014e2:	601a      	str	r2, [r3, #0]
      break;
200014e4:	e039      	b.n	2000155a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
200014e6:	4b27      	ldr	r3, [pc, #156]	@ (20001584 <SystemCoreClockUpdate+0xec>)
200014e8:	685b      	ldr	r3, [r3, #4]
200014ea:	0d9b      	lsrs	r3, r3, #22
200014ec:	f003 0301 	and.w	r3, r3, #1
200014f0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200014f2:	4b24      	ldr	r3, [pc, #144]	@ (20001584 <SystemCoreClockUpdate+0xec>)
200014f4:	685b      	ldr	r3, [r3, #4]
200014f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
200014fa:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
200014fc:	68bb      	ldr	r3, [r7, #8]
200014fe:	2b00      	cmp	r3, #0
20001500:	d00c      	beq.n	2000151c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
20001502:	4a23      	ldr	r2, [pc, #140]	@ (20001590 <SystemCoreClockUpdate+0xf8>)
20001504:	687b      	ldr	r3, [r7, #4]
20001506:	fbb2 f3f3 	udiv	r3, r2, r3
2000150a:	4a1e      	ldr	r2, [pc, #120]	@ (20001584 <SystemCoreClockUpdate+0xec>)
2000150c:	6852      	ldr	r2, [r2, #4]
2000150e:	0992      	lsrs	r2, r2, #6
20001510:	f3c2 0208 	ubfx	r2, r2, #0, #9
20001514:	fb02 f303 	mul.w	r3, r2, r3
20001518:	617b      	str	r3, [r7, #20]
2000151a:	e00b      	b.n	20001534 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
2000151c:	4a1b      	ldr	r2, [pc, #108]	@ (2000158c <SystemCoreClockUpdate+0xf4>)
2000151e:	687b      	ldr	r3, [r7, #4]
20001520:	fbb2 f3f3 	udiv	r3, r2, r3
20001524:	4a17      	ldr	r2, [pc, #92]	@ (20001584 <SystemCoreClockUpdate+0xec>)
20001526:	6852      	ldr	r2, [r2, #4]
20001528:	0992      	lsrs	r2, r2, #6
2000152a:	f3c2 0208 	ubfx	r2, r2, #0, #9
2000152e:	fb02 f303 	mul.w	r3, r2, r3
20001532:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20001534:	4b13      	ldr	r3, [pc, #76]	@ (20001584 <SystemCoreClockUpdate+0xec>)
20001536:	685b      	ldr	r3, [r3, #4]
20001538:	0c1b      	lsrs	r3, r3, #16
2000153a:	f003 0303 	and.w	r3, r3, #3
2000153e:	3301      	adds	r3, #1
20001540:	005b      	lsls	r3, r3, #1
20001542:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
20001544:	697a      	ldr	r2, [r7, #20]
20001546:	68fb      	ldr	r3, [r7, #12]
20001548:	fbb2 f3f3 	udiv	r3, r2, r3
2000154c:	4a0e      	ldr	r2, [pc, #56]	@ (20001588 <SystemCoreClockUpdate+0xf0>)
2000154e:	6013      	str	r3, [r2, #0]
      break;
20001550:	e003      	b.n	2000155a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
20001552:	4b0d      	ldr	r3, [pc, #52]	@ (20001588 <SystemCoreClockUpdate+0xf0>)
20001554:	4a0d      	ldr	r2, [pc, #52]	@ (2000158c <SystemCoreClockUpdate+0xf4>)
20001556:	601a      	str	r2, [r3, #0]
      break;
20001558:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
2000155a:	4b0a      	ldr	r3, [pc, #40]	@ (20001584 <SystemCoreClockUpdate+0xec>)
2000155c:	689b      	ldr	r3, [r3, #8]
2000155e:	091b      	lsrs	r3, r3, #4
20001560:	f003 030f 	and.w	r3, r3, #15
20001564:	4a0b      	ldr	r2, [pc, #44]	@ (20001594 <SystemCoreClockUpdate+0xfc>)
20001566:	5cd3      	ldrb	r3, [r2, r3]
20001568:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
2000156a:	4b07      	ldr	r3, [pc, #28]	@ (20001588 <SystemCoreClockUpdate+0xf0>)
2000156c:	681a      	ldr	r2, [r3, #0]
2000156e:	693b      	ldr	r3, [r7, #16]
20001570:	fa22 f303 	lsr.w	r3, r2, r3
20001574:	4a04      	ldr	r2, [pc, #16]	@ (20001588 <SystemCoreClockUpdate+0xf0>)
20001576:	6013      	str	r3, [r2, #0]
}
20001578:	bf00      	nop
2000157a:	371c      	adds	r7, #28
2000157c:	46bd      	mov	sp, r7
2000157e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001582:	4770      	bx	lr
20001584:	40023800 	.word	0x40023800
20001588:	200003b0 	.word	0x200003b0
2000158c:	00f42400 	.word	0x00f42400
20001590:	017d7840 	.word	0x017d7840
20001594:	2000a638 	.word	0x2000a638

20001598 <Flash_Select>:
 * 			So testing CS pin let understand if a
 * 			transmission is still running:
 * 			before selecting chip a test over the same CS let
 * 			understand if previous transmission terminated
 ******************************************/
void Flash_Select(void) {
20001598:	b580      	push	{r7, lr}
2000159a:	af00      	add	r7, sp, #0
		while (SPI_IS_BUSY) {}
2000159c:	bf00      	nop
2000159e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
200015a2:	4807      	ldr	r0, [pc, #28]	@ (200015c0 <Flash_Select+0x28>)
200015a4:	f004 fc1a 	bl	20005ddc <HAL_GPIO_ReadPin>
200015a8:	4603      	mov	r3, r0
200015aa:	2b00      	cmp	r3, #0
200015ac:	d0f7      	beq.n	2000159e <Flash_Select+0x6>
		HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_RESET);
200015ae:	2200      	movs	r2, #0
200015b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
200015b4:	4802      	ldr	r0, [pc, #8]	@ (200015c0 <Flash_Select+0x28>)
200015b6:	f004 fc29 	bl	20005e0c <HAL_GPIO_WritePin>
}
200015ba:	bf00      	nop
200015bc:	bd80      	pop	{r7, pc}
200015be:	bf00      	nop
200015c0:	40020000 	.word	0x40020000

200015c4 <Flash_UnSelect>:

/******************************************
 * @brief	disable Flash SPI
 * 			verifying that there is no a running data transfer
 ******************************************/
void Flash_UnSelect(void) {
200015c4:	b580      	push	{r7, lr}
200015c6:	af00      	add	r7, sp, #0
	// CS pin must be low (selected flash) until previous transmission is completed
#ifdef	EXT_FLASH_SPI_POLLING_MODE
	HAL_GPIO_WritePin(FLASH_nCS_GPIO_Port, FLASH_nCS_Pin, GPIO_PIN_SET);	//unselect
200015c8:	2201      	movs	r2, #1
200015ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
200015ce:	4802      	ldr	r0, [pc, #8]	@ (200015d8 <Flash_UnSelect+0x14>)
200015d0:	f004 fc1c 	bl	20005e0c <HAL_GPIO_WritePin>
#endif  // FLASH_SPI_POLLING_MODE
}
200015d4:	bf00      	nop
200015d6:	bd80      	pop	{r7, pc}
200015d8:	40020000 	.word	0x40020000

200015dc <Flash_Receive>:




void Flash_Receive(uint8_t* data, uint16_t dataSize){
200015dc:	b580      	push	{r7, lr}
200015de:	b082      	sub	sp, #8
200015e0:	af00      	add	r7, sp, #0
200015e2:	6078      	str	r0, [r7, #4]
200015e4:	460b      	mov	r3, r1
200015e6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive (&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
200015e8:	887a      	ldrh	r2, [r7, #2]
200015ea:	f04f 33ff 	mov.w	r3, #4294967295
200015ee:	6879      	ldr	r1, [r7, #4]
200015f0:	4803      	ldr	r0, [pc, #12]	@ (20001600 <Flash_Receive+0x24>)
200015f2:	f006 f9f8 	bl	200079e6 <HAL_SPI_Receive>
}
200015f6:	bf00      	nop
200015f8:	3708      	adds	r7, #8
200015fa:	46bd      	mov	sp, r7
200015fc:	bd80      	pop	{r7, pc}
200015fe:	bf00      	nop
20001600:	20000434 	.word	0x20000434

20001604 <Flash_Polling_Transmit>:
 * @BRIEF	engages SPI port tranferring data to Flash
 * 			just using Polling mode (TouchGFX requires this function)
 * @PARAM	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 *********************************************************************/
void Flash_Polling_Transmit(uint8_t* data, uint16_t dataSize){
20001604:	b580      	push	{r7, lr}
20001606:	b082      	sub	sp, #8
20001608:	af00      	add	r7, sp, #0
2000160a:	6078      	str	r0, [r7, #4]
2000160c:	460b      	mov	r3, r1
2000160e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
20001610:	887a      	ldrh	r2, [r7, #2]
20001612:	f04f 33ff 	mov.w	r3, #4294967295
20001616:	6879      	ldr	r1, [r7, #4]
20001618:	4803      	ldr	r0, [pc, #12]	@ (20001628 <Flash_Polling_Transmit+0x24>)
2000161a:	f006 f8a0 	bl	2000775e <HAL_SPI_Transmit>
}
2000161e:	bf00      	nop
20001620:	3708      	adds	r7, #8
20001622:	46bd      	mov	sp, r7
20001624:	bd80      	pop	{r7, pc}
20001626:	bf00      	nop
20001628:	20000434 	.word	0x20000434

2000162c <Flash_Transmit>:
 * 			you need to set this macro even using TouchGFX (having its own configuration parameter:
 * 			set DISPL_DMA_CUTOFF and CubeMX parameter to the same value)
 * @PARAM	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 **************************/
void Flash_Transmit(uint8_t* data, uint16_t dataSize){
2000162c:	b580      	push	{r7, lr}
2000162e:	b082      	sub	sp, #8
20001630:	af00      	add	r7, sp, #0
20001632:	6078      	str	r0, [r7, #4]
20001634:	460b      	mov	r3, r1
20001636:	807b      	strh	r3, [r7, #2]
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	if (dataSize<EXT_FLASH_DMA_CUTOFF) {
#endif //FLASH_SPI_POLLING_MODE
		HAL_SPI_Transmit(&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
20001638:	887a      	ldrh	r2, [r7, #2]
2000163a:	f04f 33ff 	mov.w	r3, #4294967295
2000163e:	6879      	ldr	r1, [r7, #4]
20001640:	4803      	ldr	r0, [pc, #12]	@ (20001650 <Flash_Transmit+0x24>)
20001642:	f006 f88c 	bl	2000775e <HAL_SPI_Transmit>
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	} else {
		HAL_SPI_Transmit_DMA(&EXT_FLASH_SPI_PORT , data, dataSize);
	}
#endif  //FLASH_SPI_POLLING_MODE
}
20001646:	bf00      	nop
20001648:	3708      	adds	r7, #8
2000164a:	46bd      	mov	sp, r7
2000164c:	bd80      	pop	{r7, pc}
2000164e:	bf00      	nop
20001650:	20000434 	.word	0x20000434

20001654 <Flash_WaitForWritingComplete>:
/**************************
 * @BRIEF	keeps looping inside this function until "BUSY" bit in SR1 register
 * 			becomes 0, meaning that the runnin data operation (writing or erasing)
 * 			on the chip, ended
 **************************/
void Flash_WaitForWritingComplete(){
20001654:	b580      	push	{r7, lr}
20001656:	b082      	sub	sp, #8
20001658:	af00      	add	r7, sp, #0
uint8_t buffer[1];
	Flash_Select();
2000165a:	f7ff ff9d 	bl	20001598 <Flash_Select>
	buffer[0] = W25_R_SR1;
2000165e:	2305      	movs	r3, #5
20001660:	713b      	strb	r3, [r7, #4]
	Flash_Transmit(buffer, 1);
20001662:	1d3b      	adds	r3, r7, #4
20001664:	2101      	movs	r1, #1
20001666:	4618      	mov	r0, r3
20001668:	f7ff ffe0 	bl	2000162c <Flash_Transmit>
	do {
		Flash_Receive(buffer, 1);  //SR1 is repeteadly sent until Flash is selected
2000166c:	1d3b      	adds	r3, r7, #4
2000166e:	2101      	movs	r1, #1
20001670:	4618      	mov	r0, r3
20001672:	f7ff ffb3 	bl	200015dc <Flash_Receive>
	} while (buffer[0] & SR1_BIT_BUSY);
20001676:	793b      	ldrb	r3, [r7, #4]
20001678:	f003 0301 	and.w	r3, r3, #1
2000167c:	2b00      	cmp	r3, #0
2000167e:	d1f5      	bne.n	2000166c <Flash_WaitForWritingComplete+0x18>
	Flash_UnSelect();
20001680:	f7ff ffa0 	bl	200015c4 <Flash_UnSelect>
}
20001684:	bf00      	nop
20001686:	3708      	adds	r7, #8
20001688:	46bd      	mov	sp, r7
2000168a:	bd80      	pop	{r7, pc}

2000168c <Flash_Read>:
 * 			current version of library doesn't need it
 * @PARAM	addr		EEPROM address to start reading
 *  		data		buffer to fill with read data
 * 			dataSize	number of bytes to read
 **************************/
void Flash_Read(uint32_t addr, uint8_t* data, uint32_t dataSize){
2000168c:	b580      	push	{r7, lr}
2000168e:	b086      	sub	sp, #24
20001690:	af00      	add	r7, sp, #0
20001692:	60f8      	str	r0, [r7, #12]
20001694:	60b9      	str	r1, [r7, #8]
20001696:	607a      	str	r2, [r7, #4]
uint16_t data_to_transfer;
uint8_t buffer[5];

	buffer[0] = FLASH_READ_COMMAND;
20001698:	2303      	movs	r3, #3
2000169a:	743b      	strb	r3, [r7, #16]
	buffer[1] = (addr >> 16) & 0xFF;
2000169c:	68fb      	ldr	r3, [r7, #12]
2000169e:	0c1b      	lsrs	r3, r3, #16
200016a0:	b2db      	uxtb	r3, r3
200016a2:	747b      	strb	r3, [r7, #17]
	buffer[2] = (addr >> 8) & 0xFF;
200016a4:	68fb      	ldr	r3, [r7, #12]
200016a6:	0a1b      	lsrs	r3, r3, #8
200016a8:	b2db      	uxtb	r3, r3
200016aa:	74bb      	strb	r3, [r7, #18]
	buffer[3] = addr & 0xFF;
200016ac:	68fb      	ldr	r3, [r7, #12]
200016ae:	b2db      	uxtb	r3, r3
200016b0:	74fb      	strb	r3, [r7, #19]
	buffer[4] = W25_DUMMY;
200016b2:	2300      	movs	r3, #0
200016b4:	753b      	strb	r3, [r7, #20]
	Flash_Select();
200016b6:	f7ff ff6f 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, (FLASH_READ_COMMAND == W25_READ ? 4 : 5));  // "normal/slow" read command doesn't need sending dummy byte
200016ba:	f107 0310 	add.w	r3, r7, #16
200016be:	2104      	movs	r1, #4
200016c0:	4618      	mov	r0, r3
200016c2:	f7ff ffb3 	bl	2000162c <Flash_Transmit>

	// dataSize is 32 bit, spi_receive handles 16bit transfers, so I have to loop...
	while (dataSize) {
200016c6:	e016      	b.n	200016f6 <Flash_Read+0x6a>
		data_to_transfer = ((dataSize>0xFFFF) ? 0xFFFF : (uint16_t)dataSize);
200016c8:	687b      	ldr	r3, [r7, #4]
200016ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200016ce:	d202      	bcs.n	200016d6 <Flash_Read+0x4a>
200016d0:	687b      	ldr	r3, [r7, #4]
200016d2:	b29b      	uxth	r3, r3
200016d4:	e001      	b.n	200016da <Flash_Read+0x4e>
200016d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
200016da:	82fb      	strh	r3, [r7, #22]
		Flash_Receive(data, data_to_transfer);
200016dc:	8afb      	ldrh	r3, [r7, #22]
200016de:	4619      	mov	r1, r3
200016e0:	68b8      	ldr	r0, [r7, #8]
200016e2:	f7ff ff7b 	bl	200015dc <Flash_Receive>
		data+=data_to_transfer;
200016e6:	8afb      	ldrh	r3, [r7, #22]
200016e8:	68ba      	ldr	r2, [r7, #8]
200016ea:	4413      	add	r3, r2
200016ec:	60bb      	str	r3, [r7, #8]
		dataSize-=data_to_transfer;
200016ee:	8afb      	ldrh	r3, [r7, #22]
200016f0:	687a      	ldr	r2, [r7, #4]
200016f2:	1ad3      	subs	r3, r2, r3
200016f4:	607b      	str	r3, [r7, #4]
	while (dataSize) {
200016f6:	687b      	ldr	r3, [r7, #4]
200016f8:	2b00      	cmp	r3, #0
200016fa:	d1e5      	bne.n	200016c8 <Flash_Read+0x3c>
	}
	Flash_UnSelect();
200016fc:	f7ff ff62 	bl	200015c4 <Flash_UnSelect>
}
20001700:	bf00      	nop
20001702:	3718      	adds	r7, #24
20001704:	46bd      	mov	sp, r7
20001706:	bd80      	pop	{r7, pc}

20001708 <Flash_SimpleWriteAPage>:
 * 			function doesn't check for the EEPROM page boundary override
 * @PARAM	addr		EEPROM address to start writing
 *  		data		buffer containing data to write into EEPROM
 * 			dataSize	number of bytes to write
 ***********************************************************************/
void Flash_SimpleWriteAPage(uint32_t addr, uint8_t* data, uint16_t dataSize){
20001708:	b580      	push	{r7, lr}
2000170a:	b086      	sub	sp, #24
2000170c:	af00      	add	r7, sp, #0
2000170e:	60f8      	str	r0, [r7, #12]
20001710:	60b9      	str	r1, [r7, #8]
20001712:	4613      	mov	r3, r2
20001714:	80fb      	strh	r3, [r7, #6]
uint8_t buffer[4];
	buffer[0] = W25_PAGE_P;
20001716:	2302      	movs	r3, #2
20001718:	753b      	strb	r3, [r7, #20]
	buffer[1] = (addr >> 16) & 0xFF;
2000171a:	68fb      	ldr	r3, [r7, #12]
2000171c:	0c1b      	lsrs	r3, r3, #16
2000171e:	b2db      	uxtb	r3, r3
20001720:	757b      	strb	r3, [r7, #21]
	buffer[2] = (addr >> 8) & 0xFF;
20001722:	68fb      	ldr	r3, [r7, #12]
20001724:	0a1b      	lsrs	r3, r3, #8
20001726:	b2db      	uxtb	r3, r3
20001728:	75bb      	strb	r3, [r7, #22]
	buffer[3] = addr & 0xFF;
2000172a:	68fb      	ldr	r3, [r7, #12]
2000172c:	b2db      	uxtb	r3, r3
2000172e:	75fb      	strb	r3, [r7, #23]
	Flash_Select();
20001730:	f7ff ff32 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, 4);
20001734:	f107 0314 	add.w	r3, r7, #20
20001738:	2104      	movs	r1, #4
2000173a:	4618      	mov	r0, r3
2000173c:	f7ff ff76 	bl	2000162c <Flash_Transmit>
	Flash_Transmit(data, dataSize);
20001740:	88fb      	ldrh	r3, [r7, #6]
20001742:	4619      	mov	r1, r3
20001744:	68b8      	ldr	r0, [r7, #8]
20001746:	f7ff ff71 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
2000174a:	f7ff ff3b 	bl	200015c4 <Flash_UnSelect>
}
2000174e:	bf00      	nop
20001750:	3718      	adds	r7, #24
20001752:	46bd      	mov	sp, r7
20001754:	bd80      	pop	{r7, pc}

20001756 <Flash_Write>:
 * 			and waiting the writing complete each time
 * @PARAM	addr		EEPROM address to start writing
 *  		data		buffer containing data to write into EEPROM
 * 			dataSize	number of bytes to write
 ***********************************************************************/
void Flash_Write(uint32_t addr, uint8_t* data, uint32_t dataSize){
20001756:	b580      	push	{r7, lr}
20001758:	b088      	sub	sp, #32
2000175a:	af00      	add	r7, sp, #0
2000175c:	60f8      	str	r0, [r7, #12]
2000175e:	60b9      	str	r1, [r7, #8]
20001760:	607a      	str	r2, [r7, #4]
uint8_t buffer[4];
uint16_t quota;
uint32_t inpage_addr;

	if (dataSize==0)
20001762:	687b      	ldr	r3, [r7, #4]
20001764:	2b00      	cmp	r3, #0
20001766:	d054      	beq.n	20001812 <Flash_Write+0xbc>
		return;

	// quota is the data size trasferred until now
	quota=0;
20001768:	2300      	movs	r3, #0
2000176a:	83fb      	strh	r3, [r7, #30]

	// define the starting write position inside the first Flash page to write...
	inpage_addr=addr & (EXT_FLASH_PAGE_SIZE-1);
2000176c:	68fb      	ldr	r3, [r7, #12]
2000176e:	b2db      	uxtb	r3, r3
20001770:	61bb      	str	r3, [r7, #24]

	// ... so I can detect if more than 1 Flash page has still to be written
	while ((dataSize-quota+inpage_addr)>EXT_FLASH_PAGE_SIZE){
20001772:	e025      	b.n	200017c0 <Flash_Write+0x6a>
	//loop here inside, until more than 1 Flash page...

		Flash_Select();
20001774:	f7ff ff10 	bl	20001598 <Flash_Select>
		buffer[0] = W25_W_ENABLE;
20001778:	2306      	movs	r3, #6
2000177a:	753b      	strb	r3, [r7, #20]
		Flash_Transmit(buffer, 1);
2000177c:	f107 0314 	add.w	r3, r7, #20
20001780:	2101      	movs	r1, #1
20001782:	4618      	mov	r0, r3
20001784:	f7ff ff52 	bl	2000162c <Flash_Transmit>
		Flash_UnSelect();
20001788:	f7ff ff1c 	bl	200015c4 <Flash_UnSelect>
		Flash_SimpleWriteAPage(addr+quota,data+quota,(EXT_FLASH_PAGE_SIZE-inpage_addr));
2000178c:	8bfa      	ldrh	r2, [r7, #30]
2000178e:	68fb      	ldr	r3, [r7, #12]
20001790:	18d0      	adds	r0, r2, r3
20001792:	8bfb      	ldrh	r3, [r7, #30]
20001794:	68ba      	ldr	r2, [r7, #8]
20001796:	18d1      	adds	r1, r2, r3
20001798:	69bb      	ldr	r3, [r7, #24]
2000179a:	b29b      	uxth	r3, r3
2000179c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
200017a0:	b29b      	uxth	r3, r3
200017a2:	461a      	mov	r2, r3
200017a4:	f7ff ffb0 	bl	20001708 <Flash_SimpleWriteAPage>
		quota+=(EXT_FLASH_PAGE_SIZE-inpage_addr);
200017a8:	69bb      	ldr	r3, [r7, #24]
200017aa:	b29b      	uxth	r3, r3
200017ac:	8bfa      	ldrh	r2, [r7, #30]
200017ae:	1ad3      	subs	r3, r2, r3
200017b0:	b29b      	uxth	r3, r3
200017b2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
200017b6:	83fb      	strh	r3, [r7, #30]
		// having aligned data to page border on the first writing
		// next writings start from 0 position inside a page
		inpage_addr=0;
200017b8:	2300      	movs	r3, #0
200017ba:	61bb      	str	r3, [r7, #24]
		Flash_WaitForWritingComplete();
200017bc:	f7ff ff4a 	bl	20001654 <Flash_WaitForWritingComplete>
	while ((dataSize-quota+inpage_addr)>EXT_FLASH_PAGE_SIZE){
200017c0:	8bfb      	ldrh	r3, [r7, #30]
200017c2:	687a      	ldr	r2, [r7, #4]
200017c4:	1ad2      	subs	r2, r2, r3
200017c6:	69bb      	ldr	r3, [r7, #24]
200017c8:	4413      	add	r3, r2
200017ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
200017ce:	d8d1      	bhi.n	20001774 <Flash_Write+0x1e>
	}
	// now just the final Flash page...
	if (dataSize-quota) {
200017d0:	8bfb      	ldrh	r3, [r7, #30]
200017d2:	687a      	ldr	r2, [r7, #4]
200017d4:	429a      	cmp	r2, r3
200017d6:	d01d      	beq.n	20001814 <Flash_Write+0xbe>
		Flash_Select();
200017d8:	f7ff fede 	bl	20001598 <Flash_Select>
		buffer[0] = W25_W_ENABLE;
200017dc:	2306      	movs	r3, #6
200017de:	753b      	strb	r3, [r7, #20]
		Flash_Transmit(buffer, 1);
200017e0:	f107 0314 	add.w	r3, r7, #20
200017e4:	2101      	movs	r1, #1
200017e6:	4618      	mov	r0, r3
200017e8:	f7ff ff20 	bl	2000162c <Flash_Transmit>
		Flash_UnSelect();
200017ec:	f7ff feea 	bl	200015c4 <Flash_UnSelect>
		Flash_SimpleWriteAPage(addr+quota,data+quota,dataSize-quota);
200017f0:	8bfa      	ldrh	r2, [r7, #30]
200017f2:	68fb      	ldr	r3, [r7, #12]
200017f4:	18d0      	adds	r0, r2, r3
200017f6:	8bfb      	ldrh	r3, [r7, #30]
200017f8:	68ba      	ldr	r2, [r7, #8]
200017fa:	18d1      	adds	r1, r2, r3
200017fc:	687b      	ldr	r3, [r7, #4]
200017fe:	b29a      	uxth	r2, r3
20001800:	8bfb      	ldrh	r3, [r7, #30]
20001802:	1ad3      	subs	r3, r2, r3
20001804:	b29b      	uxth	r3, r3
20001806:	461a      	mov	r2, r3
20001808:	f7ff ff7e 	bl	20001708 <Flash_SimpleWriteAPage>
		Flash_WaitForWritingComplete();
2000180c:	f7ff ff22 	bl	20001654 <Flash_WaitForWritingComplete>
20001810:	e000      	b.n	20001814 <Flash_Write+0xbe>
		return;
20001812:	bf00      	nop
	}
}
20001814:	3720      	adds	r7, #32
20001816:	46bd      	mov	sp, r7
20001818:	bd80      	pop	{r7, pc}

2000181a <Flash_SErase4k>:
 * 			0x1000, 0x2000, 0x3000, ...
 * 			waiting the writing complete in each page
 * @PARAM	addr	starting erase address
 * 					(it must be a 4k sector boundary)
 *********************************/
void Flash_SErase4k(uint32_t addr){
2000181a:	b580      	push	{r7, lr}
2000181c:	b084      	sub	sp, #16
2000181e:	af00      	add	r7, sp, #0
20001820:	6078      	str	r0, [r7, #4]
uint8_t buffer[4];
	Flash_Select();
20001822:	f7ff feb9 	bl	20001598 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
20001826:	2306      	movs	r3, #6
20001828:	733b      	strb	r3, [r7, #12]
	Flash_Transmit(buffer, 1);
2000182a:	f107 030c 	add.w	r3, r7, #12
2000182e:	2101      	movs	r1, #1
20001830:	4618      	mov	r0, r3
20001832:	f7ff fefb 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
20001836:	f7ff fec5 	bl	200015c4 <Flash_UnSelect>

	buffer[0] = W25_S_ERASE4K;
2000183a:	2320      	movs	r3, #32
2000183c:	733b      	strb	r3, [r7, #12]
	buffer[1] = (addr >> 16) & 0xFF;
2000183e:	687b      	ldr	r3, [r7, #4]
20001840:	0c1b      	lsrs	r3, r3, #16
20001842:	b2db      	uxtb	r3, r3
20001844:	737b      	strb	r3, [r7, #13]
	buffer[2] = (addr >> 8) & 0xFF;
20001846:	687b      	ldr	r3, [r7, #4]
20001848:	0a1b      	lsrs	r3, r3, #8
2000184a:	b2db      	uxtb	r3, r3
2000184c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = addr & 0xFF;
2000184e:	687b      	ldr	r3, [r7, #4]
20001850:	b2db      	uxtb	r3, r3
20001852:	73fb      	strb	r3, [r7, #15]
	Flash_Select();
20001854:	f7ff fea0 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, 4);
20001858:	f107 030c 	add.w	r3, r7, #12
2000185c:	2104      	movs	r1, #4
2000185e:	4618      	mov	r0, r3
20001860:	f7ff fee4 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
20001864:	f7ff feae 	bl	200015c4 <Flash_UnSelect>
	Flash_WaitForWritingComplete();
20001868:	f7ff fef4 	bl	20001654 <Flash_WaitForWritingComplete>
}
2000186c:	bf00      	nop
2000186e:	3710      	adds	r7, #16
20001870:	46bd      	mov	sp, r7
20001872:	bd80      	pop	{r7, pc}

20001874 <Flash_BErase32k>:
 * 			0x008000, 0x010000, 0x018000, ...
 * 			waiting the writing complete in each page
 * @PARAM	addr	starting erase address
 * 					(it must be a 32k block boundary)
 *********************************/
void Flash_BErase32k(uint32_t addr){
20001874:	b580      	push	{r7, lr}
20001876:	b084      	sub	sp, #16
20001878:	af00      	add	r7, sp, #0
2000187a:	6078      	str	r0, [r7, #4]
uint8_t buffer[4];
	Flash_Select();
2000187c:	f7ff fe8c 	bl	20001598 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
20001880:	2306      	movs	r3, #6
20001882:	733b      	strb	r3, [r7, #12]
	Flash_Transmit(buffer, 1);
20001884:	f107 030c 	add.w	r3, r7, #12
20001888:	2101      	movs	r1, #1
2000188a:	4618      	mov	r0, r3
2000188c:	f7ff fece 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
20001890:	f7ff fe98 	bl	200015c4 <Flash_UnSelect>

	buffer[0] = W25_B_ERASE32K;
20001894:	2352      	movs	r3, #82	@ 0x52
20001896:	733b      	strb	r3, [r7, #12]
	buffer[1] = (addr >> 16) & 0xFF;
20001898:	687b      	ldr	r3, [r7, #4]
2000189a:	0c1b      	lsrs	r3, r3, #16
2000189c:	b2db      	uxtb	r3, r3
2000189e:	737b      	strb	r3, [r7, #13]
	buffer[2] = (addr >> 8) & 0xFF;
200018a0:	687b      	ldr	r3, [r7, #4]
200018a2:	0a1b      	lsrs	r3, r3, #8
200018a4:	b2db      	uxtb	r3, r3
200018a6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = addr & 0xFF;
200018a8:	687b      	ldr	r3, [r7, #4]
200018aa:	b2db      	uxtb	r3, r3
200018ac:	73fb      	strb	r3, [r7, #15]
	Flash_Select();
200018ae:	f7ff fe73 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, 4);
200018b2:	f107 030c 	add.w	r3, r7, #12
200018b6:	2104      	movs	r1, #4
200018b8:	4618      	mov	r0, r3
200018ba:	f7ff feb7 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
200018be:	f7ff fe81 	bl	200015c4 <Flash_UnSelect>
	Flash_WaitForWritingComplete();
200018c2:	f7ff fec7 	bl	20001654 <Flash_WaitForWritingComplete>
}
200018c6:	bf00      	nop
200018c8:	3710      	adds	r7, #16
200018ca:	46bd      	mov	sp, r7
200018cc:	bd80      	pop	{r7, pc}

200018ce <Flash_BErase64k>:
 * 			0x010000, 0x020000, 0x030000, ...
 * 			waiting the writing complete in each page
 * @PARAM	addr	starting erase address
 * 					(it must be a 64k block boundary)
 *********************************/
void Flash_BErase64k(uint32_t addr){
200018ce:	b580      	push	{r7, lr}
200018d0:	b084      	sub	sp, #16
200018d2:	af00      	add	r7, sp, #0
200018d4:	6078      	str	r0, [r7, #4]
uint8_t buffer[4];
	Flash_Select();
200018d6:	f7ff fe5f 	bl	20001598 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
200018da:	2306      	movs	r3, #6
200018dc:	733b      	strb	r3, [r7, #12]
	Flash_Transmit(buffer, 1);
200018de:	f107 030c 	add.w	r3, r7, #12
200018e2:	2101      	movs	r1, #1
200018e4:	4618      	mov	r0, r3
200018e6:	f7ff fea1 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
200018ea:	f7ff fe6b 	bl	200015c4 <Flash_UnSelect>

	buffer[0] = W25_B_ERASE64K;
200018ee:	23d8      	movs	r3, #216	@ 0xd8
200018f0:	733b      	strb	r3, [r7, #12]
	buffer[1] = (addr >> 16) & 0xFF;
200018f2:	687b      	ldr	r3, [r7, #4]
200018f4:	0c1b      	lsrs	r3, r3, #16
200018f6:	b2db      	uxtb	r3, r3
200018f8:	737b      	strb	r3, [r7, #13]
	buffer[2] = (addr >> 8) & 0xFF;
200018fa:	687b      	ldr	r3, [r7, #4]
200018fc:	0a1b      	lsrs	r3, r3, #8
200018fe:	b2db      	uxtb	r3, r3
20001900:	73bb      	strb	r3, [r7, #14]
	buffer[3] = addr & 0xFF;
20001902:	687b      	ldr	r3, [r7, #4]
20001904:	b2db      	uxtb	r3, r3
20001906:	73fb      	strb	r3, [r7, #15]
	Flash_Select();
20001908:	f7ff fe46 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, 4);
2000190c:	f107 030c 	add.w	r3, r7, #12
20001910:	2104      	movs	r1, #4
20001912:	4618      	mov	r0, r3
20001914:	f7ff fe8a 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
20001918:	f7ff fe54 	bl	200015c4 <Flash_UnSelect>
	Flash_WaitForWritingComplete();
2000191c:	f7ff fe9a 	bl	20001654 <Flash_WaitForWritingComplete>
}
20001920:	bf00      	nop
20001922:	3710      	adds	r7, #16
20001924:	46bd      	mov	sp, r7
20001926:	bd80      	pop	{r7, pc}

20001928 <Flash_ChipErase>:
 * @BRIEF	Full chip erase to 0XFF
 * 			Chip Erase may need up to 100s
 * 			(typ. 20s)
 * 			waiting the writing complete in each page
 *********************************/
void Flash_ChipErase(){
20001928:	b580      	push	{r7, lr}
2000192a:	b082      	sub	sp, #8
2000192c:	af00      	add	r7, sp, #0
uint8_t buffer[4];
	Flash_Select();
2000192e:	f7ff fe33 	bl	20001598 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
20001932:	2306      	movs	r3, #6
20001934:	713b      	strb	r3, [r7, #4]
	Flash_Transmit(buffer, 1);
20001936:	1d3b      	adds	r3, r7, #4
20001938:	2101      	movs	r1, #1
2000193a:	4618      	mov	r0, r3
2000193c:	f7ff fe76 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
20001940:	f7ff fe40 	bl	200015c4 <Flash_UnSelect>

	buffer[0] = W25_CH_ERASE;
20001944:	23c7      	movs	r3, #199	@ 0xc7
20001946:	713b      	strb	r3, [r7, #4]
	Flash_Select();
20001948:	f7ff fe26 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, 1);
2000194c:	1d3b      	adds	r3, r7, #4
2000194e:	2101      	movs	r1, #1
20001950:	4618      	mov	r0, r3
20001952:	f7ff fe6b 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
20001956:	f7ff fe35 	bl	200015c4 <Flash_UnSelect>
	Flash_WaitForWritingComplete();
2000195a:	f7ff fe7b 	bl	20001654 <Flash_WaitForWritingComplete>
}
2000195e:	bf00      	nop
20001960:	3708      	adds	r7, #8
20001962:	46bd      	mov	sp, r7
20001964:	bd80      	pop	{r7, pc}

20001966 <Flash_PowerDown>:
/**********************************
 * @BRIEF	Initiates a powerdown
 * 			after a powerDown only accepted a porweUp command
 * 			opwerDown operation is 3us long
 *********************************/
void Flash_PowerDown(){
20001966:	b580      	push	{r7, lr}
20001968:	b082      	sub	sp, #8
2000196a:	af00      	add	r7, sp, #0
uint8_t buffer[4];

	buffer[0] = W25_POWERDOWN;
2000196c:	23b9      	movs	r3, #185	@ 0xb9
2000196e:	713b      	strb	r3, [r7, #4]
	Flash_Select();
20001970:	f7ff fe12 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, 1);
20001974:	1d3b      	adds	r3, r7, #4
20001976:	2101      	movs	r1, #1
20001978:	4618      	mov	r0, r3
2000197a:	f7ff fe57 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
2000197e:	f7ff fe21 	bl	200015c4 <Flash_UnSelect>
}
20001982:	bf00      	nop
20001984:	3708      	adds	r7, #8
20001986:	46bd      	mov	sp, r7
20001988:	bd80      	pop	{r7, pc}

2000198a <Flash_PowerUp>:


/**********************************
 * @BRIEF	Release from powerdown (3 us to restart) or read device ID
 *********************************/
void Flash_PowerUp(){
2000198a:	b580      	push	{r7, lr}
2000198c:	b082      	sub	sp, #8
2000198e:	af00      	add	r7, sp, #0
uint8_t buffer[4];

	buffer[0] = W25_POWERUP_ID;
20001990:	23ab      	movs	r3, #171	@ 0xab
20001992:	713b      	strb	r3, [r7, #4]
	Flash_Select();
20001994:	f7ff fe00 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, 1);
20001998:	1d3b      	adds	r3, r7, #4
2000199a:	2101      	movs	r1, #1
2000199c:	4618      	mov	r0, r3
2000199e:	f7ff fe45 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
200019a2:	f7ff fe0f 	bl	200015c4 <Flash_UnSelect>
	HAL_Delay(1);
200019a6:	2001      	movs	r0, #1
200019a8:	f7ff f83d 	bl	20000a26 <HAL_Delay>
}
200019ac:	bf00      	nop
200019ae:	3708      	adds	r7, #8
200019b0:	46bd      	mov	sp, r7
200019b2:	bd80      	pop	{r7, pc}

200019b4 <Flash_ReadDevID>:

/**********************************
 * @BRIEF	read device id from chip
 * @RETURN	device id
 *********************************/
uint8_t Flash_ReadDevID(){
200019b4:	b580      	push	{r7, lr}
200019b6:	b082      	sub	sp, #8
200019b8:	af00      	add	r7, sp, #0
uint8_t buffer[4];
uint8_t data;

	buffer[0] = W25_POWERUP_ID;
200019ba:	23ab      	movs	r3, #171	@ 0xab
200019bc:	713b      	strb	r3, [r7, #4]
	buffer[1] = W25_DUMMY;
200019be:	2300      	movs	r3, #0
200019c0:	717b      	strb	r3, [r7, #5]
	buffer[2] = W25_DUMMY;
200019c2:	2300      	movs	r3, #0
200019c4:	71bb      	strb	r3, [r7, #6]
	buffer[3] = W25_DUMMY;
200019c6:	2300      	movs	r3, #0
200019c8:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
200019ca:	f7ff fde5 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, 4);
200019ce:	1d3b      	adds	r3, r7, #4
200019d0:	2104      	movs	r1, #4
200019d2:	4618      	mov	r0, r3
200019d4:	f7ff fe2a 	bl	2000162c <Flash_Transmit>
	Flash_Receive(&data, 1);
200019d8:	1cfb      	adds	r3, r7, #3
200019da:	2101      	movs	r1, #1
200019dc:	4618      	mov	r0, r3
200019de:	f7ff fdfd 	bl	200015dc <Flash_Receive>
	Flash_UnSelect();
200019e2:	f7ff fdef 	bl	200015c4 <Flash_UnSelect>
	return data;
200019e6:	78fb      	ldrb	r3, [r7, #3]
}
200019e8:	4618      	mov	r0, r3
200019ea:	3708      	adds	r7, #8
200019ec:	46bd      	mov	sp, r7
200019ee:	bd80      	pop	{r7, pc}

200019f0 <Flash_ReadManufactutrerAndDevID>:





uint16_t Flash_ReadManufactutrerAndDevID() {
200019f0:	b580      	push	{r7, lr}
200019f2:	b082      	sub	sp, #8
200019f4:	af00      	add	r7, sp, #0
uint8_t buffer[4];
uint16_t data;

	buffer[0] = W25_POWERUP_ID;
200019f6:	23ab      	movs	r3, #171	@ 0xab
200019f8:	713b      	strb	r3, [r7, #4]
	buffer[1] = W25_DUMMY;
200019fa:	2300      	movs	r3, #0
200019fc:	717b      	strb	r3, [r7, #5]
	buffer[2] = W25_DUMMY;
200019fe:	2300      	movs	r3, #0
20001a00:	71bb      	strb	r3, [r7, #6]
	buffer[3] = W25_DUMMY;
20001a02:	2300      	movs	r3, #0
20001a04:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
20001a06:	f7ff fdc7 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, 4);
20001a0a:	1d3b      	adds	r3, r7, #4
20001a0c:	2104      	movs	r1, #4
20001a0e:	4618      	mov	r0, r3
20001a10:	f7ff fe0c 	bl	2000162c <Flash_Transmit>
	Flash_Receive((uint8_t*)&data, 2);
20001a14:	1cbb      	adds	r3, r7, #2
20001a16:	2102      	movs	r1, #2
20001a18:	4618      	mov	r0, r3
20001a1a:	f7ff fddf 	bl	200015dc <Flash_Receive>
	Flash_UnSelect();
20001a1e:	f7ff fdd1 	bl	200015c4 <Flash_UnSelect>
	return data;
20001a22:	887b      	ldrh	r3, [r7, #2]
}
20001a24:	4618      	mov	r0, r3
20001a26:	3708      	adds	r7, #8
20001a28:	46bd      	mov	sp, r7
20001a2a:	bd80      	pop	{r7, pc}

20001a2c <Flash_ReadJedecID>:
 * 			10H ->	 5Mb		11H ->  10Mb		12H ->  20Mb
 * 			13H ->  40Mb		14H ->  80Mb		15H ->  16Mb
 * 			16H ->  32Mb		17H ->  64Mb		18H -> 128Mb
 * 			19H -> 256Mb		20H -> 512Mb		21H ->   1Gb
 ******************************************************************/
uint32_t Flash_ReadJedecID() {
20001a2c:	b580      	push	{r7, lr}
20001a2e:	b084      	sub	sp, #16
20001a30:	af00      	add	r7, sp, #0
uint8_t buffer[4];
uint8_t data[3];
uint32_t result;

	buffer[0] = W25_JEDEC_ID;
20001a32:	239f      	movs	r3, #159	@ 0x9f
20001a34:	723b      	strb	r3, [r7, #8]
	Flash_Select();
20001a36:	f7ff fdaf 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, 1);
20001a3a:	f107 0308 	add.w	r3, r7, #8
20001a3e:	2101      	movs	r1, #1
20001a40:	4618      	mov	r0, r3
20001a42:	f7ff fdf3 	bl	2000162c <Flash_Transmit>
	Flash_Receive(data, 3);
20001a46:	1d3b      	adds	r3, r7, #4
20001a48:	2103      	movs	r1, #3
20001a4a:	4618      	mov	r0, r3
20001a4c:	f7ff fdc6 	bl	200015dc <Flash_Receive>
	Flash_UnSelect();
20001a50:	f7ff fdb8 	bl	200015c4 <Flash_UnSelect>
	result=((data[0]<<16) | (data[1] <<8) | data[2]);
20001a54:	793b      	ldrb	r3, [r7, #4]
20001a56:	041a      	lsls	r2, r3, #16
20001a58:	797b      	ldrb	r3, [r7, #5]
20001a5a:	021b      	lsls	r3, r3, #8
20001a5c:	4313      	orrs	r3, r2
20001a5e:	79ba      	ldrb	r2, [r7, #6]
20001a60:	4313      	orrs	r3, r2
20001a62:	60fb      	str	r3, [r7, #12]
	return result;
20001a64:	68fb      	ldr	r3, [r7, #12]
}
20001a66:	4618      	mov	r0, r3
20001a68:	3710      	adds	r7, #16
20001a6a:	46bd      	mov	sp, r7
20001a6c:	bd80      	pop	{r7, pc}

20001a6e <Flash_ReadSFDP>:


/*********************************
 * @RETURN	256byte SFDP register content:
 *********************************/
void Flash_ReadSFDP(uint8_t* data) {
20001a6e:	b580      	push	{r7, lr}
20001a70:	b084      	sub	sp, #16
20001a72:	af00      	add	r7, sp, #0
20001a74:	6078      	str	r0, [r7, #4]
uint8_t buffer[5];
	buffer[0] = W25_R_SFPD_REG;
20001a76:	235a      	movs	r3, #90	@ 0x5a
20001a78:	723b      	strb	r3, [r7, #8]
	for (uint8_t k=1;k<5;k++)
20001a7a:	2301      	movs	r3, #1
20001a7c:	73fb      	strb	r3, [r7, #15]
20001a7e:	e008      	b.n	20001a92 <Flash_ReadSFDP+0x24>
		buffer[k]=0;
20001a80:	7bfb      	ldrb	r3, [r7, #15]
20001a82:	3310      	adds	r3, #16
20001a84:	443b      	add	r3, r7
20001a86:	2200      	movs	r2, #0
20001a88:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t k=1;k<5;k++)
20001a8c:	7bfb      	ldrb	r3, [r7, #15]
20001a8e:	3301      	adds	r3, #1
20001a90:	73fb      	strb	r3, [r7, #15]
20001a92:	7bfb      	ldrb	r3, [r7, #15]
20001a94:	2b04      	cmp	r3, #4
20001a96:	d9f3      	bls.n	20001a80 <Flash_ReadSFDP+0x12>
	Flash_Select();
20001a98:	f7ff fd7e 	bl	20001598 <Flash_Select>
	Flash_Transmit(buffer, 5);
20001a9c:	f107 0308 	add.w	r3, r7, #8
20001aa0:	2105      	movs	r1, #5
20001aa2:	4618      	mov	r0, r3
20001aa4:	f7ff fdc2 	bl	2000162c <Flash_Transmit>
	Flash_Receive(data, 256);
20001aa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
20001aac:	6878      	ldr	r0, [r7, #4]
20001aae:	f7ff fd95 	bl	200015dc <Flash_Receive>
	Flash_UnSelect();
20001ab2:	f7ff fd87 	bl	200015c4 <Flash_UnSelect>
}
20001ab6:	bf00      	nop
20001ab8:	3710      	adds	r7, #16
20001aba:	46bd      	mov	sp, r7
20001abc:	bd80      	pop	{r7, pc}

20001abe <Flash_TestAvailability>:
 * 			reading SFDP record, it must return
 * 			a string beginning with "SFDP"
 * @RETURN	1 	test passed
 * 			0	no
 *********************************/
uint8_t Flash_TestAvailability() {
20001abe:	b580      	push	{r7, lr}
20001ac0:	b0c2      	sub	sp, #264	@ 0x108
20001ac2:	af00      	add	r7, sp, #0
uint8_t data[256];
uint8_t test=1;
20001ac4:	2301      	movs	r3, #1
20001ac6:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

	for (uint8_t k=0;k!=254;k++)
20001aca:	2300      	movs	r3, #0
20001acc:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
20001ad0:	e00c      	b.n	20001aec <Flash_TestAvailability+0x2e>
		  data[k]=0xFF;
20001ad2:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
20001ad6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
20001ada:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
20001ade:	21ff      	movs	r1, #255	@ 0xff
20001ae0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t k=0;k!=254;k++)
20001ae2:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
20001ae6:	3301      	adds	r3, #1
20001ae8:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
20001aec:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
20001af0:	2bfe      	cmp	r3, #254	@ 0xfe
20001af2:	d1ee      	bne.n	20001ad2 <Flash_TestAvailability+0x14>
	Flash_ReadSFDP(data);
20001af4:	1d3b      	adds	r3, r7, #4
20001af6:	4618      	mov	r0, r3
20001af8:	f7ff ffb9 	bl	20001a6e <Flash_ReadSFDP>
	if (data[0]!='S')
20001afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
20001b00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
20001b04:	781b      	ldrb	r3, [r3, #0]
20001b06:	2b53      	cmp	r3, #83	@ 0x53
20001b08:	d002      	beq.n	20001b10 <Flash_TestAvailability+0x52>
		test=0;
20001b0a:	2300      	movs	r3, #0
20001b0c:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	if (data[1]!='F')
20001b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
20001b14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
20001b18:	785b      	ldrb	r3, [r3, #1]
20001b1a:	2b46      	cmp	r3, #70	@ 0x46
20001b1c:	d002      	beq.n	20001b24 <Flash_TestAvailability+0x66>
		test=0;
20001b1e:	2300      	movs	r3, #0
20001b20:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	if (data[2]!='D')
20001b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
20001b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
20001b2c:	789b      	ldrb	r3, [r3, #2]
20001b2e:	2b44      	cmp	r3, #68	@ 0x44
20001b30:	d002      	beq.n	20001b38 <Flash_TestAvailability+0x7a>
		test=0;
20001b32:	2300      	movs	r3, #0
20001b34:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	if (data[3]!='P')
20001b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
20001b3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
20001b40:	78db      	ldrb	r3, [r3, #3]
20001b42:	2b50      	cmp	r3, #80	@ 0x50
20001b44:	d002      	beq.n	20001b4c <Flash_TestAvailability+0x8e>
		test=0;
20001b46:	2300      	movs	r3, #0
20001b48:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
	return test;
20001b4c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
}
20001b50:	4618      	mov	r0, r3
20001b52:	f507 7784 	add.w	r7, r7, #264	@ 0x108
20001b56:	46bd      	mov	sp, r7
20001b58:	bd80      	pop	{r7, pc}

20001b5a <Flash_Init>:

/******************************************************************
 * @BRIEF	reading manufacutrer and device ID
 * 			checking if connected device is a Winbond Flash
 ******************************************************************/
uint8_t Flash_Init(){
20001b5a:	b580      	push	{r7, lr}
20001b5c:	b082      	sub	sp, #8
20001b5e:	af00      	add	r7, sp, #0
uint32_t JedecID;
	HAL_Delay(6);	// supposing init is called on system startup: 5 ms (tPUW) required after power-up to be fully available
20001b60:	2006      	movs	r0, #6
20001b62:	f7fe ff60 	bl	20000a26 <HAL_Delay>
	Flash_Reset();
20001b66:	f000 f816 	bl	20001b96 <Flash_Reset>
	if (!Flash_TestAvailability())
20001b6a:	f7ff ffa8 	bl	20001abe <Flash_TestAvailability>
20001b6e:	4603      	mov	r3, r0
20001b70:	2b00      	cmp	r3, #0
20001b72:	d101      	bne.n	20001b78 <Flash_Init+0x1e>
		return 0;
20001b74:	2300      	movs	r3, #0
20001b76:	e00a      	b.n	20001b8e <Flash_Init+0x34>
	JedecID=Flash_ReadJedecID() ;	//select the memSize byte
20001b78:	f7ff ff58 	bl	20001a2c <Flash_ReadJedecID>
20001b7c:	6078      	str	r0, [r7, #4]
	if (((JedecID >> 16) & 0XFF) != 0xEF)  // if ManufacturerID is not Winbond (0xEF)
20001b7e:	687b      	ldr	r3, [r7, #4]
20001b80:	0c1b      	lsrs	r3, r3, #16
20001b82:	b2db      	uxtb	r3, r3
20001b84:	2bef      	cmp	r3, #239	@ 0xef
20001b86:	d001      	beq.n	20001b8c <Flash_Init+0x32>
		return 0;
20001b88:	2300      	movs	r3, #0
20001b8a:	e000      	b.n	20001b8e <Flash_Init+0x34>
	return 1;  //return memSize as per table in Flash_ReadJedecID() definition
20001b8c:	2301      	movs	r3, #1
}
20001b8e:	4618      	mov	r0, r3
20001b90:	3708      	adds	r7, #8
20001b92:	46bd      	mov	sp, r7
20001b94:	bd80      	pop	{r7, pc}

20001b96 <Flash_Reset>:





void Flash_Reset(){
20001b96:	b580      	push	{r7, lr}
20001b98:	b082      	sub	sp, #8
20001b9a:	af00      	add	r7, sp, #0
uint8_t command;
	command = W25_RESET_EN;
20001b9c:	2366      	movs	r3, #102	@ 0x66
20001b9e:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
20001ba0:	f7ff fcfa 	bl	20001598 <Flash_Select>
	Flash_Transmit(&command, 1);
20001ba4:	1dfb      	adds	r3, r7, #7
20001ba6:	2101      	movs	r1, #1
20001ba8:	4618      	mov	r0, r3
20001baa:	f7ff fd3f 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
20001bae:	f7ff fd09 	bl	200015c4 <Flash_UnSelect>
	command = W25_RESET;
20001bb2:	2399      	movs	r3, #153	@ 0x99
20001bb4:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
20001bb6:	f7ff fcef 	bl	20001598 <Flash_Select>
	Flash_Transmit(&command, 1);
20001bba:	1dfb      	adds	r3, r7, #7
20001bbc:	2101      	movs	r1, #1
20001bbe:	4618      	mov	r0, r3
20001bc0:	f7ff fd34 	bl	2000162c <Flash_Transmit>
	Flash_UnSelect();
20001bc4:	f7ff fcfe 	bl	200015c4 <Flash_UnSelect>
	HAL_Delay(1);	// 30us needed by resetting
20001bc8:	2001      	movs	r0, #1
20001bca:	f7fe ff2c 	bl	20000a26 <HAL_Delay>
}
20001bce:	bf00      	nop
20001bd0:	3708      	adds	r7, #8
20001bd2:	46bd      	mov	sp, r7
20001bd4:	bd80      	pop	{r7, pc}

20001bd6 <DataReader_WaitForReceiveDone>:





void DataReader_WaitForReceiveDone(){
20001bd6:	b480      	push	{r7}
20001bd8:	af00      	add	r7, sp, #0
// nothing to do, being reading always in polling mode
	return;
20001bda:	bf00      	nop
}
20001bdc:	46bd      	mov	sp, r7
20001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
20001be2:	4770      	bx	lr

20001be4 <DataReader_ReadData>:

void DataReader_ReadData(uint32_t address24, uint8_t* buffer, uint32_t length){
20001be4:	b580      	push	{r7, lr}
20001be6:	b084      	sub	sp, #16
20001be8:	af00      	add	r7, sp, #0
20001bea:	60f8      	str	r0, [r7, #12]
20001bec:	60b9      	str	r1, [r7, #8]
20001bee:	607a      	str	r2, [r7, #4]
	Flash_Read(address24, buffer, length);
20001bf0:	687a      	ldr	r2, [r7, #4]
20001bf2:	68b9      	ldr	r1, [r7, #8]
20001bf4:	68f8      	ldr	r0, [r7, #12]
20001bf6:	f7ff fd49 	bl	2000168c <Flash_Read>
}
20001bfa:	bf00      	nop
20001bfc:	3710      	adds	r7, #16
20001bfe:	46bd      	mov	sp, r7
20001c00:	bd80      	pop	{r7, pc}

20001c02 <DataReader_StartDMAReadData>:


void DataReader_StartDMAReadData(uint32_t address24, uint8_t* buffer, uint32_t length){
20001c02:	b580      	push	{r7, lr}
20001c04:	b084      	sub	sp, #16
20001c06:	af00      	add	r7, sp, #0
20001c08:	60f8      	str	r0, [r7, #12]
20001c0a:	60b9      	str	r1, [r7, #8]
20001c0c:	607a      	str	r2, [r7, #4]
//currently using polling mode even if requested DMA
	Flash_Read(address24, buffer, length);
20001c0e:	687a      	ldr	r2, [r7, #4]
20001c10:	68b9      	ldr	r1, [r7, #8]
20001c12:	68f8      	ldr	r0, [r7, #12]
20001c14:	f7ff fd3a 	bl	2000168c <Flash_Read>
}
20001c18:	bf00      	nop
20001c1a:	3710      	adds	r7, #16
20001c1c:	46bd      	mov	sp, r7
20001c1e:	bd80      	pop	{r7, pc}

20001c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
20001c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 20001c58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20001c24:	f7ff fc26 	bl	20001474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20001c28:	480c      	ldr	r0, [pc, #48]	@ (20001c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
20001c2a:	490d      	ldr	r1, [pc, #52]	@ (20001c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
20001c2c:	4a0d      	ldr	r2, [pc, #52]	@ (20001c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
20001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
20001c30:	e002      	b.n	20001c38 <LoopCopyDataInit>

20001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20001c36:	3304      	adds	r3, #4

20001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
20001c3c:	d3f9      	bcc.n	20001c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20001c3e:	4a0a      	ldr	r2, [pc, #40]	@ (20001c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
20001c40:	4c0a      	ldr	r4, [pc, #40]	@ (20001c6c <LoopFillZerobss+0x22>)
  movs r3, #0
20001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
20001c44:	e001      	b.n	20001c4a <LoopFillZerobss>

20001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20001c48:	3204      	adds	r2, #4

20001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
20001c4c:	d3fb      	bcc.n	20001c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
20001c4e:	f008 f9df 	bl	2000a010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20001c52:	f7ff f961 	bl	20000f18 <main>
  bx  lr    
20001c56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
20001c58:	20020004 	.word	0x20020004
  ldr r0, =_sdata
20001c5c:	200003a8 	.word	0x200003a8
  ldr r1, =_edata
20001c60:	20000418 	.word	0x20000418
  ldr r2, =_sidata
20001c64:	200003a8 	.word	0x200003a8
  ldr r2, =_sbss
20001c68:	20000418 	.word	0x20000418
  ldr r4, =_ebss
20001c6c:	20000608 	.word	0x20000608

20001c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20001c70:	e7fe      	b.n	20001c70 <ADC_IRQHandler>
	...

20001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20001c74:	b580      	push	{r7, lr}
20001c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001c78:	4b0e      	ldr	r3, [pc, #56]	@ (20001cb4 <HAL_Init+0x40>)
20001c7a:	681b      	ldr	r3, [r3, #0]
20001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (20001cb4 <HAL_Init+0x40>)
20001c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
20001c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
20001c84:	4b0b      	ldr	r3, [pc, #44]	@ (20001cb4 <HAL_Init+0x40>)
20001c86:	681b      	ldr	r3, [r3, #0]
20001c88:	4a0a      	ldr	r2, [pc, #40]	@ (20001cb4 <HAL_Init+0x40>)
20001c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
20001c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20001c90:	4b08      	ldr	r3, [pc, #32]	@ (20001cb4 <HAL_Init+0x40>)
20001c92:	681b      	ldr	r3, [r3, #0]
20001c94:	4a07      	ldr	r2, [pc, #28]	@ (20001cb4 <HAL_Init+0x40>)
20001c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20001c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001c9c:	2003      	movs	r0, #3
20001c9e:	f000 fbc3 	bl	20002428 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20001ca2:	200f      	movs	r0, #15
20001ca4:	f7fe feca 	bl	20000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20001ca8:	f7ff fa4c 	bl	20001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20001cac:	2300      	movs	r3, #0
}
20001cae:	4618      	mov	r0, r3
20001cb0:	bd80      	pop	{r7, pc}
20001cb2:	bf00      	nop
20001cb4:	40023c00 	.word	0x40023c00

20001cb8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
20001cb8:	b580      	push	{r7, lr}
20001cba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
20001cbc:	4b11      	ldr	r3, [pc, #68]	@ (20001d04 <HAL_DeInit+0x4c>)
20001cbe:	4a12      	ldr	r2, [pc, #72]	@ (20001d08 <HAL_DeInit+0x50>)
20001cc0:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
20001cc2:	4b10      	ldr	r3, [pc, #64]	@ (20001d04 <HAL_DeInit+0x4c>)
20001cc4:	2200      	movs	r2, #0
20001cc6:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
20001cc8:	4b0e      	ldr	r3, [pc, #56]	@ (20001d04 <HAL_DeInit+0x4c>)
20001cca:	4a10      	ldr	r2, [pc, #64]	@ (20001d0c <HAL_DeInit+0x54>)
20001ccc:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
20001cce:	4b0d      	ldr	r3, [pc, #52]	@ (20001d04 <HAL_DeInit+0x4c>)
20001cd0:	2200      	movs	r2, #0
20001cd2:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
20001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (20001d04 <HAL_DeInit+0x4c>)
20001cd6:	4a0e      	ldr	r2, [pc, #56]	@ (20001d10 <HAL_DeInit+0x58>)
20001cd8:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
20001cda:	4b0a      	ldr	r3, [pc, #40]	@ (20001d04 <HAL_DeInit+0x4c>)
20001cdc:	2200      	movs	r2, #0
20001cde:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
20001ce0:	4b08      	ldr	r3, [pc, #32]	@ (20001d04 <HAL_DeInit+0x4c>)
20001ce2:	2280      	movs	r2, #128	@ 0x80
20001ce4:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
20001ce6:	4b07      	ldr	r3, [pc, #28]	@ (20001d04 <HAL_DeInit+0x4c>)
20001ce8:	2200      	movs	r2, #0
20001cea:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
20001cec:	4b05      	ldr	r3, [pc, #20]	@ (20001d04 <HAL_DeInit+0x4c>)
20001cee:	f04f 32ff 	mov.w	r2, #4294967295
20001cf2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
20001cf4:	4b03      	ldr	r3, [pc, #12]	@ (20001d04 <HAL_DeInit+0x4c>)
20001cf6:	2200      	movs	r2, #0
20001cf8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
20001cfa:	f000 f812 	bl	20001d22 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
20001cfe:	2300      	movs	r3, #0
}
20001d00:	4618      	mov	r0, r3
20001d02:	bd80      	pop	{r7, pc}
20001d04:	40023800 	.word	0x40023800
20001d08:	10e2c80f 	.word	0x10e2c80f
20001d0c:	00177931 	.word	0x00177931
20001d10:	0060109f 	.word	0x0060109f
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
20001d14:	b480      	push	{r7}
20001d16:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
20001d18:	bf00      	nop
20001d1a:	46bd      	mov	sp, r7
20001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d20:	4770      	bx	lr

20001d22 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
20001d22:	b480      	push	{r7}
20001d24:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
20001d26:	bf00      	nop
20001d28:	46bd      	mov	sp, r7
20001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d2e:	4770      	bx	lr
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20001d30:	b580      	push	{r7, lr}
20001d32:	b082      	sub	sp, #8
20001d34:	af00      	add	r7, sp, #0
20001d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20001d38:	4b12      	ldr	r3, [pc, #72]	@ (20001d84 <HAL_MspDeInit+0x62>)
20001d3a:	681a      	ldr	r2, [r3, #0]
20001d3c:	4b12      	ldr	r3, [pc, #72]	@ (20001d88 <HAL_MspDeInit+0x66>)
20001d3e:	781b      	ldrb	r3, [r3, #0]
20001d40:	4619      	mov	r1, r3
20001d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
20001d46:	fbb3 f3f1 	udiv	r3, r3, r1
20001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
20001d4e:	4618      	mov	r0, r3
20001d50:	f000 fbb1 	bl	200024b6 <HAL_SYSTICK_Config>
20001d54:	4603      	mov	r3, r0
20001d56:	2b00      	cmp	r3, #0
20001d58:	d001      	beq.n	20001d5e <HAL_MspDeInit+0x3c>
  {
    return HAL_ERROR;
20001d5a:	2301      	movs	r3, #1
20001d5c:	e00e      	b.n	20001d7c <HAL_MspDeInit+0x5a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20001d5e:	687b      	ldr	r3, [r7, #4]
20001d60:	2b0f      	cmp	r3, #15
20001d62:	d80a      	bhi.n	20001d7a <HAL_MspDeInit+0x58>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20001d64:	2200      	movs	r2, #0
20001d66:	6879      	ldr	r1, [r7, #4]
20001d68:	f04f 30ff 	mov.w	r0, #4294967295
20001d6c:	f000 fb67 	bl	2000243e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20001d70:	4a06      	ldr	r2, [pc, #24]	@ (20001d8c <HAL_MspDeInit+0x6a>)
20001d72:	687b      	ldr	r3, [r7, #4]
20001d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20001d76:	2300      	movs	r3, #0
20001d78:	e000      	b.n	20001d7c <HAL_MspDeInit+0x5a>
    return HAL_ERROR;
20001d7a:	2301      	movs	r3, #1
}
20001d7c:	4618      	mov	r0, r3
20001d7e:	3708      	adds	r7, #8
20001d80:	46bd      	mov	sp, r7
20001d82:	bd80      	pop	{r7, pc}
20001d84:	200003b0 	.word	0x200003b0
20001d88:	200003b8 	.word	0x200003b8
20001d8c:	200003b4 	.word	0x200003b4

20001d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20001d90:	b480      	push	{r7}
20001d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20001d94:	4b06      	ldr	r3, [pc, #24]	@ (20001db0 <HAL_IncTick+0x20>)
20001d96:	781b      	ldrb	r3, [r3, #0]
20001d98:	461a      	mov	r2, r3
20001d9a:	4b06      	ldr	r3, [pc, #24]	@ (20001db4 <HAL_IncTick+0x24>)
20001d9c:	681b      	ldr	r3, [r3, #0]
20001d9e:	4413      	add	r3, r2
20001da0:	4a04      	ldr	r2, [pc, #16]	@ (20001db4 <HAL_IncTick+0x24>)
20001da2:	6013      	str	r3, [r2, #0]
}
20001da4:	bf00      	nop
20001da6:	46bd      	mov	sp, r7
20001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
20001dac:	4770      	bx	lr
20001dae:	bf00      	nop
20001db0:	200003b8 	.word	0x200003b8
20001db4:	20000494 	.word	0x20000494
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20001db8:	b480      	push	{r7}
20001dba:	af00      	add	r7, sp, #0
  return uwTick;
20001dbc:	4b03      	ldr	r3, [pc, #12]	@ (20001dcc <HAL_IncTick+0x3c>)
20001dbe:	681b      	ldr	r3, [r3, #0]
}
20001dc0:	4618      	mov	r0, r3
20001dc2:	46bd      	mov	sp, r7
20001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001dc8:	4770      	bx	lr
20001dca:	bf00      	nop
20001dcc:	20000494 	.word	0x20000494

20001dd0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
20001dd0:	b480      	push	{r7}
20001dd2:	af00      	add	r7, sp, #0
  return uwTickPrio;
20001dd4:	4b03      	ldr	r3, [pc, #12]	@ (20001de4 <HAL_GetTickPrio+0x14>)
20001dd6:	681b      	ldr	r3, [r3, #0]
}
20001dd8:	4618      	mov	r0, r3
20001dda:	46bd      	mov	sp, r7
20001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001de0:	4770      	bx	lr
20001de2:	bf00      	nop
20001de4:	200003b4 	.word	0x200003b4

20001de8 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
20001de8:	b580      	push	{r7, lr}
20001dea:	b084      	sub	sp, #16
20001dec:	af00      	add	r7, sp, #0
20001dee:	4603      	mov	r3, r0
20001df0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
20001df2:	2300      	movs	r3, #0
20001df4:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
20001df6:	4b0e      	ldr	r3, [pc, #56]	@ (20001e30 <HAL_SetTickFreq+0x48>)
20001df8:	781b      	ldrb	r3, [r3, #0]
20001dfa:	79fa      	ldrb	r2, [r7, #7]
20001dfc:	429a      	cmp	r2, r3
20001dfe:	d012      	beq.n	20001e26 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
20001e00:	4b0b      	ldr	r3, [pc, #44]	@ (20001e30 <HAL_SetTickFreq+0x48>)
20001e02:	781b      	ldrb	r3, [r3, #0]
20001e04:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
20001e06:	4a0a      	ldr	r2, [pc, #40]	@ (20001e30 <HAL_SetTickFreq+0x48>)
20001e08:	79fb      	ldrb	r3, [r7, #7]
20001e0a:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
20001e0c:	4b09      	ldr	r3, [pc, #36]	@ (20001e34 <HAL_SetTickFreq+0x4c>)
20001e0e:	681b      	ldr	r3, [r3, #0]
20001e10:	4618      	mov	r0, r3
20001e12:	f7fe fe13 	bl	20000a3c <HAL_InitTick>
20001e16:	4603      	mov	r3, r0
20001e18:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
20001e1a:	7bfb      	ldrb	r3, [r7, #15]
20001e1c:	2b00      	cmp	r3, #0
20001e1e:	d002      	beq.n	20001e26 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
20001e20:	4a03      	ldr	r2, [pc, #12]	@ (20001e30 <HAL_SetTickFreq+0x48>)
20001e22:	7bbb      	ldrb	r3, [r7, #14]
20001e24:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
20001e26:	7bfb      	ldrb	r3, [r7, #15]
}
20001e28:	4618      	mov	r0, r3
20001e2a:	3710      	adds	r7, #16
20001e2c:	46bd      	mov	sp, r7
20001e2e:	bd80      	pop	{r7, pc}
20001e30:	200003b8 	.word	0x200003b8
20001e34:	200003b4 	.word	0x200003b4

20001e38 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
20001e38:	b480      	push	{r7}
20001e3a:	af00      	add	r7, sp, #0
  return uwTickFreq;
20001e3c:	4b03      	ldr	r3, [pc, #12]	@ (20001e4c <HAL_GetTickFreq+0x14>)
20001e3e:	781b      	ldrb	r3, [r3, #0]
}
20001e40:	4618      	mov	r0, r3
20001e42:	46bd      	mov	sp, r7
20001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e48:	4770      	bx	lr
20001e4a:	bf00      	nop
20001e4c:	200003b8 	.word	0x200003b8
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20001e50:	b580      	push	{r7, lr}
20001e52:	b084      	sub	sp, #16
20001e54:	af00      	add	r7, sp, #0
20001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20001e58:	f7fe fddd 	bl	20000a16 <HAL_GetTick>
20001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20001e5e:	687b      	ldr	r3, [r7, #4]
20001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20001e62:	68fb      	ldr	r3, [r7, #12]
20001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
20001e68:	d005      	beq.n	20001e76 <HAL_GetTickFreq+0x3e>
  {
    wait += (uint32_t)(uwTickFreq);
20001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (20001e94 <HAL_GetTickFreq+0x5c>)
20001e6c:	781b      	ldrb	r3, [r3, #0]
20001e6e:	461a      	mov	r2, r3
20001e70:	68fb      	ldr	r3, [r7, #12]
20001e72:	4413      	add	r3, r2
20001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
20001e76:	bf00      	nop
20001e78:	f7fe fdcd 	bl	20000a16 <HAL_GetTick>
20001e7c:	4602      	mov	r2, r0
20001e7e:	68bb      	ldr	r3, [r7, #8]
20001e80:	1ad3      	subs	r3, r2, r3
20001e82:	68fa      	ldr	r2, [r7, #12]
20001e84:	429a      	cmp	r2, r3
20001e86:	d8f7      	bhi.n	20001e78 <HAL_GetTickFreq+0x40>
  {
  }
}
20001e88:	bf00      	nop
20001e8a:	bf00      	nop
20001e8c:	3710      	adds	r7, #16
20001e8e:	46bd      	mov	sp, r7
20001e90:	bd80      	pop	{r7, pc}
20001e92:	bf00      	nop
20001e94:	200003b8 	.word	0x200003b8

20001e98 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
20001e98:	b480      	push	{r7}
20001e9a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
20001e9c:	4b05      	ldr	r3, [pc, #20]	@ (20001eb4 <HAL_SuspendTick+0x1c>)
20001e9e:	681b      	ldr	r3, [r3, #0]
20001ea0:	4a04      	ldr	r2, [pc, #16]	@ (20001eb4 <HAL_SuspendTick+0x1c>)
20001ea2:	f023 0302 	bic.w	r3, r3, #2
20001ea6:	6013      	str	r3, [r2, #0]
}
20001ea8:	bf00      	nop
20001eaa:	46bd      	mov	sp, r7
20001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
20001eb0:	4770      	bx	lr
20001eb2:	bf00      	nop
20001eb4:	e000e010 	.word	0xe000e010

20001eb8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
20001eb8:	b480      	push	{r7}
20001eba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
20001ebc:	4b05      	ldr	r3, [pc, #20]	@ (20001ed4 <HAL_ResumeTick+0x1c>)
20001ebe:	681b      	ldr	r3, [r3, #0]
20001ec0:	4a04      	ldr	r2, [pc, #16]	@ (20001ed4 <HAL_ResumeTick+0x1c>)
20001ec2:	f043 0302 	orr.w	r3, r3, #2
20001ec6:	6013      	str	r3, [r2, #0]
}
20001ec8:	bf00      	nop
20001eca:	46bd      	mov	sp, r7
20001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ed0:	4770      	bx	lr
20001ed2:	bf00      	nop
20001ed4:	e000e010 	.word	0xe000e010

20001ed8 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
20001ed8:	b480      	push	{r7}
20001eda:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
20001edc:	4b02      	ldr	r3, [pc, #8]	@ (20001ee8 <HAL_GetHalVersion+0x10>)
}
20001ede:	4618      	mov	r0, r3
20001ee0:	46bd      	mov	sp, r7
20001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ee6:	4770      	bx	lr
20001ee8:	01080300 	.word	0x01080300

20001eec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
20001eec:	b480      	push	{r7}
20001eee:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
20001ef0:	4b03      	ldr	r3, [pc, #12]	@ (20001f00 <HAL_GetREVID+0x14>)
20001ef2:	681b      	ldr	r3, [r3, #0]
20001ef4:	0c1b      	lsrs	r3, r3, #16
}
20001ef6:	4618      	mov	r0, r3
20001ef8:	46bd      	mov	sp, r7
20001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
20001efe:	4770      	bx	lr
20001f00:	e0042000 	.word	0xe0042000

20001f04 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
20001f04:	b480      	push	{r7}
20001f06:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
20001f08:	4b04      	ldr	r3, [pc, #16]	@ (20001f1c <HAL_GetDEVID+0x18>)
20001f0a:	681b      	ldr	r3, [r3, #0]
20001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
20001f10:	4618      	mov	r0, r3
20001f12:	46bd      	mov	sp, r7
20001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f18:	4770      	bx	lr
20001f1a:	bf00      	nop
20001f1c:	e0042000 	.word	0xe0042000

20001f20 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
20001f20:	b480      	push	{r7}
20001f22:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001f24:	4b05      	ldr	r3, [pc, #20]	@ (20001f3c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20001f26:	685b      	ldr	r3, [r3, #4]
20001f28:	4a04      	ldr	r2, [pc, #16]	@ (20001f3c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20001f2a:	f043 0301 	orr.w	r3, r3, #1
20001f2e:	6053      	str	r3, [r2, #4]
}
20001f30:	bf00      	nop
20001f32:	46bd      	mov	sp, r7
20001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f38:	4770      	bx	lr
20001f3a:	bf00      	nop
20001f3c:	e0042000 	.word	0xe0042000

20001f40 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
20001f40:	b480      	push	{r7}
20001f42:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001f44:	4b05      	ldr	r3, [pc, #20]	@ (20001f5c <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20001f46:	685b      	ldr	r3, [r3, #4]
20001f48:	4a04      	ldr	r2, [pc, #16]	@ (20001f5c <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20001f4a:	f023 0301 	bic.w	r3, r3, #1
20001f4e:	6053      	str	r3, [r2, #4]
}
20001f50:	bf00      	nop
20001f52:	46bd      	mov	sp, r7
20001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f58:	4770      	bx	lr
20001f5a:	bf00      	nop
20001f5c:	e0042000 	.word	0xe0042000

20001f60 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
20001f60:	b480      	push	{r7}
20001f62:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20001f64:	4b05      	ldr	r3, [pc, #20]	@ (20001f7c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20001f66:	685b      	ldr	r3, [r3, #4]
20001f68:	4a04      	ldr	r2, [pc, #16]	@ (20001f7c <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20001f6a:	f043 0302 	orr.w	r3, r3, #2
20001f6e:	6053      	str	r3, [r2, #4]
}
20001f70:	bf00      	nop
20001f72:	46bd      	mov	sp, r7
20001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f78:	4770      	bx	lr
20001f7a:	bf00      	nop
20001f7c:	e0042000 	.word	0xe0042000

20001f80 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
20001f80:	b480      	push	{r7}
20001f82:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20001f84:	4b05      	ldr	r3, [pc, #20]	@ (20001f9c <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20001f86:	685b      	ldr	r3, [r3, #4]
20001f88:	4a04      	ldr	r2, [pc, #16]	@ (20001f9c <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20001f8a:	f023 0302 	bic.w	r3, r3, #2
20001f8e:	6053      	str	r3, [r2, #4]
}
20001f90:	bf00      	nop
20001f92:	46bd      	mov	sp, r7
20001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f98:	4770      	bx	lr
20001f9a:	bf00      	nop
20001f9c:	e0042000 	.word	0xe0042000

20001fa0 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
20001fa0:	b480      	push	{r7}
20001fa2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20001fa4:	4b05      	ldr	r3, [pc, #20]	@ (20001fbc <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20001fa6:	685b      	ldr	r3, [r3, #4]
20001fa8:	4a04      	ldr	r2, [pc, #16]	@ (20001fbc <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20001faa:	f043 0304 	orr.w	r3, r3, #4
20001fae:	6053      	str	r3, [r2, #4]
}
20001fb0:	bf00      	nop
20001fb2:	46bd      	mov	sp, r7
20001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001fb8:	4770      	bx	lr
20001fba:	bf00      	nop
20001fbc:	e0042000 	.word	0xe0042000

20001fc0 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
20001fc0:	b480      	push	{r7}
20001fc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20001fc4:	4b05      	ldr	r3, [pc, #20]	@ (20001fdc <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20001fc6:	685b      	ldr	r3, [r3, #4]
20001fc8:	4a04      	ldr	r2, [pc, #16]	@ (20001fdc <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20001fca:	f023 0304 	bic.w	r3, r3, #4
20001fce:	6053      	str	r3, [r2, #4]
}
20001fd0:	bf00      	nop
20001fd2:	46bd      	mov	sp, r7
20001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001fd8:	4770      	bx	lr
20001fda:	bf00      	nop
20001fdc:	e0042000 	.word	0xe0042000

20001fe0 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
20001fe0:	b480      	push	{r7}
20001fe2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
20001fe4:	4b03      	ldr	r3, [pc, #12]	@ (20001ff4 <HAL_EnableCompensationCell+0x14>)
20001fe6:	2201      	movs	r2, #1
20001fe8:	601a      	str	r2, [r3, #0]
}
20001fea:	bf00      	nop
20001fec:	46bd      	mov	sp, r7
20001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ff2:	4770      	bx	lr
20001ff4:	42270400 	.word	0x42270400

20001ff8 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
20001ff8:	b480      	push	{r7}
20001ffa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
20001ffc:	4b03      	ldr	r3, [pc, #12]	@ (2000200c <HAL_DisableCompensationCell+0x14>)
20001ffe:	2200      	movs	r2, #0
20002000:	601a      	str	r2, [r3, #0]
}
20002002:	bf00      	nop
20002004:	46bd      	mov	sp, r7
20002006:	f85d 7b04 	ldr.w	r7, [sp], #4
2000200a:	4770      	bx	lr
2000200c:	42270400 	.word	0x42270400

20002010 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
20002010:	b480      	push	{r7}
20002012:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
20002014:	4b03      	ldr	r3, [pc, #12]	@ (20002024 <HAL_GetUIDw0+0x14>)
20002016:	681b      	ldr	r3, [r3, #0]
}
20002018:	4618      	mov	r0, r3
2000201a:	46bd      	mov	sp, r7
2000201c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002020:	4770      	bx	lr
20002022:	bf00      	nop
20002024:	1fff7a10 	.word	0x1fff7a10

20002028 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
20002028:	b480      	push	{r7}
2000202a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
2000202c:	4b03      	ldr	r3, [pc, #12]	@ (2000203c <HAL_GetUIDw1+0x14>)
2000202e:	681b      	ldr	r3, [r3, #0]
}
20002030:	4618      	mov	r0, r3
20002032:	46bd      	mov	sp, r7
20002034:	f85d 7b04 	ldr.w	r7, [sp], #4
20002038:	4770      	bx	lr
2000203a:	bf00      	nop
2000203c:	1fff7a14 	.word	0x1fff7a14

20002040 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
20002040:	b480      	push	{r7}
20002042:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
20002044:	4b03      	ldr	r3, [pc, #12]	@ (20002054 <HAL_GetUIDw2+0x14>)
20002046:	681b      	ldr	r3, [r3, #0]
}
20002048:	4618      	mov	r0, r3
2000204a:	46bd      	mov	sp, r7
2000204c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002050:	4770      	bx	lr
20002052:	bf00      	nop
20002054:	1fff7a18 	.word	0x1fff7a18

20002058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20002058:	b480      	push	{r7}
2000205a:	b085      	sub	sp, #20
2000205c:	af00      	add	r7, sp, #0
2000205e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20002060:	687b      	ldr	r3, [r7, #4]
20002062:	f003 0307 	and.w	r3, r3, #7
20002066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20002068:	4b0c      	ldr	r3, [pc, #48]	@ (2000209c <__NVIC_SetPriorityGrouping+0x44>)
2000206a:	68db      	ldr	r3, [r3, #12]
2000206c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000206e:	68ba      	ldr	r2, [r7, #8]
20002070:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
20002074:	4013      	ands	r3, r2
20002076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20002078:	68fb      	ldr	r3, [r7, #12]
2000207a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000207c:	68bb      	ldr	r3, [r7, #8]
2000207e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20002080:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
20002084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20002088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000208a:	4a04      	ldr	r2, [pc, #16]	@ (2000209c <__NVIC_SetPriorityGrouping+0x44>)
2000208c:	68bb      	ldr	r3, [r7, #8]
2000208e:	60d3      	str	r3, [r2, #12]
}
20002090:	bf00      	nop
20002092:	3714      	adds	r7, #20
20002094:	46bd      	mov	sp, r7
20002096:	f85d 7b04 	ldr.w	r7, [sp], #4
2000209a:	4770      	bx	lr
2000209c:	e000ed00 	.word	0xe000ed00

200020a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
200020a0:	b480      	push	{r7}
200020a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200020a4:	4b04      	ldr	r3, [pc, #16]	@ (200020b8 <__NVIC_GetPriorityGrouping+0x18>)
200020a6:	68db      	ldr	r3, [r3, #12]
200020a8:	0a1b      	lsrs	r3, r3, #8
200020aa:	f003 0307 	and.w	r3, r3, #7
}
200020ae:	4618      	mov	r0, r3
200020b0:	46bd      	mov	sp, r7
200020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200020b6:	4770      	bx	lr
200020b8:	e000ed00 	.word	0xe000ed00

200020bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
200020bc:	b480      	push	{r7}
200020be:	b083      	sub	sp, #12
200020c0:	af00      	add	r7, sp, #0
200020c2:	4603      	mov	r3, r0
200020c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
200020ca:	2b00      	cmp	r3, #0
200020cc:	db0b      	blt.n	200020e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200020ce:	79fb      	ldrb	r3, [r7, #7]
200020d0:	f003 021f 	and.w	r2, r3, #31
200020d4:	4907      	ldr	r1, [pc, #28]	@ (200020f4 <__NVIC_EnableIRQ+0x38>)
200020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
200020da:	095b      	lsrs	r3, r3, #5
200020dc:	2001      	movs	r0, #1
200020de:	fa00 f202 	lsl.w	r2, r0, r2
200020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
200020e6:	bf00      	nop
200020e8:	370c      	adds	r7, #12
200020ea:	46bd      	mov	sp, r7
200020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200020f0:	4770      	bx	lr
200020f2:	bf00      	nop
200020f4:	e000e100 	.word	0xe000e100

200020f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
200020f8:	b480      	push	{r7}
200020fa:	b083      	sub	sp, #12
200020fc:	af00      	add	r7, sp, #0
200020fe:	4603      	mov	r3, r0
20002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002106:	2b00      	cmp	r3, #0
20002108:	db12      	blt.n	20002130 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000210a:	79fb      	ldrb	r3, [r7, #7]
2000210c:	f003 021f 	and.w	r2, r3, #31
20002110:	490a      	ldr	r1, [pc, #40]	@ (2000213c <__NVIC_DisableIRQ+0x44>)
20002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002116:	095b      	lsrs	r3, r3, #5
20002118:	2001      	movs	r0, #1
2000211a:	fa00 f202 	lsl.w	r2, r0, r2
2000211e:	3320      	adds	r3, #32
20002120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
20002124:	f3bf 8f4f 	dsb	sy
}
20002128:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
2000212a:	f3bf 8f6f 	isb	sy
}
2000212e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
20002130:	bf00      	nop
20002132:	370c      	adds	r7, #12
20002134:	46bd      	mov	sp, r7
20002136:	f85d 7b04 	ldr.w	r7, [sp], #4
2000213a:	4770      	bx	lr
2000213c:	e000e100 	.word	0xe000e100

20002140 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
20002140:	b480      	push	{r7}
20002142:	b083      	sub	sp, #12
20002144:	af00      	add	r7, sp, #0
20002146:	4603      	mov	r3, r0
20002148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000214e:	2b00      	cmp	r3, #0
20002150:	db0e      	blt.n	20002170 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
20002152:	4a0b      	ldr	r2, [pc, #44]	@ (20002180 <__NVIC_GetPendingIRQ+0x40>)
20002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002158:	095b      	lsrs	r3, r3, #5
2000215a:	3340      	adds	r3, #64	@ 0x40
2000215c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
20002160:	79fb      	ldrb	r3, [r7, #7]
20002162:	f003 031f 	and.w	r3, r3, #31
20002166:	fa22 f303 	lsr.w	r3, r2, r3
2000216a:	f003 0301 	and.w	r3, r3, #1
2000216e:	e000      	b.n	20002172 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
20002170:	2300      	movs	r3, #0
  }
}
20002172:	4618      	mov	r0, r3
20002174:	370c      	adds	r7, #12
20002176:	46bd      	mov	sp, r7
20002178:	f85d 7b04 	ldr.w	r7, [sp], #4
2000217c:	4770      	bx	lr
2000217e:	bf00      	nop
20002180:	e000e100 	.word	0xe000e100

20002184 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
20002184:	b480      	push	{r7}
20002186:	b083      	sub	sp, #12
20002188:	af00      	add	r7, sp, #0
2000218a:	4603      	mov	r3, r0
2000218c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002192:	2b00      	cmp	r3, #0
20002194:	db0c      	blt.n	200021b0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20002196:	79fb      	ldrb	r3, [r7, #7]
20002198:	f003 021f 	and.w	r2, r3, #31
2000219c:	4907      	ldr	r1, [pc, #28]	@ (200021bc <__NVIC_SetPendingIRQ+0x38>)
2000219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021a2:	095b      	lsrs	r3, r3, #5
200021a4:	2001      	movs	r0, #1
200021a6:	fa00 f202 	lsl.w	r2, r0, r2
200021aa:	3340      	adds	r3, #64	@ 0x40
200021ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
200021b0:	bf00      	nop
200021b2:	370c      	adds	r7, #12
200021b4:	46bd      	mov	sp, r7
200021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200021ba:	4770      	bx	lr
200021bc:	e000e100 	.word	0xe000e100

200021c0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200021c0:	b480      	push	{r7}
200021c2:	b083      	sub	sp, #12
200021c4:	af00      	add	r7, sp, #0
200021c6:	4603      	mov	r3, r0
200021c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021ce:	2b00      	cmp	r3, #0
200021d0:	db0c      	blt.n	200021ec <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200021d2:	79fb      	ldrb	r3, [r7, #7]
200021d4:	f003 021f 	and.w	r2, r3, #31
200021d8:	4907      	ldr	r1, [pc, #28]	@ (200021f8 <__NVIC_ClearPendingIRQ+0x38>)
200021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021de:	095b      	lsrs	r3, r3, #5
200021e0:	2001      	movs	r0, #1
200021e2:	fa00 f202 	lsl.w	r2, r0, r2
200021e6:	3360      	adds	r3, #96	@ 0x60
200021e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
200021ec:	bf00      	nop
200021ee:	370c      	adds	r7, #12
200021f0:	46bd      	mov	sp, r7
200021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
200021f6:	4770      	bx	lr
200021f8:	e000e100 	.word	0xe000e100

200021fc <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
200021fc:	b480      	push	{r7}
200021fe:	b083      	sub	sp, #12
20002200:	af00      	add	r7, sp, #0
20002202:	4603      	mov	r3, r0
20002204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000220a:	2b00      	cmp	r3, #0
2000220c:	db0e      	blt.n	2000222c <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
2000220e:	4a0b      	ldr	r2, [pc, #44]	@ (2000223c <__NVIC_GetActive+0x40>)
20002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002214:	095b      	lsrs	r3, r3, #5
20002216:	3380      	adds	r3, #128	@ 0x80
20002218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
2000221c:	79fb      	ldrb	r3, [r7, #7]
2000221e:	f003 031f 	and.w	r3, r3, #31
20002222:	fa22 f303 	lsr.w	r3, r2, r3
20002226:	f003 0301 	and.w	r3, r3, #1
2000222a:	e000      	b.n	2000222e <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
2000222c:	2300      	movs	r3, #0
  }
}
2000222e:	4618      	mov	r0, r3
20002230:	370c      	adds	r7, #12
20002232:	46bd      	mov	sp, r7
20002234:	f85d 7b04 	ldr.w	r7, [sp], #4
20002238:	4770      	bx	lr
2000223a:	bf00      	nop
2000223c:	e000e100 	.word	0xe000e100

20002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20002240:	b480      	push	{r7}
20002242:	b083      	sub	sp, #12
20002244:	af00      	add	r7, sp, #0
20002246:	4603      	mov	r3, r0
20002248:	6039      	str	r1, [r7, #0]
2000224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002250:	2b00      	cmp	r3, #0
20002252:	db0a      	blt.n	2000226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20002254:	683b      	ldr	r3, [r7, #0]
20002256:	b2da      	uxtb	r2, r3
20002258:	490c      	ldr	r1, [pc, #48]	@ (2000228c <__NVIC_SetPriority+0x4c>)
2000225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000225e:	0112      	lsls	r2, r2, #4
20002260:	b2d2      	uxtb	r2, r2
20002262:	440b      	add	r3, r1
20002264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20002268:	e00a      	b.n	20002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000226a:	683b      	ldr	r3, [r7, #0]
2000226c:	b2da      	uxtb	r2, r3
2000226e:	4908      	ldr	r1, [pc, #32]	@ (20002290 <__NVIC_SetPriority+0x50>)
20002270:	79fb      	ldrb	r3, [r7, #7]
20002272:	f003 030f 	and.w	r3, r3, #15
20002276:	3b04      	subs	r3, #4
20002278:	0112      	lsls	r2, r2, #4
2000227a:	b2d2      	uxtb	r2, r2
2000227c:	440b      	add	r3, r1
2000227e:	761a      	strb	r2, [r3, #24]
}
20002280:	bf00      	nop
20002282:	370c      	adds	r7, #12
20002284:	46bd      	mov	sp, r7
20002286:	f85d 7b04 	ldr.w	r7, [sp], #4
2000228a:	4770      	bx	lr
2000228c:	e000e100 	.word	0xe000e100
20002290:	e000ed00 	.word	0xe000ed00

20002294 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
20002294:	b480      	push	{r7}
20002296:	b083      	sub	sp, #12
20002298:	af00      	add	r7, sp, #0
2000229a:	4603      	mov	r3, r0
2000229c:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
2000229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
200022a2:	2b00      	cmp	r3, #0
200022a4:	db09      	blt.n	200022ba <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
200022a6:	4a0d      	ldr	r2, [pc, #52]	@ (200022dc <__NVIC_GetPriority+0x48>)
200022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
200022ac:	4413      	add	r3, r2
200022ae:	f893 3300 	ldrb.w	r3, [r3, #768]	@ 0x300
200022b2:	b2db      	uxtb	r3, r3
200022b4:	091b      	lsrs	r3, r3, #4
200022b6:	b2db      	uxtb	r3, r3
200022b8:	e009      	b.n	200022ce <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
200022ba:	4a09      	ldr	r2, [pc, #36]	@ (200022e0 <__NVIC_GetPriority+0x4c>)
200022bc:	79fb      	ldrb	r3, [r7, #7]
200022be:	f003 030f 	and.w	r3, r3, #15
200022c2:	3b04      	subs	r3, #4
200022c4:	4413      	add	r3, r2
200022c6:	7e1b      	ldrb	r3, [r3, #24]
200022c8:	b2db      	uxtb	r3, r3
200022ca:	091b      	lsrs	r3, r3, #4
200022cc:	b2db      	uxtb	r3, r3
  }
}
200022ce:	4618      	mov	r0, r3
200022d0:	370c      	adds	r7, #12
200022d2:	46bd      	mov	sp, r7
200022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200022d8:	4770      	bx	lr
200022da:	bf00      	nop
200022dc:	e000e100 	.word	0xe000e100
200022e0:	e000ed00 	.word	0xe000ed00

200022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
200022e4:	b480      	push	{r7}
200022e6:	b089      	sub	sp, #36	@ 0x24
200022e8:	af00      	add	r7, sp, #0
200022ea:	60f8      	str	r0, [r7, #12]
200022ec:	60b9      	str	r1, [r7, #8]
200022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
200022f0:	68fb      	ldr	r3, [r7, #12]
200022f2:	f003 0307 	and.w	r3, r3, #7
200022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200022f8:	69fb      	ldr	r3, [r7, #28]
200022fa:	f1c3 0307 	rsb	r3, r3, #7
200022fe:	2b04      	cmp	r3, #4
20002300:	bf28      	it	cs
20002302:	2304      	movcs	r3, #4
20002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20002306:	69fb      	ldr	r3, [r7, #28]
20002308:	3304      	adds	r3, #4
2000230a:	2b06      	cmp	r3, #6
2000230c:	d902      	bls.n	20002314 <NVIC_EncodePriority+0x30>
2000230e:	69fb      	ldr	r3, [r7, #28]
20002310:	3b03      	subs	r3, #3
20002312:	e000      	b.n	20002316 <NVIC_EncodePriority+0x32>
20002314:	2300      	movs	r3, #0
20002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20002318:	f04f 32ff 	mov.w	r2, #4294967295
2000231c:	69bb      	ldr	r3, [r7, #24]
2000231e:	fa02 f303 	lsl.w	r3, r2, r3
20002322:	43da      	mvns	r2, r3
20002324:	68bb      	ldr	r3, [r7, #8]
20002326:	401a      	ands	r2, r3
20002328:	697b      	ldr	r3, [r7, #20]
2000232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000232c:	f04f 31ff 	mov.w	r1, #4294967295
20002330:	697b      	ldr	r3, [r7, #20]
20002332:	fa01 f303 	lsl.w	r3, r1, r3
20002336:	43d9      	mvns	r1, r3
20002338:	687b      	ldr	r3, [r7, #4]
2000233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000233c:	4313      	orrs	r3, r2
         );
}
2000233e:	4618      	mov	r0, r3
20002340:	3724      	adds	r7, #36	@ 0x24
20002342:	46bd      	mov	sp, r7
20002344:	f85d 7b04 	ldr.w	r7, [sp], #4
20002348:	4770      	bx	lr

2000234a <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
2000234a:	b480      	push	{r7}
2000234c:	b089      	sub	sp, #36	@ 0x24
2000234e:	af00      	add	r7, sp, #0
20002350:	60f8      	str	r0, [r7, #12]
20002352:	60b9      	str	r1, [r7, #8]
20002354:	607a      	str	r2, [r7, #4]
20002356:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20002358:	68bb      	ldr	r3, [r7, #8]
2000235a:	f003 0307 	and.w	r3, r3, #7
2000235e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20002360:	69fb      	ldr	r3, [r7, #28]
20002362:	f1c3 0307 	rsb	r3, r3, #7
20002366:	2b04      	cmp	r3, #4
20002368:	bf28      	it	cs
2000236a:	2304      	movcs	r3, #4
2000236c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000236e:	69fb      	ldr	r3, [r7, #28]
20002370:	3304      	adds	r3, #4
20002372:	2b06      	cmp	r3, #6
20002374:	d902      	bls.n	2000237c <NVIC_DecodePriority+0x32>
20002376:	69fb      	ldr	r3, [r7, #28]
20002378:	3b03      	subs	r3, #3
2000237a:	e000      	b.n	2000237e <NVIC_DecodePriority+0x34>
2000237c:	2300      	movs	r3, #0
2000237e:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
20002380:	68fa      	ldr	r2, [r7, #12]
20002382:	697b      	ldr	r3, [r7, #20]
20002384:	40da      	lsrs	r2, r3
20002386:	f04f 31ff 	mov.w	r1, #4294967295
2000238a:	69bb      	ldr	r3, [r7, #24]
2000238c:	fa01 f303 	lsl.w	r3, r1, r3
20002390:	43db      	mvns	r3, r3
20002392:	401a      	ands	r2, r3
20002394:	687b      	ldr	r3, [r7, #4]
20002396:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
20002398:	f04f 32ff 	mov.w	r2, #4294967295
2000239c:	697b      	ldr	r3, [r7, #20]
2000239e:	fa02 f303 	lsl.w	r3, r2, r3
200023a2:	43da      	mvns	r2, r3
200023a4:	68fb      	ldr	r3, [r7, #12]
200023a6:	401a      	ands	r2, r3
200023a8:	683b      	ldr	r3, [r7, #0]
200023aa:	601a      	str	r2, [r3, #0]
}
200023ac:	bf00      	nop
200023ae:	3724      	adds	r7, #36	@ 0x24
200023b0:	46bd      	mov	sp, r7
200023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200023b6:	4770      	bx	lr

200023b8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
200023b8:	b480      	push	{r7}
200023ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
200023bc:	f3bf 8f4f 	dsb	sy
}
200023c0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
200023c2:	4b06      	ldr	r3, [pc, #24]	@ (200023dc <__NVIC_SystemReset+0x24>)
200023c4:	68db      	ldr	r3, [r3, #12]
200023c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
200023ca:	4904      	ldr	r1, [pc, #16]	@ (200023dc <__NVIC_SystemReset+0x24>)
200023cc:	4b04      	ldr	r3, [pc, #16]	@ (200023e0 <__NVIC_SystemReset+0x28>)
200023ce:	4313      	orrs	r3, r2
200023d0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
200023d2:	f3bf 8f4f 	dsb	sy
}
200023d6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
200023d8:	bf00      	nop
200023da:	e7fd      	b.n	200023d8 <__NVIC_SystemReset+0x20>
200023dc:	e000ed00 	.word	0xe000ed00
200023e0:	05fa0004 	.word	0x05fa0004

200023e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
200023e4:	b580      	push	{r7, lr}
200023e6:	b082      	sub	sp, #8
200023e8:	af00      	add	r7, sp, #0
200023ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
200023ec:	687b      	ldr	r3, [r7, #4]
200023ee:	3b01      	subs	r3, #1
200023f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
200023f4:	d301      	bcc.n	200023fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
200023f6:	2301      	movs	r3, #1
200023f8:	e00f      	b.n	2000241a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200023fa:	4a0a      	ldr	r2, [pc, #40]	@ (20002424 <SysTick_Config+0x40>)
200023fc:	687b      	ldr	r3, [r7, #4]
200023fe:	3b01      	subs	r3, #1
20002400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20002402:	210f      	movs	r1, #15
20002404:	f04f 30ff 	mov.w	r0, #4294967295
20002408:	f7ff ff1a 	bl	20002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000240c:	4b05      	ldr	r3, [pc, #20]	@ (20002424 <SysTick_Config+0x40>)
2000240e:	2200      	movs	r2, #0
20002410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20002412:	4b04      	ldr	r3, [pc, #16]	@ (20002424 <SysTick_Config+0x40>)
20002414:	2207      	movs	r2, #7
20002416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20002418:	2300      	movs	r3, #0
}
2000241a:	4618      	mov	r0, r3
2000241c:	3708      	adds	r7, #8
2000241e:	46bd      	mov	sp, r7
20002420:	bd80      	pop	{r7, pc}
20002422:	bf00      	nop
20002424:	e000e010 	.word	0xe000e010

20002428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20002428:	b580      	push	{r7, lr}
2000242a:	b082      	sub	sp, #8
2000242c:	af00      	add	r7, sp, #0
2000242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20002430:	6878      	ldr	r0, [r7, #4]
20002432:	f7ff fe11 	bl	20002058 <__NVIC_SetPriorityGrouping>
}
20002436:	bf00      	nop
20002438:	3708      	adds	r7, #8
2000243a:	46bd      	mov	sp, r7
2000243c:	bd80      	pop	{r7, pc}

2000243e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2000243e:	b580      	push	{r7, lr}
20002440:	b086      	sub	sp, #24
20002442:	af00      	add	r7, sp, #0
20002444:	4603      	mov	r3, r0
20002446:	60b9      	str	r1, [r7, #8]
20002448:	607a      	str	r2, [r7, #4]
2000244a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
2000244c:	2300      	movs	r3, #0
2000244e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20002450:	f7ff fe26 	bl	200020a0 <__NVIC_GetPriorityGrouping>
20002454:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20002456:	687a      	ldr	r2, [r7, #4]
20002458:	68b9      	ldr	r1, [r7, #8]
2000245a:	6978      	ldr	r0, [r7, #20]
2000245c:	f7ff ff42 	bl	200022e4 <NVIC_EncodePriority>
20002460:	4602      	mov	r2, r0
20002462:	f997 300f 	ldrsb.w	r3, [r7, #15]
20002466:	4611      	mov	r1, r2
20002468:	4618      	mov	r0, r3
2000246a:	f7ff fee9 	bl	20002240 <__NVIC_SetPriority>
}
2000246e:	bf00      	nop
20002470:	3718      	adds	r7, #24
20002472:	46bd      	mov	sp, r7
20002474:	bd80      	pop	{r7, pc}

20002476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
20002476:	b580      	push	{r7, lr}
20002478:	b082      	sub	sp, #8
2000247a:	af00      	add	r7, sp, #0
2000247c:	4603      	mov	r3, r0
2000247e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002484:	4618      	mov	r0, r3
20002486:	f7ff fe19 	bl	200020bc <__NVIC_EnableIRQ>
}
2000248a:	bf00      	nop
2000248c:	3708      	adds	r7, #8
2000248e:	46bd      	mov	sp, r7
20002490:	bd80      	pop	{r7, pc}

20002492 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
20002492:	b580      	push	{r7, lr}
20002494:	b082      	sub	sp, #8
20002496:	af00      	add	r7, sp, #0
20002498:	4603      	mov	r3, r0
2000249a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
2000249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
200024a0:	4618      	mov	r0, r3
200024a2:	f7ff fe29 	bl	200020f8 <__NVIC_DisableIRQ>
}
200024a6:	bf00      	nop
200024a8:	3708      	adds	r7, #8
200024aa:	46bd      	mov	sp, r7
200024ac:	bd80      	pop	{r7, pc}

200024ae <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
200024ae:	b580      	push	{r7, lr}
200024b0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
200024b2:	f7ff ff81 	bl	200023b8 <__NVIC_SystemReset>

200024b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
200024b6:	b580      	push	{r7, lr}
200024b8:	b082      	sub	sp, #8
200024ba:	af00      	add	r7, sp, #0
200024bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
200024be:	6878      	ldr	r0, [r7, #4]
200024c0:	f7ff ff90 	bl	200023e4 <SysTick_Config>
200024c4:	4603      	mov	r3, r0
}
200024c6:	4618      	mov	r0, r3
200024c8:	3708      	adds	r7, #8
200024ca:	46bd      	mov	sp, r7
200024cc:	bd80      	pop	{r7, pc}
	...

200024d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
200024d0:	b480      	push	{r7}
200024d2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
200024d4:	f3bf 8f5f 	dmb	sy
}
200024d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
200024da:	4b07      	ldr	r3, [pc, #28]	@ (200024f8 <HAL_MPU_Disable+0x28>)
200024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200024de:	4a06      	ldr	r2, [pc, #24]	@ (200024f8 <HAL_MPU_Disable+0x28>)
200024e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
200024e4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
200024e6:	4b05      	ldr	r3, [pc, #20]	@ (200024fc <HAL_MPU_Disable+0x2c>)
200024e8:	2200      	movs	r2, #0
200024ea:	605a      	str	r2, [r3, #4]
}
200024ec:	bf00      	nop
200024ee:	46bd      	mov	sp, r7
200024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200024f4:	4770      	bx	lr
200024f6:	bf00      	nop
200024f8:	e000ed00 	.word	0xe000ed00
200024fc:	e000ed90 	.word	0xe000ed90

20002500 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
20002500:	b480      	push	{r7}
20002502:	b083      	sub	sp, #12
20002504:	af00      	add	r7, sp, #0
20002506:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
20002508:	4a0b      	ldr	r2, [pc, #44]	@ (20002538 <HAL_MPU_Enable+0x38>)
2000250a:	687b      	ldr	r3, [r7, #4]
2000250c:	f043 0301 	orr.w	r3, r3, #1
20002510:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
20002512:	4b0a      	ldr	r3, [pc, #40]	@ (2000253c <HAL_MPU_Enable+0x3c>)
20002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20002516:	4a09      	ldr	r2, [pc, #36]	@ (2000253c <HAL_MPU_Enable+0x3c>)
20002518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2000251c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
2000251e:	f3bf 8f4f 	dsb	sy
}
20002522:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
20002524:	f3bf 8f6f 	isb	sy
}
20002528:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
2000252a:	bf00      	nop
2000252c:	370c      	adds	r7, #12
2000252e:	46bd      	mov	sp, r7
20002530:	f85d 7b04 	ldr.w	r7, [sp], #4
20002534:	4770      	bx	lr
20002536:	bf00      	nop
20002538:	e000ed90 	.word	0xe000ed90
2000253c:	e000ed00 	.word	0xe000ed00

20002540 <HAL_MPU_EnableRegion>:
/**
  * @brief  Enables the MPU Region.
  * @retval None
  */
void HAL_MPU_EnableRegion(uint32_t RegionNumber)
{
20002540:	b480      	push	{r7}
20002542:	b083      	sub	sp, #12
20002544:	af00      	add	r7, sp, #0
20002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(RegionNumber));

  /* Set the Region number */
  MPU->RNR = RegionNumber;
20002548:	4a07      	ldr	r2, [pc, #28]	@ (20002568 <HAL_MPU_EnableRegion+0x28>)
2000254a:	687b      	ldr	r3, [r7, #4]
2000254c:	6093      	str	r3, [r2, #8]

  /* Enable the Region */
  SET_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
2000254e:	4b06      	ldr	r3, [pc, #24]	@ (20002568 <HAL_MPU_EnableRegion+0x28>)
20002550:	691b      	ldr	r3, [r3, #16]
20002552:	4a05      	ldr	r2, [pc, #20]	@ (20002568 <HAL_MPU_EnableRegion+0x28>)
20002554:	f043 0301 	orr.w	r3, r3, #1
20002558:	6113      	str	r3, [r2, #16]
}
2000255a:	bf00      	nop
2000255c:	370c      	adds	r7, #12
2000255e:	46bd      	mov	sp, r7
20002560:	f85d 7b04 	ldr.w	r7, [sp], #4
20002564:	4770      	bx	lr
20002566:	bf00      	nop
20002568:	e000ed90 	.word	0xe000ed90

2000256c <HAL_MPU_DisableRegion>:
/**
  * @brief  Disables the MPU Region.
  * @retval None
  */
void HAL_MPU_DisableRegion(uint32_t RegionNumber)
{
2000256c:	b480      	push	{r7}
2000256e:	b083      	sub	sp, #12
20002570:	af00      	add	r7, sp, #0
20002572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(RegionNumber));

  /* Set the Region number */
  MPU->RNR = RegionNumber;
20002574:	4a07      	ldr	r2, [pc, #28]	@ (20002594 <HAL_MPU_DisableRegion+0x28>)
20002576:	687b      	ldr	r3, [r7, #4]
20002578:	6093      	str	r3, [r2, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
2000257a:	4b06      	ldr	r3, [pc, #24]	@ (20002594 <HAL_MPU_DisableRegion+0x28>)
2000257c:	691b      	ldr	r3, [r3, #16]
2000257e:	4a05      	ldr	r2, [pc, #20]	@ (20002594 <HAL_MPU_DisableRegion+0x28>)
20002580:	f023 0301 	bic.w	r3, r3, #1
20002584:	6113      	str	r3, [r2, #16]
}
20002586:	bf00      	nop
20002588:	370c      	adds	r7, #12
2000258a:	46bd      	mov	sp, r7
2000258c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002590:	4770      	bx	lr
20002592:	bf00      	nop
20002594:	e000ed90 	.word	0xe000ed90

20002598 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
20002598:	b480      	push	{r7}
2000259a:	b083      	sub	sp, #12
2000259c:	af00      	add	r7, sp, #0
2000259e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
200025a0:	687b      	ldr	r3, [r7, #4]
200025a2:	785a      	ldrb	r2, [r3, #1]
200025a4:	4b1b      	ldr	r3, [pc, #108]	@ (20002614 <HAL_MPU_ConfigRegion+0x7c>)
200025a6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
200025a8:	4b1a      	ldr	r3, [pc, #104]	@ (20002614 <HAL_MPU_ConfigRegion+0x7c>)
200025aa:	691b      	ldr	r3, [r3, #16]
200025ac:	4a19      	ldr	r2, [pc, #100]	@ (20002614 <HAL_MPU_ConfigRegion+0x7c>)
200025ae:	f023 0301 	bic.w	r3, r3, #1
200025b2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
200025b4:	4a17      	ldr	r2, [pc, #92]	@ (20002614 <HAL_MPU_ConfigRegion+0x7c>)
200025b6:	687b      	ldr	r3, [r7, #4]
200025b8:	685b      	ldr	r3, [r3, #4]
200025ba:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200025bc:	687b      	ldr	r3, [r7, #4]
200025be:	7b1b      	ldrb	r3, [r3, #12]
200025c0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
200025c2:	687b      	ldr	r3, [r7, #4]
200025c4:	7adb      	ldrb	r3, [r3, #11]
200025c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200025c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
200025ca:	687b      	ldr	r3, [r7, #4]
200025cc:	7a9b      	ldrb	r3, [r3, #10]
200025ce:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
200025d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
200025d2:	687b      	ldr	r3, [r7, #4]
200025d4:	7b5b      	ldrb	r3, [r3, #13]
200025d6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
200025d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
200025da:	687b      	ldr	r3, [r7, #4]
200025dc:	7b9b      	ldrb	r3, [r3, #14]
200025de:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
200025e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
200025e2:	687b      	ldr	r3, [r7, #4]
200025e4:	7bdb      	ldrb	r3, [r3, #15]
200025e6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
200025e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
200025ea:	687b      	ldr	r3, [r7, #4]
200025ec:	7a5b      	ldrb	r3, [r3, #9]
200025ee:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
200025f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200025f2:	687b      	ldr	r3, [r7, #4]
200025f4:	7a1b      	ldrb	r3, [r3, #8]
200025f6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
200025f8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
200025fa:	687a      	ldr	r2, [r7, #4]
200025fc:	7812      	ldrb	r2, [r2, #0]
200025fe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
20002600:	4a04      	ldr	r2, [pc, #16]	@ (20002614 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
20002602:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
20002604:	6113      	str	r3, [r2, #16]
}
20002606:	bf00      	nop
20002608:	370c      	adds	r7, #12
2000260a:	46bd      	mov	sp, r7
2000260c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002610:	4770      	bx	lr
20002612:	bf00      	nop
20002614:	e000ed90 	.word	0xe000ed90

20002618 <HAL_CORTEX_ClearEvent>:
/**
  * @brief  Clear pending events.
  * @retval None
  */
void HAL_CORTEX_ClearEvent(void)
{
20002618:	b480      	push	{r7}
2000261a:	af00      	add	r7, sp, #0
  __SEV();
2000261c:	bf40      	sev
  __WFE();
2000261e:	bf20      	wfe
}
20002620:	bf00      	nop
20002622:	46bd      	mov	sp, r7
20002624:	f85d 7b04 	ldr.w	r7, [sp], #4
20002628:	4770      	bx	lr

2000262a <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
2000262a:	b580      	push	{r7, lr}
2000262c:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
2000262e:	f7ff fd37 	bl	200020a0 <__NVIC_GetPriorityGrouping>
20002632:	4603      	mov	r3, r0
}
20002634:	4618      	mov	r0, r3
20002636:	bd80      	pop	{r7, pc}

20002638 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
20002638:	b580      	push	{r7, lr}
2000263a:	b084      	sub	sp, #16
2000263c:	af00      	add	r7, sp, #0
2000263e:	60b9      	str	r1, [r7, #8]
20002640:	607a      	str	r2, [r7, #4]
20002642:	603b      	str	r3, [r7, #0]
20002644:	4603      	mov	r3, r0
20002646:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
20002648:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000264c:	4618      	mov	r0, r3
2000264e:	f7ff fe21 	bl	20002294 <__NVIC_GetPriority>
20002652:	683b      	ldr	r3, [r7, #0]
20002654:	687a      	ldr	r2, [r7, #4]
20002656:	68b9      	ldr	r1, [r7, #8]
20002658:	f7ff fe77 	bl	2000234a <NVIC_DecodePriority>
}
2000265c:	bf00      	nop
2000265e:	3710      	adds	r7, #16
20002660:	46bd      	mov	sp, r7
20002662:	bd80      	pop	{r7, pc}

20002664 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
20002664:	b580      	push	{r7, lr}
20002666:	b082      	sub	sp, #8
20002668:	af00      	add	r7, sp, #0
2000266a:	4603      	mov	r3, r0
2000266c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
2000266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002672:	4618      	mov	r0, r3
20002674:	f7ff fd86 	bl	20002184 <__NVIC_SetPendingIRQ>
}
20002678:	bf00      	nop
2000267a:	3708      	adds	r7, #8
2000267c:	46bd      	mov	sp, r7
2000267e:	bd80      	pop	{r7, pc}

20002680 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
20002680:	b580      	push	{r7, lr}
20002682:	b082      	sub	sp, #8
20002684:	af00      	add	r7, sp, #0
20002686:	4603      	mov	r3, r0
20002688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
2000268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000268e:	4618      	mov	r0, r3
20002690:	f7ff fd56 	bl	20002140 <__NVIC_GetPendingIRQ>
20002694:	4603      	mov	r3, r0
}
20002696:	4618      	mov	r0, r3
20002698:	3708      	adds	r7, #8
2000269a:	46bd      	mov	sp, r7
2000269c:	bd80      	pop	{r7, pc}

2000269e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2000269e:	b580      	push	{r7, lr}
200026a0:	b082      	sub	sp, #8
200026a2:	af00      	add	r7, sp, #0
200026a4:	4603      	mov	r3, r0
200026a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
200026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
200026ac:	4618      	mov	r0, r3
200026ae:	f7ff fd87 	bl	200021c0 <__NVIC_ClearPendingIRQ>
}
200026b2:	bf00      	nop
200026b4:	3708      	adds	r7, #8
200026b6:	46bd      	mov	sp, r7
200026b8:	bd80      	pop	{r7, pc}

200026ba <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
200026ba:	b580      	push	{r7, lr}
200026bc:	b082      	sub	sp, #8
200026be:	af00      	add	r7, sp, #0
200026c0:	4603      	mov	r3, r0
200026c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
200026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
200026c8:	4618      	mov	r0, r3
200026ca:	f7ff fd97 	bl	200021fc <__NVIC_GetActive>
200026ce:	4603      	mov	r3, r0
}
200026d0:	4618      	mov	r0, r3
200026d2:	3708      	adds	r7, #8
200026d4:	46bd      	mov	sp, r7
200026d6:	bd80      	pop	{r7, pc}

200026d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
200026d8:	b480      	push	{r7}
200026da:	b083      	sub	sp, #12
200026dc:	af00      	add	r7, sp, #0
200026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
200026e0:	687b      	ldr	r3, [r7, #4]
200026e2:	2b04      	cmp	r3, #4
200026e4:	d106      	bne.n	200026f4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
200026e6:	4b09      	ldr	r3, [pc, #36]	@ (2000270c <HAL_SYSTICK_CLKSourceConfig+0x34>)
200026e8:	681b      	ldr	r3, [r3, #0]
200026ea:	4a08      	ldr	r2, [pc, #32]	@ (2000270c <HAL_SYSTICK_CLKSourceConfig+0x34>)
200026ec:	f043 0304 	orr.w	r3, r3, #4
200026f0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
200026f2:	e005      	b.n	20002700 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
200026f4:	4b05      	ldr	r3, [pc, #20]	@ (2000270c <HAL_SYSTICK_CLKSourceConfig+0x34>)
200026f6:	681b      	ldr	r3, [r3, #0]
200026f8:	4a04      	ldr	r2, [pc, #16]	@ (2000270c <HAL_SYSTICK_CLKSourceConfig+0x34>)
200026fa:	f023 0304 	bic.w	r3, r3, #4
200026fe:	6013      	str	r3, [r2, #0]
}
20002700:	bf00      	nop
20002702:	370c      	adds	r7, #12
20002704:	46bd      	mov	sp, r7
20002706:	f85d 7b04 	ldr.w	r7, [sp], #4
2000270a:	4770      	bx	lr
2000270c:	e000e010 	.word	0xe000e010

20002710 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
20002710:	b580      	push	{r7, lr}
20002712:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
20002714:	f000 f802 	bl	2000271c <HAL_SYSTICK_Callback>
}
20002718:	bf00      	nop
2000271a:	bd80      	pop	{r7, pc}

2000271c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
2000271c:	b480      	push	{r7}
2000271e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
20002720:	bf00      	nop
20002722:	46bd      	mov	sp, r7
20002724:	f85d 7b04 	ldr.w	r7, [sp], #4
20002728:	4770      	bx	lr
	...

2000272c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
2000272c:	b580      	push	{r7, lr}
2000272e:	b086      	sub	sp, #24
20002730:	af00      	add	r7, sp, #0
20002732:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
20002734:	2300      	movs	r3, #0
20002736:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
20002738:	f7fe f96d 	bl	20000a16 <HAL_GetTick>
2000273c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
2000273e:	687b      	ldr	r3, [r7, #4]
20002740:	2b00      	cmp	r3, #0
20002742:	d101      	bne.n	20002748 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
20002744:	2301      	movs	r3, #1
20002746:	e099      	b.n	2000287c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
20002748:	687b      	ldr	r3, [r7, #4]
2000274a:	2202      	movs	r2, #2
2000274c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
20002750:	687b      	ldr	r3, [r7, #4]
20002752:	2200      	movs	r2, #0
20002754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
20002758:	687b      	ldr	r3, [r7, #4]
2000275a:	681b      	ldr	r3, [r3, #0]
2000275c:	681a      	ldr	r2, [r3, #0]
2000275e:	687b      	ldr	r3, [r7, #4]
20002760:	681b      	ldr	r3, [r3, #0]
20002762:	f022 0201 	bic.w	r2, r2, #1
20002766:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20002768:	e00f      	b.n	2000278a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2000276a:	f7fe f954 	bl	20000a16 <HAL_GetTick>
2000276e:	4602      	mov	r2, r0
20002770:	693b      	ldr	r3, [r7, #16]
20002772:	1ad3      	subs	r3, r2, r3
20002774:	2b05      	cmp	r3, #5
20002776:	d908      	bls.n	2000278a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20002778:	687b      	ldr	r3, [r7, #4]
2000277a:	2220      	movs	r2, #32
2000277c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
2000277e:	687b      	ldr	r3, [r7, #4]
20002780:	2203      	movs	r2, #3
20002782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
20002786:	2303      	movs	r3, #3
20002788:	e078      	b.n	2000287c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
2000278a:	687b      	ldr	r3, [r7, #4]
2000278c:	681b      	ldr	r3, [r3, #0]
2000278e:	681b      	ldr	r3, [r3, #0]
20002790:	f003 0301 	and.w	r3, r3, #1
20002794:	2b00      	cmp	r3, #0
20002796:	d1e8      	bne.n	2000276a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
20002798:	687b      	ldr	r3, [r7, #4]
2000279a:	681b      	ldr	r3, [r3, #0]
2000279c:	681b      	ldr	r3, [r3, #0]
2000279e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
200027a0:	697a      	ldr	r2, [r7, #20]
200027a2:	4b38      	ldr	r3, [pc, #224]	@ (20002884 <HAL_DMA_Init+0x158>)
200027a4:	4013      	ands	r3, r2
200027a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
200027a8:	687b      	ldr	r3, [r7, #4]
200027aa:	685a      	ldr	r2, [r3, #4]
200027ac:	687b      	ldr	r3, [r7, #4]
200027ae:	689b      	ldr	r3, [r3, #8]
200027b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
200027b2:	687b      	ldr	r3, [r7, #4]
200027b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
200027b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
200027b8:	687b      	ldr	r3, [r7, #4]
200027ba:	691b      	ldr	r3, [r3, #16]
200027bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
200027be:	687b      	ldr	r3, [r7, #4]
200027c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
200027c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
200027c4:	687b      	ldr	r3, [r7, #4]
200027c6:	699b      	ldr	r3, [r3, #24]
200027c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
200027ca:	687b      	ldr	r3, [r7, #4]
200027cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
200027ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
200027d0:	687b      	ldr	r3, [r7, #4]
200027d2:	6a1b      	ldr	r3, [r3, #32]
200027d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
200027d6:	697a      	ldr	r2, [r7, #20]
200027d8:	4313      	orrs	r3, r2
200027da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
200027dc:	687b      	ldr	r3, [r7, #4]
200027de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200027e0:	2b04      	cmp	r3, #4
200027e2:	d107      	bne.n	200027f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
200027e4:	687b      	ldr	r3, [r7, #4]
200027e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
200027e8:	687b      	ldr	r3, [r7, #4]
200027ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200027ec:	4313      	orrs	r3, r2
200027ee:	697a      	ldr	r2, [r7, #20]
200027f0:	4313      	orrs	r3, r2
200027f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
200027f4:	687b      	ldr	r3, [r7, #4]
200027f6:	681b      	ldr	r3, [r3, #0]
200027f8:	697a      	ldr	r2, [r7, #20]
200027fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
200027fc:	687b      	ldr	r3, [r7, #4]
200027fe:	681b      	ldr	r3, [r3, #0]
20002800:	695b      	ldr	r3, [r3, #20]
20002802:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
20002804:	697b      	ldr	r3, [r7, #20]
20002806:	f023 0307 	bic.w	r3, r3, #7
2000280a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
2000280c:	687b      	ldr	r3, [r7, #4]
2000280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
20002810:	697a      	ldr	r2, [r7, #20]
20002812:	4313      	orrs	r3, r2
20002814:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
20002816:	687b      	ldr	r3, [r7, #4]
20002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000281a:	2b04      	cmp	r3, #4
2000281c:	d117      	bne.n	2000284e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
2000281e:	687b      	ldr	r3, [r7, #4]
20002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20002822:	697a      	ldr	r2, [r7, #20]
20002824:	4313      	orrs	r3, r2
20002826:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
20002828:	687b      	ldr	r3, [r7, #4]
2000282a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2000282c:	2b00      	cmp	r3, #0
2000282e:	d00e      	beq.n	2000284e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
20002830:	6878      	ldr	r0, [r7, #4]
20002832:	f000 fd51 	bl	200032d8 <DMA_CheckFifoParam>
20002836:	4603      	mov	r3, r0
20002838:	2b00      	cmp	r3, #0
2000283a:	d008      	beq.n	2000284e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2000283c:	687b      	ldr	r3, [r7, #4]
2000283e:	2240      	movs	r2, #64	@ 0x40
20002840:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002842:	687b      	ldr	r3, [r7, #4]
20002844:	2201      	movs	r2, #1
20002846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
2000284a:	2301      	movs	r3, #1
2000284c:	e016      	b.n	2000287c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
2000284e:	687b      	ldr	r3, [r7, #4]
20002850:	681b      	ldr	r3, [r3, #0]
20002852:	697a      	ldr	r2, [r7, #20]
20002854:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
20002856:	6878      	ldr	r0, [r7, #4]
20002858:	f000 fd08 	bl	2000326c <DMA_CalcBaseAndBitshift>
2000285c:	4603      	mov	r3, r0
2000285e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20002860:	687b      	ldr	r3, [r7, #4]
20002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002864:	223f      	movs	r2, #63	@ 0x3f
20002866:	409a      	lsls	r2, r3
20002868:	68fb      	ldr	r3, [r7, #12]
2000286a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2000286c:	687b      	ldr	r3, [r7, #4]
2000286e:	2200      	movs	r2, #0
20002870:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
20002872:	687b      	ldr	r3, [r7, #4]
20002874:	2201      	movs	r2, #1
20002876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
2000287a:	2300      	movs	r3, #0
}
2000287c:	4618      	mov	r0, r3
2000287e:	3718      	adds	r7, #24
20002880:	46bd      	mov	sp, r7
20002882:	bd80      	pop	{r7, pc}
20002884:	f010803f 	.word	0xf010803f

20002888 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
20002888:	b580      	push	{r7, lr}
2000288a:	b084      	sub	sp, #16
2000288c:	af00      	add	r7, sp, #0
2000288e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
20002890:	687b      	ldr	r3, [r7, #4]
20002892:	2b00      	cmp	r3, #0
20002894:	d101      	bne.n	2000289a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
20002896:	2301      	movs	r3, #1
20002898:	e050      	b.n	2000293c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
2000289a:	687b      	ldr	r3, [r7, #4]
2000289c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
200028a0:	b2db      	uxtb	r3, r3
200028a2:	2b02      	cmp	r3, #2
200028a4:	d101      	bne.n	200028aa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
200028a6:	2302      	movs	r3, #2
200028a8:	e048      	b.n	2000293c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
200028aa:	687b      	ldr	r3, [r7, #4]
200028ac:	681b      	ldr	r3, [r3, #0]
200028ae:	681a      	ldr	r2, [r3, #0]
200028b0:	687b      	ldr	r3, [r7, #4]
200028b2:	681b      	ldr	r3, [r3, #0]
200028b4:	f022 0201 	bic.w	r2, r2, #1
200028b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
200028ba:	687b      	ldr	r3, [r7, #4]
200028bc:	681b      	ldr	r3, [r3, #0]
200028be:	2200      	movs	r2, #0
200028c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
200028c2:	687b      	ldr	r3, [r7, #4]
200028c4:	681b      	ldr	r3, [r3, #0]
200028c6:	2200      	movs	r2, #0
200028c8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
200028ca:	687b      	ldr	r3, [r7, #4]
200028cc:	681b      	ldr	r3, [r3, #0]
200028ce:	2200      	movs	r2, #0
200028d0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
200028d2:	687b      	ldr	r3, [r7, #4]
200028d4:	681b      	ldr	r3, [r3, #0]
200028d6:	2200      	movs	r2, #0
200028d8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
200028da:	687b      	ldr	r3, [r7, #4]
200028dc:	681b      	ldr	r3, [r3, #0]
200028de:	2200      	movs	r2, #0
200028e0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
200028e2:	687b      	ldr	r3, [r7, #4]
200028e4:	681b      	ldr	r3, [r3, #0]
200028e6:	2221      	movs	r2, #33	@ 0x21
200028e8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
200028ea:	6878      	ldr	r0, [r7, #4]
200028ec:	f000 fcbe 	bl	2000326c <DMA_CalcBaseAndBitshift>
200028f0:	4603      	mov	r3, r0
200028f2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
200028f4:	687b      	ldr	r3, [r7, #4]
200028f6:	2200      	movs	r2, #0
200028f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
200028fa:	687b      	ldr	r3, [r7, #4]
200028fc:	2200      	movs	r2, #0
200028fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
20002900:	687b      	ldr	r3, [r7, #4]
20002902:	2200      	movs	r2, #0
20002904:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
20002906:	687b      	ldr	r3, [r7, #4]
20002908:	2200      	movs	r2, #0
2000290a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
2000290c:	687b      	ldr	r3, [r7, #4]
2000290e:	2200      	movs	r2, #0
20002910:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
20002912:	687b      	ldr	r3, [r7, #4]
20002914:	2200      	movs	r2, #0
20002916:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20002918:	687b      	ldr	r3, [r7, #4]
2000291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2000291c:	223f      	movs	r2, #63	@ 0x3f
2000291e:	409a      	lsls	r2, r3
20002920:	68fb      	ldr	r3, [r7, #12]
20002922:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002924:	687b      	ldr	r3, [r7, #4]
20002926:	2200      	movs	r2, #0
20002928:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
2000292a:	687b      	ldr	r3, [r7, #4]
2000292c:	2200      	movs	r2, #0
2000292e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
20002932:	687b      	ldr	r3, [r7, #4]
20002934:	2200      	movs	r2, #0
20002936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
2000293a:	2300      	movs	r3, #0
}
2000293c:	4618      	mov	r0, r3
2000293e:	3710      	adds	r7, #16
20002940:	46bd      	mov	sp, r7
20002942:	bd80      	pop	{r7, pc}

20002944 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20002944:	b580      	push	{r7, lr}
20002946:	b086      	sub	sp, #24
20002948:	af00      	add	r7, sp, #0
2000294a:	60f8      	str	r0, [r7, #12]
2000294c:	60b9      	str	r1, [r7, #8]
2000294e:	607a      	str	r2, [r7, #4]
20002950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20002952:	2300      	movs	r3, #0
20002954:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
20002956:	68fb      	ldr	r3, [r7, #12]
20002958:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
2000295c:	2b01      	cmp	r3, #1
2000295e:	d101      	bne.n	20002964 <HAL_DMA_Start+0x20>
20002960:	2302      	movs	r3, #2
20002962:	e026      	b.n	200029b2 <HAL_DMA_Start+0x6e>
20002964:	68fb      	ldr	r3, [r7, #12]
20002966:	2201      	movs	r2, #1
20002968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
2000296c:	68fb      	ldr	r3, [r7, #12]
2000296e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20002972:	b2db      	uxtb	r3, r3
20002974:	2b01      	cmp	r3, #1
20002976:	d115      	bne.n	200029a4 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
20002978:	68fb      	ldr	r3, [r7, #12]
2000297a:	2202      	movs	r2, #2
2000297c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002980:	68fb      	ldr	r3, [r7, #12]
20002982:	2200      	movs	r2, #0
20002984:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
20002986:	683b      	ldr	r3, [r7, #0]
20002988:	687a      	ldr	r2, [r7, #4]
2000298a:	68b9      	ldr	r1, [r7, #8]
2000298c:	68f8      	ldr	r0, [r7, #12]
2000298e:	f000 fc3f 	bl	20003210 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
20002992:	68fb      	ldr	r3, [r7, #12]
20002994:	681b      	ldr	r3, [r3, #0]
20002996:	681a      	ldr	r2, [r3, #0]
20002998:	68fb      	ldr	r3, [r7, #12]
2000299a:	681b      	ldr	r3, [r3, #0]
2000299c:	f042 0201 	orr.w	r2, r2, #1
200029a0:	601a      	str	r2, [r3, #0]
200029a2:	e005      	b.n	200029b0 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
200029a4:	68fb      	ldr	r3, [r7, #12]
200029a6:	2200      	movs	r2, #0
200029a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
200029ac:	2302      	movs	r3, #2
200029ae:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
200029b0:	7dfb      	ldrb	r3, [r7, #23]
}
200029b2:	4618      	mov	r0, r3
200029b4:	3718      	adds	r7, #24
200029b6:	46bd      	mov	sp, r7
200029b8:	bd80      	pop	{r7, pc}

200029ba <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
200029ba:	b580      	push	{r7, lr}
200029bc:	b086      	sub	sp, #24
200029be:	af00      	add	r7, sp, #0
200029c0:	60f8      	str	r0, [r7, #12]
200029c2:	60b9      	str	r1, [r7, #8]
200029c4:	607a      	str	r2, [r7, #4]
200029c6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200029c8:	2300      	movs	r3, #0
200029ca:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
200029cc:	68fb      	ldr	r3, [r7, #12]
200029ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
200029d0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
200029d2:	68fb      	ldr	r3, [r7, #12]
200029d4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
200029d8:	2b01      	cmp	r3, #1
200029da:	d101      	bne.n	200029e0 <HAL_DMA_Start_IT+0x26>
200029dc:	2302      	movs	r3, #2
200029de:	e040      	b.n	20002a62 <HAL_DMA_Start_IT+0xa8>
200029e0:	68fb      	ldr	r3, [r7, #12]
200029e2:	2201      	movs	r2, #1
200029e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
200029e8:	68fb      	ldr	r3, [r7, #12]
200029ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
200029ee:	b2db      	uxtb	r3, r3
200029f0:	2b01      	cmp	r3, #1
200029f2:	d12f      	bne.n	20002a54 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
200029f4:	68fb      	ldr	r3, [r7, #12]
200029f6:	2202      	movs	r2, #2
200029f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
200029fc:	68fb      	ldr	r3, [r7, #12]
200029fe:	2200      	movs	r2, #0
20002a00:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
20002a02:	683b      	ldr	r3, [r7, #0]
20002a04:	687a      	ldr	r2, [r7, #4]
20002a06:	68b9      	ldr	r1, [r7, #8]
20002a08:	68f8      	ldr	r0, [r7, #12]
20002a0a:	f000 fc01 	bl	20003210 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20002a0e:	68fb      	ldr	r3, [r7, #12]
20002a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002a12:	223f      	movs	r2, #63	@ 0x3f
20002a14:	409a      	lsls	r2, r3
20002a16:	693b      	ldr	r3, [r7, #16]
20002a18:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
20002a1a:	68fb      	ldr	r3, [r7, #12]
20002a1c:	681b      	ldr	r3, [r3, #0]
20002a1e:	681a      	ldr	r2, [r3, #0]
20002a20:	68fb      	ldr	r3, [r7, #12]
20002a22:	681b      	ldr	r3, [r3, #0]
20002a24:	f042 0216 	orr.w	r2, r2, #22
20002a28:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
20002a2a:	68fb      	ldr	r3, [r7, #12]
20002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002a2e:	2b00      	cmp	r3, #0
20002a30:	d007      	beq.n	20002a42 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
20002a32:	68fb      	ldr	r3, [r7, #12]
20002a34:	681b      	ldr	r3, [r3, #0]
20002a36:	681a      	ldr	r2, [r3, #0]
20002a38:	68fb      	ldr	r3, [r7, #12]
20002a3a:	681b      	ldr	r3, [r3, #0]
20002a3c:	f042 0208 	orr.w	r2, r2, #8
20002a40:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
20002a42:	68fb      	ldr	r3, [r7, #12]
20002a44:	681b      	ldr	r3, [r3, #0]
20002a46:	681a      	ldr	r2, [r3, #0]
20002a48:	68fb      	ldr	r3, [r7, #12]
20002a4a:	681b      	ldr	r3, [r3, #0]
20002a4c:	f042 0201 	orr.w	r2, r2, #1
20002a50:	601a      	str	r2, [r3, #0]
20002a52:	e005      	b.n	20002a60 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
20002a54:	68fb      	ldr	r3, [r7, #12]
20002a56:	2200      	movs	r2, #0
20002a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
20002a5c:	2302      	movs	r3, #2
20002a5e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
20002a60:	7dfb      	ldrb	r3, [r7, #23]
}
20002a62:	4618      	mov	r0, r3
20002a64:	3718      	adds	r7, #24
20002a66:	46bd      	mov	sp, r7
20002a68:	bd80      	pop	{r7, pc}

20002a6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
20002a6a:	b580      	push	{r7, lr}
20002a6c:	b084      	sub	sp, #16
20002a6e:	af00      	add	r7, sp, #0
20002a70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002a72:	687b      	ldr	r3, [r7, #4]
20002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20002a76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
20002a78:	f7fd ffcd 	bl	20000a16 <HAL_GetTick>
20002a7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
20002a7e:	687b      	ldr	r3, [r7, #4]
20002a80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20002a84:	b2db      	uxtb	r3, r3
20002a86:	2b02      	cmp	r3, #2
20002a88:	d008      	beq.n	20002a9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20002a8a:	687b      	ldr	r3, [r7, #4]
20002a8c:	2280      	movs	r2, #128	@ 0x80
20002a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002a90:	687b      	ldr	r3, [r7, #4]
20002a92:	2200      	movs	r2, #0
20002a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
20002a98:	2301      	movs	r3, #1
20002a9a:	e052      	b.n	20002b42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20002a9c:	687b      	ldr	r3, [r7, #4]
20002a9e:	681b      	ldr	r3, [r3, #0]
20002aa0:	681a      	ldr	r2, [r3, #0]
20002aa2:	687b      	ldr	r3, [r7, #4]
20002aa4:	681b      	ldr	r3, [r3, #0]
20002aa6:	f022 0216 	bic.w	r2, r2, #22
20002aaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
20002aac:	687b      	ldr	r3, [r7, #4]
20002aae:	681b      	ldr	r3, [r3, #0]
20002ab0:	695a      	ldr	r2, [r3, #20]
20002ab2:	687b      	ldr	r3, [r7, #4]
20002ab4:	681b      	ldr	r3, [r3, #0]
20002ab6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
20002aba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20002abc:	687b      	ldr	r3, [r7, #4]
20002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002ac0:	2b00      	cmp	r3, #0
20002ac2:	d103      	bne.n	20002acc <HAL_DMA_Abort+0x62>
20002ac4:	687b      	ldr	r3, [r7, #4]
20002ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20002ac8:	2b00      	cmp	r3, #0
20002aca:	d007      	beq.n	20002adc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
20002acc:	687b      	ldr	r3, [r7, #4]
20002ace:	681b      	ldr	r3, [r3, #0]
20002ad0:	681a      	ldr	r2, [r3, #0]
20002ad2:	687b      	ldr	r3, [r7, #4]
20002ad4:	681b      	ldr	r3, [r3, #0]
20002ad6:	f022 0208 	bic.w	r2, r2, #8
20002ada:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
20002adc:	687b      	ldr	r3, [r7, #4]
20002ade:	681b      	ldr	r3, [r3, #0]
20002ae0:	681a      	ldr	r2, [r3, #0]
20002ae2:	687b      	ldr	r3, [r7, #4]
20002ae4:	681b      	ldr	r3, [r3, #0]
20002ae6:	f022 0201 	bic.w	r2, r2, #1
20002aea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20002aec:	e013      	b.n	20002b16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
20002aee:	f7fd ff92 	bl	20000a16 <HAL_GetTick>
20002af2:	4602      	mov	r2, r0
20002af4:	68bb      	ldr	r3, [r7, #8]
20002af6:	1ad3      	subs	r3, r2, r3
20002af8:	2b05      	cmp	r3, #5
20002afa:	d90c      	bls.n	20002b16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20002afc:	687b      	ldr	r3, [r7, #4]
20002afe:	2220      	movs	r2, #32
20002b00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
20002b02:	687b      	ldr	r3, [r7, #4]
20002b04:	2203      	movs	r2, #3
20002b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002b0a:	687b      	ldr	r3, [r7, #4]
20002b0c:	2200      	movs	r2, #0
20002b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
20002b12:	2303      	movs	r3, #3
20002b14:	e015      	b.n	20002b42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20002b16:	687b      	ldr	r3, [r7, #4]
20002b18:	681b      	ldr	r3, [r3, #0]
20002b1a:	681b      	ldr	r3, [r3, #0]
20002b1c:	f003 0301 	and.w	r3, r3, #1
20002b20:	2b00      	cmp	r3, #0
20002b22:	d1e4      	bne.n	20002aee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20002b24:	687b      	ldr	r3, [r7, #4]
20002b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002b28:	223f      	movs	r2, #63	@ 0x3f
20002b2a:	409a      	lsls	r2, r3
20002b2c:	68fb      	ldr	r3, [r7, #12]
20002b2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
20002b30:	687b      	ldr	r3, [r7, #4]
20002b32:	2201      	movs	r2, #1
20002b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002b38:	687b      	ldr	r3, [r7, #4]
20002b3a:	2200      	movs	r2, #0
20002b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
20002b40:	2300      	movs	r3, #0
}
20002b42:	4618      	mov	r0, r3
20002b44:	3710      	adds	r7, #16
20002b46:	46bd      	mov	sp, r7
20002b48:	bd80      	pop	{r7, pc}

20002b4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
20002b4a:	b480      	push	{r7}
20002b4c:	b083      	sub	sp, #12
20002b4e:	af00      	add	r7, sp, #0
20002b50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
20002b52:	687b      	ldr	r3, [r7, #4]
20002b54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20002b58:	b2db      	uxtb	r3, r3
20002b5a:	2b02      	cmp	r3, #2
20002b5c:	d004      	beq.n	20002b68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20002b5e:	687b      	ldr	r3, [r7, #4]
20002b60:	2280      	movs	r2, #128	@ 0x80
20002b62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
20002b64:	2301      	movs	r3, #1
20002b66:	e00c      	b.n	20002b82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
20002b68:	687b      	ldr	r3, [r7, #4]
20002b6a:	2205      	movs	r2, #5
20002b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
20002b70:	687b      	ldr	r3, [r7, #4]
20002b72:	681b      	ldr	r3, [r3, #0]
20002b74:	681a      	ldr	r2, [r3, #0]
20002b76:	687b      	ldr	r3, [r7, #4]
20002b78:	681b      	ldr	r3, [r3, #0]
20002b7a:	f022 0201 	bic.w	r2, r2, #1
20002b7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
20002b80:	2300      	movs	r3, #0
}
20002b82:	4618      	mov	r0, r3
20002b84:	370c      	adds	r7, #12
20002b86:	46bd      	mov	sp, r7
20002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
20002b8c:	4770      	bx	lr

20002b8e <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
20002b8e:	b580      	push	{r7, lr}
20002b90:	b08a      	sub	sp, #40	@ 0x28
20002b92:	af00      	add	r7, sp, #0
20002b94:	60f8      	str	r0, [r7, #12]
20002b96:	460b      	mov	r3, r1
20002b98:	607a      	str	r2, [r7, #4]
20002b9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
20002b9c:	2300      	movs	r3, #0
20002b9e:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
20002ba0:	f7fd ff39 	bl	20000a16 <HAL_GetTick>
20002ba4:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
20002ba6:	68fb      	ldr	r3, [r7, #12]
20002ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20002bac:	b2db      	uxtb	r3, r3
20002bae:	2b02      	cmp	r3, #2
20002bb0:	d008      	beq.n	20002bc4 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20002bb2:	68fb      	ldr	r3, [r7, #12]
20002bb4:	2280      	movs	r2, #128	@ 0x80
20002bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
20002bb8:	68fb      	ldr	r3, [r7, #12]
20002bba:	2200      	movs	r2, #0
20002bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
20002bc0:	2301      	movs	r3, #1
20002bc2:	e0bf      	b.n	20002d44 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
20002bc4:	68fb      	ldr	r3, [r7, #12]
20002bc6:	681b      	ldr	r3, [r3, #0]
20002bc8:	681b      	ldr	r3, [r3, #0]
20002bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20002bce:	2b00      	cmp	r3, #0
20002bd0:	d005      	beq.n	20002bde <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20002bd2:	68fb      	ldr	r3, [r7, #12]
20002bd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
20002bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
20002bda:	2301      	movs	r3, #1
20002bdc:	e0b2      	b.n	20002d44 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20002bde:	7afb      	ldrb	r3, [r7, #11]
20002be0:	2b00      	cmp	r3, #0
20002be2:	d106      	bne.n	20002bf2 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
20002be4:	68fb      	ldr	r3, [r7, #12]
20002be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002be8:	2220      	movs	r2, #32
20002bea:	fa02 f303 	lsl.w	r3, r2, r3
20002bee:	627b      	str	r3, [r7, #36]	@ 0x24
20002bf0:	e005      	b.n	20002bfe <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
20002bf2:	68fb      	ldr	r3, [r7, #12]
20002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002bf6:	2210      	movs	r2, #16
20002bf8:	fa02 f303 	lsl.w	r3, r2, r3
20002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002bfe:	68fb      	ldr	r3, [r7, #12]
20002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20002c02:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
20002c04:	697b      	ldr	r3, [r7, #20]
20002c06:	681b      	ldr	r3, [r3, #0]
20002c08:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20002c0a:	e05a      	b.n	20002cc2 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
20002c0c:	687b      	ldr	r3, [r7, #4]
20002c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
20002c12:	d017      	beq.n	20002c44 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20002c14:	687b      	ldr	r3, [r7, #4]
20002c16:	2b00      	cmp	r3, #0
20002c18:	d007      	beq.n	20002c2a <HAL_DMA_PollForTransfer+0x9c>
20002c1a:	f7fd fefc 	bl	20000a16 <HAL_GetTick>
20002c1e:	4602      	mov	r2, r0
20002c20:	69bb      	ldr	r3, [r7, #24]
20002c22:	1ad3      	subs	r3, r2, r3
20002c24:	687a      	ldr	r2, [r7, #4]
20002c26:	429a      	cmp	r2, r3
20002c28:	d20c      	bcs.n	20002c44 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20002c2a:	68fb      	ldr	r3, [r7, #12]
20002c2c:	2220      	movs	r2, #32
20002c2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002c30:	68fb      	ldr	r3, [r7, #12]
20002c32:	2201      	movs	r2, #1
20002c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002c38:	68fb      	ldr	r3, [r7, #12]
20002c3a:	2200      	movs	r2, #0
20002c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
20002c40:	2303      	movs	r3, #3
20002c42:	e07f      	b.n	20002d44 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
20002c44:	697b      	ldr	r3, [r7, #20]
20002c46:	681b      	ldr	r3, [r3, #0]
20002c48:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20002c4a:	68fb      	ldr	r3, [r7, #12]
20002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002c4e:	2208      	movs	r2, #8
20002c50:	409a      	lsls	r2, r3
20002c52:	6a3b      	ldr	r3, [r7, #32]
20002c54:	4013      	ands	r3, r2
20002c56:	2b00      	cmp	r3, #0
20002c58:	d00b      	beq.n	20002c72 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20002c5a:	68fb      	ldr	r3, [r7, #12]
20002c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20002c5e:	f043 0201 	orr.w	r2, r3, #1
20002c62:	68fb      	ldr	r3, [r7, #12]
20002c64:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20002c66:	68fb      	ldr	r3, [r7, #12]
20002c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002c6a:	2208      	movs	r2, #8
20002c6c:	409a      	lsls	r2, r3
20002c6e:	697b      	ldr	r3, [r7, #20]
20002c70:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20002c72:	68fb      	ldr	r3, [r7, #12]
20002c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002c76:	2201      	movs	r2, #1
20002c78:	409a      	lsls	r2, r3
20002c7a:	6a3b      	ldr	r3, [r7, #32]
20002c7c:	4013      	ands	r3, r2
20002c7e:	2b00      	cmp	r3, #0
20002c80:	d00b      	beq.n	20002c9a <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20002c82:	68fb      	ldr	r3, [r7, #12]
20002c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20002c86:	f043 0202 	orr.w	r2, r3, #2
20002c8a:	68fb      	ldr	r3, [r7, #12]
20002c8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20002c8e:	68fb      	ldr	r3, [r7, #12]
20002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002c92:	2201      	movs	r2, #1
20002c94:	409a      	lsls	r2, r3
20002c96:	697b      	ldr	r3, [r7, #20]
20002c98:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20002c9a:	68fb      	ldr	r3, [r7, #12]
20002c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002c9e:	2204      	movs	r2, #4
20002ca0:	409a      	lsls	r2, r3
20002ca2:	6a3b      	ldr	r3, [r7, #32]
20002ca4:	4013      	ands	r3, r2
20002ca6:	2b00      	cmp	r3, #0
20002ca8:	d00b      	beq.n	20002cc2 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20002caa:	68fb      	ldr	r3, [r7, #12]
20002cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20002cae:	f043 0204 	orr.w	r2, r3, #4
20002cb2:	68fb      	ldr	r3, [r7, #12]
20002cb4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20002cb6:	68fb      	ldr	r3, [r7, #12]
20002cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002cba:	2204      	movs	r2, #4
20002cbc:	409a      	lsls	r2, r3
20002cbe:	697b      	ldr	r3, [r7, #20]
20002cc0:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20002cc2:	6a3a      	ldr	r2, [r7, #32]
20002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20002cc6:	4013      	ands	r3, r2
20002cc8:	2b00      	cmp	r3, #0
20002cca:	d105      	bne.n	20002cd8 <HAL_DMA_PollForTransfer+0x14a>
20002ccc:	68fb      	ldr	r3, [r7, #12]
20002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20002cd0:	f003 0301 	and.w	r3, r3, #1
20002cd4:	2b00      	cmp	r3, #0
20002cd6:	d099      	beq.n	20002c0c <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20002cd8:	68fb      	ldr	r3, [r7, #12]
20002cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20002cdc:	2b00      	cmp	r3, #0
20002cde:	d018      	beq.n	20002d12 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20002ce0:	68fb      	ldr	r3, [r7, #12]
20002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20002ce4:	f003 0301 	and.w	r3, r3, #1
20002ce8:	2b00      	cmp	r3, #0
20002cea:	d012      	beq.n	20002d12 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
20002cec:	68f8      	ldr	r0, [r7, #12]
20002cee:	f7ff febc 	bl	20002a6a <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20002cf2:	68fb      	ldr	r3, [r7, #12]
20002cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002cf6:	2230      	movs	r2, #48	@ 0x30
20002cf8:	409a      	lsls	r2, r3
20002cfa:	697b      	ldr	r3, [r7, #20]
20002cfc:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
20002cfe:	68fb      	ldr	r3, [r7, #12]
20002d00:	2201      	movs	r2, #1
20002d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
20002d06:	68fb      	ldr	r3, [r7, #12]
20002d08:	2200      	movs	r2, #0
20002d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      return HAL_ERROR;
20002d0e:	2301      	movs	r3, #1
20002d10:	e018      	b.n	20002d44 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20002d12:	7afb      	ldrb	r3, [r7, #11]
20002d14:	2b00      	cmp	r3, #0
20002d16:	d10e      	bne.n	20002d36 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20002d18:	68fb      	ldr	r3, [r7, #12]
20002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002d1c:	2230      	movs	r2, #48	@ 0x30
20002d1e:	409a      	lsls	r2, r3
20002d20:	697b      	ldr	r3, [r7, #20]
20002d22:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
20002d24:	68fb      	ldr	r3, [r7, #12]
20002d26:	2201      	movs	r2, #1
20002d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002d2c:	68fb      	ldr	r3, [r7, #12]
20002d2e:	2200      	movs	r2, #0
20002d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
20002d34:	e005      	b.n	20002d42 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
20002d36:	68fb      	ldr	r3, [r7, #12]
20002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002d3a:	2210      	movs	r2, #16
20002d3c:	409a      	lsls	r2, r3
20002d3e:	697b      	ldr	r3, [r7, #20]
20002d40:	609a      	str	r2, [r3, #8]
  }
  
  return status;
20002d42:	7ffb      	ldrb	r3, [r7, #31]
}
20002d44:	4618      	mov	r0, r3
20002d46:	3728      	adds	r7, #40	@ 0x28
20002d48:	46bd      	mov	sp, r7
20002d4a:	bd80      	pop	{r7, pc}

20002d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
20002d4c:	b580      	push	{r7, lr}
20002d4e:	b086      	sub	sp, #24
20002d50:	af00      	add	r7, sp, #0
20002d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
20002d54:	2300      	movs	r3, #0
20002d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
20002d58:	4b8e      	ldr	r3, [pc, #568]	@ (20002f94 <HAL_DMA_IRQHandler+0x248>)
20002d5a:	681b      	ldr	r3, [r3, #0]
20002d5c:	4a8e      	ldr	r2, [pc, #568]	@ (20002f98 <HAL_DMA_IRQHandler+0x24c>)
20002d5e:	fba2 2303 	umull	r2, r3, r2, r3
20002d62:	0a9b      	lsrs	r3, r3, #10
20002d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002d66:	687b      	ldr	r3, [r7, #4]
20002d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
20002d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
20002d6c:	693b      	ldr	r3, [r7, #16]
20002d6e:	681b      	ldr	r3, [r3, #0]
20002d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20002d72:	687b      	ldr	r3, [r7, #4]
20002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002d76:	2208      	movs	r2, #8
20002d78:	409a      	lsls	r2, r3
20002d7a:	68fb      	ldr	r3, [r7, #12]
20002d7c:	4013      	ands	r3, r2
20002d7e:	2b00      	cmp	r3, #0
20002d80:	d01a      	beq.n	20002db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
20002d82:	687b      	ldr	r3, [r7, #4]
20002d84:	681b      	ldr	r3, [r3, #0]
20002d86:	681b      	ldr	r3, [r3, #0]
20002d88:	f003 0304 	and.w	r3, r3, #4
20002d8c:	2b00      	cmp	r3, #0
20002d8e:	d013      	beq.n	20002db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
20002d90:	687b      	ldr	r3, [r7, #4]
20002d92:	681b      	ldr	r3, [r3, #0]
20002d94:	681a      	ldr	r2, [r3, #0]
20002d96:	687b      	ldr	r3, [r7, #4]
20002d98:	681b      	ldr	r3, [r3, #0]
20002d9a:	f022 0204 	bic.w	r2, r2, #4
20002d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20002da0:	687b      	ldr	r3, [r7, #4]
20002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002da4:	2208      	movs	r2, #8
20002da6:	409a      	lsls	r2, r3
20002da8:	693b      	ldr	r3, [r7, #16]
20002daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20002dac:	687b      	ldr	r3, [r7, #4]
20002dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20002db0:	f043 0201 	orr.w	r2, r3, #1
20002db4:	687b      	ldr	r3, [r7, #4]
20002db6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20002db8:	687b      	ldr	r3, [r7, #4]
20002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002dbc:	2201      	movs	r2, #1
20002dbe:	409a      	lsls	r2, r3
20002dc0:	68fb      	ldr	r3, [r7, #12]
20002dc2:	4013      	ands	r3, r2
20002dc4:	2b00      	cmp	r3, #0
20002dc6:	d012      	beq.n	20002dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
20002dc8:	687b      	ldr	r3, [r7, #4]
20002dca:	681b      	ldr	r3, [r3, #0]
20002dcc:	695b      	ldr	r3, [r3, #20]
20002dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20002dd2:	2b00      	cmp	r3, #0
20002dd4:	d00b      	beq.n	20002dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20002dd6:	687b      	ldr	r3, [r7, #4]
20002dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002dda:	2201      	movs	r2, #1
20002ddc:	409a      	lsls	r2, r3
20002dde:	693b      	ldr	r3, [r7, #16]
20002de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20002de2:	687b      	ldr	r3, [r7, #4]
20002de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20002de6:	f043 0202 	orr.w	r2, r3, #2
20002dea:	687b      	ldr	r3, [r7, #4]
20002dec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20002dee:	687b      	ldr	r3, [r7, #4]
20002df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002df2:	2204      	movs	r2, #4
20002df4:	409a      	lsls	r2, r3
20002df6:	68fb      	ldr	r3, [r7, #12]
20002df8:	4013      	ands	r3, r2
20002dfa:	2b00      	cmp	r3, #0
20002dfc:	d012      	beq.n	20002e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
20002dfe:	687b      	ldr	r3, [r7, #4]
20002e00:	681b      	ldr	r3, [r3, #0]
20002e02:	681b      	ldr	r3, [r3, #0]
20002e04:	f003 0302 	and.w	r3, r3, #2
20002e08:	2b00      	cmp	r3, #0
20002e0a:	d00b      	beq.n	20002e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20002e0c:	687b      	ldr	r3, [r7, #4]
20002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002e10:	2204      	movs	r2, #4
20002e12:	409a      	lsls	r2, r3
20002e14:	693b      	ldr	r3, [r7, #16]
20002e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20002e18:	687b      	ldr	r3, [r7, #4]
20002e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20002e1c:	f043 0204 	orr.w	r2, r3, #4
20002e20:	687b      	ldr	r3, [r7, #4]
20002e22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
20002e24:	687b      	ldr	r3, [r7, #4]
20002e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002e28:	2210      	movs	r2, #16
20002e2a:	409a      	lsls	r2, r3
20002e2c:	68fb      	ldr	r3, [r7, #12]
20002e2e:	4013      	ands	r3, r2
20002e30:	2b00      	cmp	r3, #0
20002e32:	d043      	beq.n	20002ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
20002e34:	687b      	ldr	r3, [r7, #4]
20002e36:	681b      	ldr	r3, [r3, #0]
20002e38:	681b      	ldr	r3, [r3, #0]
20002e3a:	f003 0308 	and.w	r3, r3, #8
20002e3e:	2b00      	cmp	r3, #0
20002e40:	d03c      	beq.n	20002ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
20002e42:	687b      	ldr	r3, [r7, #4]
20002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002e46:	2210      	movs	r2, #16
20002e48:	409a      	lsls	r2, r3
20002e4a:	693b      	ldr	r3, [r7, #16]
20002e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20002e4e:	687b      	ldr	r3, [r7, #4]
20002e50:	681b      	ldr	r3, [r3, #0]
20002e52:	681b      	ldr	r3, [r3, #0]
20002e54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20002e58:	2b00      	cmp	r3, #0
20002e5a:	d018      	beq.n	20002e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20002e5c:	687b      	ldr	r3, [r7, #4]
20002e5e:	681b      	ldr	r3, [r3, #0]
20002e60:	681b      	ldr	r3, [r3, #0]
20002e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20002e66:	2b00      	cmp	r3, #0
20002e68:	d108      	bne.n	20002e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
20002e6a:	687b      	ldr	r3, [r7, #4]
20002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002e6e:	2b00      	cmp	r3, #0
20002e70:	d024      	beq.n	20002ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
20002e72:	687b      	ldr	r3, [r7, #4]
20002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002e76:	6878      	ldr	r0, [r7, #4]
20002e78:	4798      	blx	r3
20002e7a:	e01f      	b.n	20002ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
20002e7c:	687b      	ldr	r3, [r7, #4]
20002e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20002e80:	2b00      	cmp	r3, #0
20002e82:	d01b      	beq.n	20002ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
20002e84:	687b      	ldr	r3, [r7, #4]
20002e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20002e88:	6878      	ldr	r0, [r7, #4]
20002e8a:	4798      	blx	r3
20002e8c:	e016      	b.n	20002ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20002e8e:	687b      	ldr	r3, [r7, #4]
20002e90:	681b      	ldr	r3, [r3, #0]
20002e92:	681b      	ldr	r3, [r3, #0]
20002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20002e98:	2b00      	cmp	r3, #0
20002e9a:	d107      	bne.n	20002eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
20002e9c:	687b      	ldr	r3, [r7, #4]
20002e9e:	681b      	ldr	r3, [r3, #0]
20002ea0:	681a      	ldr	r2, [r3, #0]
20002ea2:	687b      	ldr	r3, [r7, #4]
20002ea4:	681b      	ldr	r3, [r3, #0]
20002ea6:	f022 0208 	bic.w	r2, r2, #8
20002eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
20002eac:	687b      	ldr	r3, [r7, #4]
20002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002eb0:	2b00      	cmp	r3, #0
20002eb2:	d003      	beq.n	20002ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
20002eb4:	687b      	ldr	r3, [r7, #4]
20002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002eb8:	6878      	ldr	r0, [r7, #4]
20002eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
20002ebc:	687b      	ldr	r3, [r7, #4]
20002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002ec0:	2220      	movs	r2, #32
20002ec2:	409a      	lsls	r2, r3
20002ec4:	68fb      	ldr	r3, [r7, #12]
20002ec6:	4013      	ands	r3, r2
20002ec8:	2b00      	cmp	r3, #0
20002eca:	f000 808f 	beq.w	20002fec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
20002ece:	687b      	ldr	r3, [r7, #4]
20002ed0:	681b      	ldr	r3, [r3, #0]
20002ed2:	681b      	ldr	r3, [r3, #0]
20002ed4:	f003 0310 	and.w	r3, r3, #16
20002ed8:	2b00      	cmp	r3, #0
20002eda:	f000 8087 	beq.w	20002fec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
20002ede:	687b      	ldr	r3, [r7, #4]
20002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002ee2:	2220      	movs	r2, #32
20002ee4:	409a      	lsls	r2, r3
20002ee6:	693b      	ldr	r3, [r7, #16]
20002ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
20002eea:	687b      	ldr	r3, [r7, #4]
20002eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20002ef0:	b2db      	uxtb	r3, r3
20002ef2:	2b05      	cmp	r3, #5
20002ef4:	d136      	bne.n	20002f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20002ef6:	687b      	ldr	r3, [r7, #4]
20002ef8:	681b      	ldr	r3, [r3, #0]
20002efa:	681a      	ldr	r2, [r3, #0]
20002efc:	687b      	ldr	r3, [r7, #4]
20002efe:	681b      	ldr	r3, [r3, #0]
20002f00:	f022 0216 	bic.w	r2, r2, #22
20002f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
20002f06:	687b      	ldr	r3, [r7, #4]
20002f08:	681b      	ldr	r3, [r3, #0]
20002f0a:	695a      	ldr	r2, [r3, #20]
20002f0c:	687b      	ldr	r3, [r7, #4]
20002f0e:	681b      	ldr	r3, [r3, #0]
20002f10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
20002f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20002f16:	687b      	ldr	r3, [r7, #4]
20002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20002f1a:	2b00      	cmp	r3, #0
20002f1c:	d103      	bne.n	20002f26 <HAL_DMA_IRQHandler+0x1da>
20002f1e:	687b      	ldr	r3, [r7, #4]
20002f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20002f22:	2b00      	cmp	r3, #0
20002f24:	d007      	beq.n	20002f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
20002f26:	687b      	ldr	r3, [r7, #4]
20002f28:	681b      	ldr	r3, [r3, #0]
20002f2a:	681a      	ldr	r2, [r3, #0]
20002f2c:	687b      	ldr	r3, [r7, #4]
20002f2e:	681b      	ldr	r3, [r3, #0]
20002f30:	f022 0208 	bic.w	r2, r2, #8
20002f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
20002f36:	687b      	ldr	r3, [r7, #4]
20002f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
20002f3a:	223f      	movs	r2, #63	@ 0x3f
20002f3c:	409a      	lsls	r2, r3
20002f3e:	693b      	ldr	r3, [r7, #16]
20002f40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002f42:	687b      	ldr	r3, [r7, #4]
20002f44:	2201      	movs	r2, #1
20002f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002f4a:	687b      	ldr	r3, [r7, #4]
20002f4c:	2200      	movs	r2, #0
20002f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
20002f52:	687b      	ldr	r3, [r7, #4]
20002f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20002f56:	2b00      	cmp	r3, #0
20002f58:	d07e      	beq.n	20003058 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
20002f5a:	687b      	ldr	r3, [r7, #4]
20002f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20002f5e:	6878      	ldr	r0, [r7, #4]
20002f60:	4798      	blx	r3
        }
        return;
20002f62:	e079      	b.n	20003058 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20002f64:	687b      	ldr	r3, [r7, #4]
20002f66:	681b      	ldr	r3, [r3, #0]
20002f68:	681b      	ldr	r3, [r3, #0]
20002f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20002f6e:	2b00      	cmp	r3, #0
20002f70:	d01d      	beq.n	20002fae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20002f72:	687b      	ldr	r3, [r7, #4]
20002f74:	681b      	ldr	r3, [r3, #0]
20002f76:	681b      	ldr	r3, [r3, #0]
20002f78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
20002f7c:	2b00      	cmp	r3, #0
20002f7e:	d10d      	bne.n	20002f9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
20002f80:	687b      	ldr	r3, [r7, #4]
20002f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20002f84:	2b00      	cmp	r3, #0
20002f86:	d031      	beq.n	20002fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
20002f88:	687b      	ldr	r3, [r7, #4]
20002f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20002f8c:	6878      	ldr	r0, [r7, #4]
20002f8e:	4798      	blx	r3
20002f90:	e02c      	b.n	20002fec <HAL_DMA_IRQHandler+0x2a0>
20002f92:	bf00      	nop
20002f94:	200003b0 	.word	0x200003b0
20002f98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
20002f9c:	687b      	ldr	r3, [r7, #4]
20002f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20002fa0:	2b00      	cmp	r3, #0
20002fa2:	d023      	beq.n	20002fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
20002fa4:	687b      	ldr	r3, [r7, #4]
20002fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20002fa8:	6878      	ldr	r0, [r7, #4]
20002faa:	4798      	blx	r3
20002fac:	e01e      	b.n	20002fec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20002fae:	687b      	ldr	r3, [r7, #4]
20002fb0:	681b      	ldr	r3, [r3, #0]
20002fb2:	681b      	ldr	r3, [r3, #0]
20002fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20002fb8:	2b00      	cmp	r3, #0
20002fba:	d10f      	bne.n	20002fdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
20002fbc:	687b      	ldr	r3, [r7, #4]
20002fbe:	681b      	ldr	r3, [r3, #0]
20002fc0:	681a      	ldr	r2, [r3, #0]
20002fc2:	687b      	ldr	r3, [r7, #4]
20002fc4:	681b      	ldr	r3, [r3, #0]
20002fc6:	f022 0210 	bic.w	r2, r2, #16
20002fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
20002fcc:	687b      	ldr	r3, [r7, #4]
20002fce:	2201      	movs	r2, #1
20002fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
20002fd4:	687b      	ldr	r3, [r7, #4]
20002fd6:	2200      	movs	r2, #0
20002fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
20002fdc:	687b      	ldr	r3, [r7, #4]
20002fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20002fe0:	2b00      	cmp	r3, #0
20002fe2:	d003      	beq.n	20002fec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
20002fe4:	687b      	ldr	r3, [r7, #4]
20002fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20002fe8:	6878      	ldr	r0, [r7, #4]
20002fea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20002fec:	687b      	ldr	r3, [r7, #4]
20002fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20002ff0:	2b00      	cmp	r3, #0
20002ff2:	d032      	beq.n	2000305a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20002ff4:	687b      	ldr	r3, [r7, #4]
20002ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20002ff8:	f003 0301 	and.w	r3, r3, #1
20002ffc:	2b00      	cmp	r3, #0
20002ffe:	d022      	beq.n	20003046 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
20003000:	687b      	ldr	r3, [r7, #4]
20003002:	2205      	movs	r2, #5
20003004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
20003008:	687b      	ldr	r3, [r7, #4]
2000300a:	681b      	ldr	r3, [r3, #0]
2000300c:	681a      	ldr	r2, [r3, #0]
2000300e:	687b      	ldr	r3, [r7, #4]
20003010:	681b      	ldr	r3, [r3, #0]
20003012:	f022 0201 	bic.w	r2, r2, #1
20003016:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
20003018:	68bb      	ldr	r3, [r7, #8]
2000301a:	3301      	adds	r3, #1
2000301c:	60bb      	str	r3, [r7, #8]
2000301e:	697a      	ldr	r2, [r7, #20]
20003020:	429a      	cmp	r2, r3
20003022:	d307      	bcc.n	20003034 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
20003024:	687b      	ldr	r3, [r7, #4]
20003026:	681b      	ldr	r3, [r3, #0]
20003028:	681b      	ldr	r3, [r3, #0]
2000302a:	f003 0301 	and.w	r3, r3, #1
2000302e:	2b00      	cmp	r3, #0
20003030:	d1f2      	bne.n	20003018 <HAL_DMA_IRQHandler+0x2cc>
20003032:	e000      	b.n	20003036 <HAL_DMA_IRQHandler+0x2ea>
          break;
20003034:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
20003036:	687b      	ldr	r3, [r7, #4]
20003038:	2201      	movs	r2, #1
2000303a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
2000303e:	687b      	ldr	r3, [r7, #4]
20003040:	2200      	movs	r2, #0
20003042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
20003046:	687b      	ldr	r3, [r7, #4]
20003048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000304a:	2b00      	cmp	r3, #0
2000304c:	d005      	beq.n	2000305a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
2000304e:	687b      	ldr	r3, [r7, #4]
20003050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20003052:	6878      	ldr	r0, [r7, #4]
20003054:	4798      	blx	r3
20003056:	e000      	b.n	2000305a <HAL_DMA_IRQHandler+0x30e>
        return;
20003058:	bf00      	nop
    }
  }
}
2000305a:	3718      	adds	r7, #24
2000305c:	46bd      	mov	sp, r7
2000305e:	bd80      	pop	{r7, pc}

20003060 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
20003060:	b480      	push	{r7}
20003062:	b087      	sub	sp, #28
20003064:	af00      	add	r7, sp, #0
20003066:	60f8      	str	r0, [r7, #12]
20003068:	460b      	mov	r3, r1
2000306a:	607a      	str	r2, [r7, #4]
2000306c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
2000306e:	2300      	movs	r3, #0
20003070:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
20003072:	68fb      	ldr	r3, [r7, #12]
20003074:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
20003078:	2b01      	cmp	r3, #1
2000307a:	d101      	bne.n	20003080 <HAL_DMA_RegisterCallback+0x20>
2000307c:	2302      	movs	r3, #2
2000307e:	e03d      	b.n	200030fc <HAL_DMA_RegisterCallback+0x9c>
20003080:	68fb      	ldr	r3, [r7, #12]
20003082:	2201      	movs	r2, #1
20003084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
20003088:	68fb      	ldr	r3, [r7, #12]
2000308a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
2000308e:	b2db      	uxtb	r3, r3
20003090:	2b01      	cmp	r3, #1
20003092:	d12c      	bne.n	200030ee <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
20003094:	7afb      	ldrb	r3, [r7, #11]
20003096:	2b05      	cmp	r3, #5
20003098:	d826      	bhi.n	200030e8 <HAL_DMA_RegisterCallback+0x88>
2000309a:	a201      	add	r2, pc, #4	@ (adr r2, 200030a0 <HAL_DMA_RegisterCallback+0x40>)
2000309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200030a0:	200030b9 	.word	0x200030b9
200030a4:	200030c1 	.word	0x200030c1
200030a8:	200030c9 	.word	0x200030c9
200030ac:	200030d1 	.word	0x200030d1
200030b0:	200030d9 	.word	0x200030d9
200030b4:	200030e1 	.word	0x200030e1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
200030b8:	68fb      	ldr	r3, [r7, #12]
200030ba:	687a      	ldr	r2, [r7, #4]
200030bc:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
200030be:	e018      	b.n	200030f2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
200030c0:	68fb      	ldr	r3, [r7, #12]
200030c2:	687a      	ldr	r2, [r7, #4]
200030c4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
200030c6:	e014      	b.n	200030f2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
200030c8:	68fb      	ldr	r3, [r7, #12]
200030ca:	687a      	ldr	r2, [r7, #4]
200030cc:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
200030ce:	e010      	b.n	200030f2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
200030d0:	68fb      	ldr	r3, [r7, #12]
200030d2:	687a      	ldr	r2, [r7, #4]
200030d4:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
200030d6:	e00c      	b.n	200030f2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
200030d8:	68fb      	ldr	r3, [r7, #12]
200030da:	687a      	ldr	r2, [r7, #4]
200030dc:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
200030de:	e008      	b.n	200030f2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
200030e0:	68fb      	ldr	r3, [r7, #12]
200030e2:	687a      	ldr	r2, [r7, #4]
200030e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
200030e6:	e004      	b.n	200030f2 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
200030e8:	2301      	movs	r3, #1
200030ea:	75fb      	strb	r3, [r7, #23]
      break;
200030ec:	e001      	b.n	200030f2 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
200030ee:	2301      	movs	r3, #1
200030f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
200030f2:	68fb      	ldr	r3, [r7, #12]
200030f4:	2200      	movs	r2, #0
200030f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
200030fa:	7dfb      	ldrb	r3, [r7, #23]
}
200030fc:	4618      	mov	r0, r3
200030fe:	371c      	adds	r7, #28
20003100:	46bd      	mov	sp, r7
20003102:	f85d 7b04 	ldr.w	r7, [sp], #4
20003106:	4770      	bx	lr

20003108 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
20003108:	b480      	push	{r7}
2000310a:	b085      	sub	sp, #20
2000310c:	af00      	add	r7, sp, #0
2000310e:	6078      	str	r0, [r7, #4]
20003110:	460b      	mov	r3, r1
20003112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
20003114:	2300      	movs	r3, #0
20003116:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
20003118:	687b      	ldr	r3, [r7, #4]
2000311a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
2000311e:	2b01      	cmp	r3, #1
20003120:	d101      	bne.n	20003126 <HAL_DMA_UnRegisterCallback+0x1e>
20003122:	2302      	movs	r3, #2
20003124:	e053      	b.n	200031ce <HAL_DMA_UnRegisterCallback+0xc6>
20003126:	687b      	ldr	r3, [r7, #4]
20003128:	2201      	movs	r2, #1
2000312a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
2000312e:	687b      	ldr	r3, [r7, #4]
20003130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20003134:	b2db      	uxtb	r3, r3
20003136:	2b01      	cmp	r3, #1
20003138:	d142      	bne.n	200031c0 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
2000313a:	78fb      	ldrb	r3, [r7, #3]
2000313c:	2b06      	cmp	r3, #6
2000313e:	d83c      	bhi.n	200031ba <HAL_DMA_UnRegisterCallback+0xb2>
20003140:	a201      	add	r2, pc, #4	@ (adr r2, 20003148 <HAL_DMA_UnRegisterCallback+0x40>)
20003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003146:	bf00      	nop
20003148:	20003165 	.word	0x20003165
2000314c:	2000316d 	.word	0x2000316d
20003150:	20003175 	.word	0x20003175
20003154:	2000317d 	.word	0x2000317d
20003158:	20003185 	.word	0x20003185
2000315c:	2000318d 	.word	0x2000318d
20003160:	20003195 	.word	0x20003195
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
20003164:	687b      	ldr	r3, [r7, #4]
20003166:	2200      	movs	r2, #0
20003168:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
2000316a:	e02b      	b.n	200031c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
2000316c:	687b      	ldr	r3, [r7, #4]
2000316e:	2200      	movs	r2, #0
20003170:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
20003172:	e027      	b.n	200031c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
20003174:	687b      	ldr	r3, [r7, #4]
20003176:	2200      	movs	r2, #0
20003178:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
2000317a:	e023      	b.n	200031c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
2000317c:	687b      	ldr	r3, [r7, #4]
2000317e:	2200      	movs	r2, #0
20003180:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
20003182:	e01f      	b.n	200031c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
20003184:	687b      	ldr	r3, [r7, #4]
20003186:	2200      	movs	r2, #0
20003188:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
2000318a:	e01b      	b.n	200031c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
2000318c:	687b      	ldr	r3, [r7, #4]
2000318e:	2200      	movs	r2, #0
20003190:	651a      	str	r2, [r3, #80]	@ 0x50
      break; 
20003192:	e017      	b.n	200031c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
20003194:	687b      	ldr	r3, [r7, #4]
20003196:	2200      	movs	r2, #0
20003198:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdma->XferHalfCpltCallback = NULL;
2000319a:	687b      	ldr	r3, [r7, #4]
2000319c:	2200      	movs	r2, #0
2000319e:	641a      	str	r2, [r3, #64]	@ 0x40
      hdma->XferM1CpltCallback = NULL;
200031a0:	687b      	ldr	r3, [r7, #4]
200031a2:	2200      	movs	r2, #0
200031a4:	645a      	str	r2, [r3, #68]	@ 0x44
      hdma->XferM1HalfCpltCallback = NULL;
200031a6:	687b      	ldr	r3, [r7, #4]
200031a8:	2200      	movs	r2, #0
200031aa:	649a      	str	r2, [r3, #72]	@ 0x48
      hdma->XferErrorCallback = NULL;
200031ac:	687b      	ldr	r3, [r7, #4]
200031ae:	2200      	movs	r2, #0
200031b0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hdma->XferAbortCallback = NULL;
200031b2:	687b      	ldr	r3, [r7, #4]
200031b4:	2200      	movs	r2, #0
200031b6:	651a      	str	r2, [r3, #80]	@ 0x50
      break; 
200031b8:	e004      	b.n	200031c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
200031ba:	2301      	movs	r3, #1
200031bc:	73fb      	strb	r3, [r7, #15]
      break;
200031be:	e001      	b.n	200031c4 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
200031c0:	2301      	movs	r3, #1
200031c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
200031c4:	687b      	ldr	r3, [r7, #4]
200031c6:	2200      	movs	r2, #0
200031c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
200031cc:	7bfb      	ldrb	r3, [r7, #15]
}
200031ce:	4618      	mov	r0, r3
200031d0:	3714      	adds	r7, #20
200031d2:	46bd      	mov	sp, r7
200031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200031d8:	4770      	bx	lr
200031da:	bf00      	nop

200031dc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
200031dc:	b480      	push	{r7}
200031de:	b083      	sub	sp, #12
200031e0:	af00      	add	r7, sp, #0
200031e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
200031e4:	687b      	ldr	r3, [r7, #4]
200031e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
200031ea:	b2db      	uxtb	r3, r3
}
200031ec:	4618      	mov	r0, r3
200031ee:	370c      	adds	r7, #12
200031f0:	46bd      	mov	sp, r7
200031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
200031f6:	4770      	bx	lr

200031f8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
200031f8:	b480      	push	{r7}
200031fa:	b083      	sub	sp, #12
200031fc:	af00      	add	r7, sp, #0
200031fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
20003200:	687b      	ldr	r3, [r7, #4]
20003202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
20003204:	4618      	mov	r0, r3
20003206:	370c      	adds	r7, #12
20003208:	46bd      	mov	sp, r7
2000320a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000320e:	4770      	bx	lr

20003210 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20003210:	b480      	push	{r7}
20003212:	b085      	sub	sp, #20
20003214:	af00      	add	r7, sp, #0
20003216:	60f8      	str	r0, [r7, #12]
20003218:	60b9      	str	r1, [r7, #8]
2000321a:	607a      	str	r2, [r7, #4]
2000321c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
2000321e:	68fb      	ldr	r3, [r7, #12]
20003220:	681b      	ldr	r3, [r3, #0]
20003222:	681a      	ldr	r2, [r3, #0]
20003224:	68fb      	ldr	r3, [r7, #12]
20003226:	681b      	ldr	r3, [r3, #0]
20003228:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
2000322c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
2000322e:	68fb      	ldr	r3, [r7, #12]
20003230:	681b      	ldr	r3, [r3, #0]
20003232:	683a      	ldr	r2, [r7, #0]
20003234:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20003236:	68fb      	ldr	r3, [r7, #12]
20003238:	689b      	ldr	r3, [r3, #8]
2000323a:	2b40      	cmp	r3, #64	@ 0x40
2000323c:	d108      	bne.n	20003250 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
2000323e:	68fb      	ldr	r3, [r7, #12]
20003240:	681b      	ldr	r3, [r3, #0]
20003242:	687a      	ldr	r2, [r7, #4]
20003244:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
20003246:	68fb      	ldr	r3, [r7, #12]
20003248:	681b      	ldr	r3, [r3, #0]
2000324a:	68ba      	ldr	r2, [r7, #8]
2000324c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
2000324e:	e007      	b.n	20003260 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
20003250:	68fb      	ldr	r3, [r7, #12]
20003252:	681b      	ldr	r3, [r3, #0]
20003254:	68ba      	ldr	r2, [r7, #8]
20003256:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
20003258:	68fb      	ldr	r3, [r7, #12]
2000325a:	681b      	ldr	r3, [r3, #0]
2000325c:	687a      	ldr	r2, [r7, #4]
2000325e:	60da      	str	r2, [r3, #12]
}
20003260:	bf00      	nop
20003262:	3714      	adds	r7, #20
20003264:	46bd      	mov	sp, r7
20003266:	f85d 7b04 	ldr.w	r7, [sp], #4
2000326a:	4770      	bx	lr

2000326c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
2000326c:	b480      	push	{r7}
2000326e:	b085      	sub	sp, #20
20003270:	af00      	add	r7, sp, #0
20003272:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20003274:	687b      	ldr	r3, [r7, #4]
20003276:	681b      	ldr	r3, [r3, #0]
20003278:	b2db      	uxtb	r3, r3
2000327a:	3b10      	subs	r3, #16
2000327c:	4a14      	ldr	r2, [pc, #80]	@ (200032d0 <DMA_CalcBaseAndBitshift+0x64>)
2000327e:	fba2 2303 	umull	r2, r3, r2, r3
20003282:	091b      	lsrs	r3, r3, #4
20003284:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
20003286:	4a13      	ldr	r2, [pc, #76]	@ (200032d4 <DMA_CalcBaseAndBitshift+0x68>)
20003288:	68fb      	ldr	r3, [r7, #12]
2000328a:	4413      	add	r3, r2
2000328c:	781b      	ldrb	r3, [r3, #0]
2000328e:	461a      	mov	r2, r3
20003290:	687b      	ldr	r3, [r7, #4]
20003292:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
20003294:	68fb      	ldr	r3, [r7, #12]
20003296:	2b03      	cmp	r3, #3
20003298:	d909      	bls.n	200032ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
2000329a:	687b      	ldr	r3, [r7, #4]
2000329c:	681b      	ldr	r3, [r3, #0]
2000329e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
200032a2:	f023 0303 	bic.w	r3, r3, #3
200032a6:	1d1a      	adds	r2, r3, #4
200032a8:	687b      	ldr	r3, [r7, #4]
200032aa:	659a      	str	r2, [r3, #88]	@ 0x58
200032ac:	e007      	b.n	200032be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
200032ae:	687b      	ldr	r3, [r7, #4]
200032b0:	681b      	ldr	r3, [r3, #0]
200032b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
200032b6:	f023 0303 	bic.w	r3, r3, #3
200032ba:	687a      	ldr	r2, [r7, #4]
200032bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
200032be:	687b      	ldr	r3, [r7, #4]
200032c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
200032c2:	4618      	mov	r0, r3
200032c4:	3714      	adds	r7, #20
200032c6:	46bd      	mov	sp, r7
200032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
200032cc:	4770      	bx	lr
200032ce:	bf00      	nop
200032d0:	aaaaaaab 	.word	0xaaaaaaab
200032d4:	2000a650 	.word	0x2000a650

200032d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
200032d8:	b480      	push	{r7}
200032da:	b085      	sub	sp, #20
200032dc:	af00      	add	r7, sp, #0
200032de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
200032e0:	2300      	movs	r3, #0
200032e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
200032e4:	687b      	ldr	r3, [r7, #4]
200032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
200032e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
200032ea:	687b      	ldr	r3, [r7, #4]
200032ec:	699b      	ldr	r3, [r3, #24]
200032ee:	2b00      	cmp	r3, #0
200032f0:	d11f      	bne.n	20003332 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
200032f2:	68bb      	ldr	r3, [r7, #8]
200032f4:	2b03      	cmp	r3, #3
200032f6:	d856      	bhi.n	200033a6 <DMA_CheckFifoParam+0xce>
200032f8:	a201      	add	r2, pc, #4	@ (adr r2, 20003300 <DMA_CheckFifoParam+0x28>)
200032fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200032fe:	bf00      	nop
20003300:	20003311 	.word	0x20003311
20003304:	20003323 	.word	0x20003323
20003308:	20003311 	.word	0x20003311
2000330c:	200033a7 	.word	0x200033a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20003310:	687b      	ldr	r3, [r7, #4]
20003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20003314:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20003318:	2b00      	cmp	r3, #0
2000331a:	d046      	beq.n	200033aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
2000331c:	2301      	movs	r3, #1
2000331e:	73fb      	strb	r3, [r7, #15]
      }
      break;
20003320:	e043      	b.n	200033aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
20003322:	687b      	ldr	r3, [r7, #4]
20003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20003326:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
2000332a:	d140      	bne.n	200033ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
2000332c:	2301      	movs	r3, #1
2000332e:	73fb      	strb	r3, [r7, #15]
      }
      break;
20003330:	e03d      	b.n	200033ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
20003332:	687b      	ldr	r3, [r7, #4]
20003334:	699b      	ldr	r3, [r3, #24]
20003336:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2000333a:	d121      	bne.n	20003380 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
2000333c:	68bb      	ldr	r3, [r7, #8]
2000333e:	2b03      	cmp	r3, #3
20003340:	d837      	bhi.n	200033b2 <DMA_CheckFifoParam+0xda>
20003342:	a201      	add	r2, pc, #4	@ (adr r2, 20003348 <DMA_CheckFifoParam+0x70>)
20003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003348:	20003359 	.word	0x20003359
2000334c:	2000335f 	.word	0x2000335f
20003350:	20003359 	.word	0x20003359
20003354:	20003371 	.word	0x20003371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
20003358:	2301      	movs	r3, #1
2000335a:	73fb      	strb	r3, [r7, #15]
      break;
2000335c:	e030      	b.n	200033c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
2000335e:	687b      	ldr	r3, [r7, #4]
20003360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20003362:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20003366:	2b00      	cmp	r3, #0
20003368:	d025      	beq.n	200033b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
2000336a:	2301      	movs	r3, #1
2000336c:	73fb      	strb	r3, [r7, #15]
      }
      break;
2000336e:	e022      	b.n	200033b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
20003370:	687b      	ldr	r3, [r7, #4]
20003372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20003374:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
20003378:	d11f      	bne.n	200033ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
2000337a:	2301      	movs	r3, #1
2000337c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
2000337e:	e01c      	b.n	200033ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
20003380:	68bb      	ldr	r3, [r7, #8]
20003382:	2b02      	cmp	r3, #2
20003384:	d903      	bls.n	2000338e <DMA_CheckFifoParam+0xb6>
20003386:	68bb      	ldr	r3, [r7, #8]
20003388:	2b03      	cmp	r3, #3
2000338a:	d003      	beq.n	20003394 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
2000338c:	e018      	b.n	200033c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
2000338e:	2301      	movs	r3, #1
20003390:	73fb      	strb	r3, [r7, #15]
      break;
20003392:	e015      	b.n	200033c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20003394:	687b      	ldr	r3, [r7, #4]
20003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20003398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
2000339c:	2b00      	cmp	r3, #0
2000339e:	d00e      	beq.n	200033be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
200033a0:	2301      	movs	r3, #1
200033a2:	73fb      	strb	r3, [r7, #15]
      break;
200033a4:	e00b      	b.n	200033be <DMA_CheckFifoParam+0xe6>
      break;
200033a6:	bf00      	nop
200033a8:	e00a      	b.n	200033c0 <DMA_CheckFifoParam+0xe8>
      break;
200033aa:	bf00      	nop
200033ac:	e008      	b.n	200033c0 <DMA_CheckFifoParam+0xe8>
      break;
200033ae:	bf00      	nop
200033b0:	e006      	b.n	200033c0 <DMA_CheckFifoParam+0xe8>
      break;
200033b2:	bf00      	nop
200033b4:	e004      	b.n	200033c0 <DMA_CheckFifoParam+0xe8>
      break;
200033b6:	bf00      	nop
200033b8:	e002      	b.n	200033c0 <DMA_CheckFifoParam+0xe8>
      break;   
200033ba:	bf00      	nop
200033bc:	e000      	b.n	200033c0 <DMA_CheckFifoParam+0xe8>
      break;
200033be:	bf00      	nop
    }
  } 
  
  return status; 
200033c0:	7bfb      	ldrb	r3, [r7, #15]
}
200033c2:	4618      	mov	r0, r3
200033c4:	3714      	adds	r7, #20
200033c6:	46bd      	mov	sp, r7
200033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
200033cc:	4770      	bx	lr
200033ce:	bf00      	nop

200033d0 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
200033d0:	b580      	push	{r7, lr}
200033d2:	b086      	sub	sp, #24
200033d4:	af00      	add	r7, sp, #0
200033d6:	60f8      	str	r0, [r7, #12]
200033d8:	60b9      	str	r1, [r7, #8]
200033da:	607a      	str	r2, [r7, #4]
200033dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200033de:	2300      	movs	r3, #0
200033e0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
200033e2:	68fb      	ldr	r3, [r7, #12]
200033e4:	689b      	ldr	r3, [r3, #8]
200033e6:	2b80      	cmp	r3, #128	@ 0x80
200033e8:	d106      	bne.n	200033f8 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
200033ea:	68fb      	ldr	r3, [r7, #12]
200033ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
200033f0:	655a      	str	r2, [r3, #84]	@ 0x54
    status = HAL_ERROR;
200033f2:	2301      	movs	r3, #1
200033f4:	75fb      	strb	r3, [r7, #23]
200033f6:	e031      	b.n	2000345c <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
200033f8:	68fb      	ldr	r3, [r7, #12]
200033fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
200033fe:	2b01      	cmp	r3, #1
20003400:	d101      	bne.n	20003406 <HAL_DMAEx_MultiBufferStart+0x36>
20003402:	2302      	movs	r3, #2
20003404:	e02b      	b.n	2000345e <HAL_DMAEx_MultiBufferStart+0x8e>
20003406:	68fb      	ldr	r3, [r7, #12]
20003408:	2201      	movs	r2, #1
2000340a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
2000340e:	68fb      	ldr	r3, [r7, #12]
20003410:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
20003414:	b2db      	uxtb	r3, r3
20003416:	2b01      	cmp	r3, #1
20003418:	d11e      	bne.n	20003458 <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
2000341a:	68fb      	ldr	r3, [r7, #12]
2000341c:	2202      	movs	r2, #2
2000341e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
20003422:	68fb      	ldr	r3, [r7, #12]
20003424:	681b      	ldr	r3, [r3, #0]
20003426:	681a      	ldr	r2, [r3, #0]
20003428:	68fb      	ldr	r3, [r7, #12]
2000342a:	681b      	ldr	r3, [r3, #0]
2000342c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
20003430:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
20003432:	68fb      	ldr	r3, [r7, #12]
20003434:	681b      	ldr	r3, [r3, #0]
20003436:	683a      	ldr	r2, [r7, #0]
20003438:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
2000343a:	6a3b      	ldr	r3, [r7, #32]
2000343c:	687a      	ldr	r2, [r7, #4]
2000343e:	68b9      	ldr	r1, [r7, #8]
20003440:	68f8      	ldr	r0, [r7, #12]
20003442:	f001 f973 	bl	2000472c <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
20003446:	68fb      	ldr	r3, [r7, #12]
20003448:	681b      	ldr	r3, [r3, #0]
2000344a:	681a      	ldr	r2, [r3, #0]
2000344c:	68fb      	ldr	r3, [r7, #12]
2000344e:	681b      	ldr	r3, [r3, #0]
20003450:	f042 0201 	orr.w	r2, r2, #1
20003454:	601a      	str	r2, [r3, #0]
20003456:	e001      	b.n	2000345c <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
20003458:	2302      	movs	r3, #2
2000345a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
2000345c:	7dfb      	ldrb	r3, [r7, #23]
}
2000345e:	4618      	mov	r0, r3
20003460:	3718      	adds	r7, #24
20003462:	46bd      	mov	sp, r7
20003464:	bd80      	pop	{r7, pc}
	...

20003468 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
20003468:	b580      	push	{r7, lr}
2000346a:	b086      	sub	sp, #24
2000346c:	af00      	add	r7, sp, #0
2000346e:	60f8      	str	r0, [r7, #12]
20003470:	60b9      	str	r1, [r7, #8]
20003472:	607a      	str	r2, [r7, #4]
20003474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20003476:	2300      	movs	r3, #0
20003478:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
2000347a:	68fb      	ldr	r3, [r7, #12]
2000347c:	689b      	ldr	r3, [r3, #8]
2000347e:	2b80      	cmp	r3, #128	@ 0x80
20003480:	d106      	bne.n	20003490 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20003482:	68fb      	ldr	r3, [r7, #12]
20003484:	f44f 7280 	mov.w	r2, #256	@ 0x100
20003488:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
2000348a:	2301      	movs	r3, #1
2000348c:	f001 b911 	b.w	200046b2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
20003490:	68fb      	ldr	r3, [r7, #12]
20003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
20003494:	2b00      	cmp	r3, #0
20003496:	d007      	beq.n	200034a8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
20003498:	68fb      	ldr	r3, [r7, #12]
2000349a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2000349c:	2b00      	cmp	r3, #0
2000349e:	d003      	beq.n	200034a8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
200034a0:	68fb      	ldr	r3, [r7, #12]
200034a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
200034a4:	2b00      	cmp	r3, #0
200034a6:	d105      	bne.n	200034b4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
200034a8:	68fb      	ldr	r3, [r7, #12]
200034aa:	2240      	movs	r2, #64	@ 0x40
200034ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
200034ae:	2301      	movs	r3, #1
200034b0:	f001 b8ff 	b.w	200046b2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
200034b4:	68fb      	ldr	r3, [r7, #12]
200034b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
200034ba:	2b01      	cmp	r3, #1
200034bc:	d102      	bne.n	200034c4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
200034be:	2302      	movs	r3, #2
200034c0:	f001 b8f7 	b.w	200046b2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
200034c4:	68fb      	ldr	r3, [r7, #12]
200034c6:	2201      	movs	r2, #1
200034c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
200034cc:	68fb      	ldr	r3, [r7, #12]
200034ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
200034d2:	b2db      	uxtb	r3, r3
200034d4:	2b01      	cmp	r3, #1
200034d6:	f041 80e5 	bne.w	200046a4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
200034da:	68fb      	ldr	r3, [r7, #12]
200034dc:	2202      	movs	r2, #2
200034de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
200034e2:	68fb      	ldr	r3, [r7, #12]
200034e4:	2200      	movs	r2, #0
200034e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
200034e8:	68fb      	ldr	r3, [r7, #12]
200034ea:	681b      	ldr	r3, [r3, #0]
200034ec:	681a      	ldr	r2, [r3, #0]
200034ee:	68fb      	ldr	r3, [r7, #12]
200034f0:	681b      	ldr	r3, [r3, #0]
200034f2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
200034f6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
200034f8:	68fb      	ldr	r3, [r7, #12]
200034fa:	681b      	ldr	r3, [r3, #0]
200034fc:	683a      	ldr	r2, [r7, #0]
200034fe:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
20003500:	6a3b      	ldr	r3, [r7, #32]
20003502:	687a      	ldr	r2, [r7, #4]
20003504:	68b9      	ldr	r1, [r7, #8]
20003506:	68f8      	ldr	r0, [r7, #12]
20003508:	f001 f910 	bl	2000472c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
2000350c:	68fb      	ldr	r3, [r7, #12]
2000350e:	681b      	ldr	r3, [r3, #0]
20003510:	461a      	mov	r2, r3
20003512:	4b8d      	ldr	r3, [pc, #564]	@ (20003748 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
20003514:	429a      	cmp	r2, r3
20003516:	d960      	bls.n	200035da <HAL_DMAEx_MultiBufferStart_IT+0x172>
20003518:	68fb      	ldr	r3, [r7, #12]
2000351a:	681b      	ldr	r3, [r3, #0]
2000351c:	4a8b      	ldr	r2, [pc, #556]	@ (2000374c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
2000351e:	4293      	cmp	r3, r2
20003520:	d057      	beq.n	200035d2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
20003522:	68fb      	ldr	r3, [r7, #12]
20003524:	681b      	ldr	r3, [r3, #0]
20003526:	4a8a      	ldr	r2, [pc, #552]	@ (20003750 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
20003528:	4293      	cmp	r3, r2
2000352a:	d050      	beq.n	200035ce <HAL_DMAEx_MultiBufferStart_IT+0x166>
2000352c:	68fb      	ldr	r3, [r7, #12]
2000352e:	681b      	ldr	r3, [r3, #0]
20003530:	4a88      	ldr	r2, [pc, #544]	@ (20003754 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
20003532:	4293      	cmp	r3, r2
20003534:	d049      	beq.n	200035ca <HAL_DMAEx_MultiBufferStart_IT+0x162>
20003536:	68fb      	ldr	r3, [r7, #12]
20003538:	681b      	ldr	r3, [r3, #0]
2000353a:	4a87      	ldr	r2, [pc, #540]	@ (20003758 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
2000353c:	4293      	cmp	r3, r2
2000353e:	d042      	beq.n	200035c6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
20003540:	68fb      	ldr	r3, [r7, #12]
20003542:	681b      	ldr	r3, [r3, #0]
20003544:	4a85      	ldr	r2, [pc, #532]	@ (2000375c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
20003546:	4293      	cmp	r3, r2
20003548:	d03a      	beq.n	200035c0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
2000354a:	68fb      	ldr	r3, [r7, #12]
2000354c:	681b      	ldr	r3, [r3, #0]
2000354e:	4a84      	ldr	r2, [pc, #528]	@ (20003760 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
20003550:	4293      	cmp	r3, r2
20003552:	d032      	beq.n	200035ba <HAL_DMAEx_MultiBufferStart_IT+0x152>
20003554:	68fb      	ldr	r3, [r7, #12]
20003556:	681b      	ldr	r3, [r3, #0]
20003558:	4a82      	ldr	r2, [pc, #520]	@ (20003764 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
2000355a:	4293      	cmp	r3, r2
2000355c:	d02a      	beq.n	200035b4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
2000355e:	68fb      	ldr	r3, [r7, #12]
20003560:	681b      	ldr	r3, [r3, #0]
20003562:	4a81      	ldr	r2, [pc, #516]	@ (20003768 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
20003564:	4293      	cmp	r3, r2
20003566:	d022      	beq.n	200035ae <HAL_DMAEx_MultiBufferStart_IT+0x146>
20003568:	68fb      	ldr	r3, [r7, #12]
2000356a:	681b      	ldr	r3, [r3, #0]
2000356c:	4a7f      	ldr	r2, [pc, #508]	@ (2000376c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
2000356e:	4293      	cmp	r3, r2
20003570:	d01a      	beq.n	200035a8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
20003572:	68fb      	ldr	r3, [r7, #12]
20003574:	681b      	ldr	r3, [r3, #0]
20003576:	4a7e      	ldr	r2, [pc, #504]	@ (20003770 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
20003578:	4293      	cmp	r3, r2
2000357a:	d012      	beq.n	200035a2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
2000357c:	68fb      	ldr	r3, [r7, #12]
2000357e:	681b      	ldr	r3, [r3, #0]
20003580:	4a7c      	ldr	r2, [pc, #496]	@ (20003774 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
20003582:	4293      	cmp	r3, r2
20003584:	d00a      	beq.n	2000359c <HAL_DMAEx_MultiBufferStart_IT+0x134>
20003586:	68fb      	ldr	r3, [r7, #12]
20003588:	681b      	ldr	r3, [r3, #0]
2000358a:	4a7b      	ldr	r2, [pc, #492]	@ (20003778 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
2000358c:	4293      	cmp	r3, r2
2000358e:	d102      	bne.n	20003596 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
20003590:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
20003594:	e01e      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003596:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
2000359a:	e01b      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2000359c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
200035a0:	e018      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200035a2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
200035a6:	e015      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200035a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
200035ac:	e012      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200035ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
200035b2:	e00f      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200035b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
200035b8:	e00c      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200035ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
200035be:	e009      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200035c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
200035c4:	e006      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200035c6:	2320      	movs	r3, #32
200035c8:	e004      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200035ca:	2320      	movs	r3, #32
200035cc:	e002      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200035ce:	2320      	movs	r3, #32
200035d0:	e000      	b.n	200035d4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200035d2:	2320      	movs	r3, #32
200035d4:	4a69      	ldr	r2, [pc, #420]	@ (2000377c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
200035d6:	60d3      	str	r3, [r2, #12]
200035d8:	e14f      	b.n	2000387a <HAL_DMAEx_MultiBufferStart_IT+0x412>
200035da:	68fb      	ldr	r3, [r7, #12]
200035dc:	681b      	ldr	r3, [r3, #0]
200035de:	461a      	mov	r2, r3
200035e0:	4b67      	ldr	r3, [pc, #412]	@ (20003780 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
200035e2:	429a      	cmp	r2, r3
200035e4:	d960      	bls.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
200035e6:	68fb      	ldr	r3, [r7, #12]
200035e8:	681b      	ldr	r3, [r3, #0]
200035ea:	4a58      	ldr	r2, [pc, #352]	@ (2000374c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
200035ec:	4293      	cmp	r3, r2
200035ee:	d057      	beq.n	200036a0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
200035f0:	68fb      	ldr	r3, [r7, #12]
200035f2:	681b      	ldr	r3, [r3, #0]
200035f4:	4a56      	ldr	r2, [pc, #344]	@ (20003750 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
200035f6:	4293      	cmp	r3, r2
200035f8:	d050      	beq.n	2000369c <HAL_DMAEx_MultiBufferStart_IT+0x234>
200035fa:	68fb      	ldr	r3, [r7, #12]
200035fc:	681b      	ldr	r3, [r3, #0]
200035fe:	4a55      	ldr	r2, [pc, #340]	@ (20003754 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
20003600:	4293      	cmp	r3, r2
20003602:	d049      	beq.n	20003698 <HAL_DMAEx_MultiBufferStart_IT+0x230>
20003604:	68fb      	ldr	r3, [r7, #12]
20003606:	681b      	ldr	r3, [r3, #0]
20003608:	4a53      	ldr	r2, [pc, #332]	@ (20003758 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
2000360a:	4293      	cmp	r3, r2
2000360c:	d042      	beq.n	20003694 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
2000360e:	68fb      	ldr	r3, [r7, #12]
20003610:	681b      	ldr	r3, [r3, #0]
20003612:	4a52      	ldr	r2, [pc, #328]	@ (2000375c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
20003614:	4293      	cmp	r3, r2
20003616:	d03a      	beq.n	2000368e <HAL_DMAEx_MultiBufferStart_IT+0x226>
20003618:	68fb      	ldr	r3, [r7, #12]
2000361a:	681b      	ldr	r3, [r3, #0]
2000361c:	4a50      	ldr	r2, [pc, #320]	@ (20003760 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
2000361e:	4293      	cmp	r3, r2
20003620:	d032      	beq.n	20003688 <HAL_DMAEx_MultiBufferStart_IT+0x220>
20003622:	68fb      	ldr	r3, [r7, #12]
20003624:	681b      	ldr	r3, [r3, #0]
20003626:	4a4f      	ldr	r2, [pc, #316]	@ (20003764 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
20003628:	4293      	cmp	r3, r2
2000362a:	d02a      	beq.n	20003682 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
2000362c:	68fb      	ldr	r3, [r7, #12]
2000362e:	681b      	ldr	r3, [r3, #0]
20003630:	4a4d      	ldr	r2, [pc, #308]	@ (20003768 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
20003632:	4293      	cmp	r3, r2
20003634:	d022      	beq.n	2000367c <HAL_DMAEx_MultiBufferStart_IT+0x214>
20003636:	68fb      	ldr	r3, [r7, #12]
20003638:	681b      	ldr	r3, [r3, #0]
2000363a:	4a4c      	ldr	r2, [pc, #304]	@ (2000376c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
2000363c:	4293      	cmp	r3, r2
2000363e:	d01a      	beq.n	20003676 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
20003640:	68fb      	ldr	r3, [r7, #12]
20003642:	681b      	ldr	r3, [r3, #0]
20003644:	4a4a      	ldr	r2, [pc, #296]	@ (20003770 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
20003646:	4293      	cmp	r3, r2
20003648:	d012      	beq.n	20003670 <HAL_DMAEx_MultiBufferStart_IT+0x208>
2000364a:	68fb      	ldr	r3, [r7, #12]
2000364c:	681b      	ldr	r3, [r3, #0]
2000364e:	4a49      	ldr	r2, [pc, #292]	@ (20003774 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
20003650:	4293      	cmp	r3, r2
20003652:	d00a      	beq.n	2000366a <HAL_DMAEx_MultiBufferStart_IT+0x202>
20003654:	68fb      	ldr	r3, [r7, #12]
20003656:	681b      	ldr	r3, [r3, #0]
20003658:	4a47      	ldr	r2, [pc, #284]	@ (20003778 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
2000365a:	4293      	cmp	r3, r2
2000365c:	d102      	bne.n	20003664 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
2000365e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
20003662:	e01e      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003664:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
20003668:	e01b      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000366a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
2000366e:	e018      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003670:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
20003674:	e015      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003676:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
2000367a:	e012      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000367c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20003680:	e00f      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003682:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20003686:	e00c      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003688:	f44f 6300 	mov.w	r3, #2048	@ 0x800
2000368c:	e009      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000368e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20003692:	e006      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003694:	2320      	movs	r3, #32
20003696:	e004      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003698:	2320      	movs	r3, #32
2000369a:	e002      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000369c:	2320      	movs	r3, #32
2000369e:	e000      	b.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200036a0:	2320      	movs	r3, #32
200036a2:	4a36      	ldr	r2, [pc, #216]	@ (2000377c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
200036a4:	6093      	str	r3, [r2, #8]
200036a6:	e0e8      	b.n	2000387a <HAL_DMAEx_MultiBufferStart_IT+0x412>
200036a8:	68fb      	ldr	r3, [r7, #12]
200036aa:	681b      	ldr	r3, [r3, #0]
200036ac:	461a      	mov	r2, r3
200036ae:	4b35      	ldr	r3, [pc, #212]	@ (20003784 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
200036b0:	429a      	cmp	r2, r3
200036b2:	f240 8082 	bls.w	200037ba <HAL_DMAEx_MultiBufferStart_IT+0x352>
200036b6:	68fb      	ldr	r3, [r7, #12]
200036b8:	681b      	ldr	r3, [r3, #0]
200036ba:	4a24      	ldr	r2, [pc, #144]	@ (2000374c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
200036bc:	4293      	cmp	r3, r2
200036be:	d078      	beq.n	200037b2 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
200036c0:	68fb      	ldr	r3, [r7, #12]
200036c2:	681b      	ldr	r3, [r3, #0]
200036c4:	4a22      	ldr	r2, [pc, #136]	@ (20003750 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
200036c6:	4293      	cmp	r3, r2
200036c8:	d071      	beq.n	200037ae <HAL_DMAEx_MultiBufferStart_IT+0x346>
200036ca:	68fb      	ldr	r3, [r7, #12]
200036cc:	681b      	ldr	r3, [r3, #0]
200036ce:	4a21      	ldr	r2, [pc, #132]	@ (20003754 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
200036d0:	4293      	cmp	r3, r2
200036d2:	d06a      	beq.n	200037aa <HAL_DMAEx_MultiBufferStart_IT+0x342>
200036d4:	68fb      	ldr	r3, [r7, #12]
200036d6:	681b      	ldr	r3, [r3, #0]
200036d8:	4a1f      	ldr	r2, [pc, #124]	@ (20003758 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
200036da:	4293      	cmp	r3, r2
200036dc:	d063      	beq.n	200037a6 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
200036de:	68fb      	ldr	r3, [r7, #12]
200036e0:	681b      	ldr	r3, [r3, #0]
200036e2:	4a1e      	ldr	r2, [pc, #120]	@ (2000375c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
200036e4:	4293      	cmp	r3, r2
200036e6:	d05b      	beq.n	200037a0 <HAL_DMAEx_MultiBufferStart_IT+0x338>
200036e8:	68fb      	ldr	r3, [r7, #12]
200036ea:	681b      	ldr	r3, [r3, #0]
200036ec:	4a1c      	ldr	r2, [pc, #112]	@ (20003760 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
200036ee:	4293      	cmp	r3, r2
200036f0:	d053      	beq.n	2000379a <HAL_DMAEx_MultiBufferStart_IT+0x332>
200036f2:	68fb      	ldr	r3, [r7, #12]
200036f4:	681b      	ldr	r3, [r3, #0]
200036f6:	4a1b      	ldr	r2, [pc, #108]	@ (20003764 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
200036f8:	4293      	cmp	r3, r2
200036fa:	d04b      	beq.n	20003794 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
200036fc:	68fb      	ldr	r3, [r7, #12]
200036fe:	681b      	ldr	r3, [r3, #0]
20003700:	4a19      	ldr	r2, [pc, #100]	@ (20003768 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
20003702:	4293      	cmp	r3, r2
20003704:	d043      	beq.n	2000378e <HAL_DMAEx_MultiBufferStart_IT+0x326>
20003706:	68fb      	ldr	r3, [r7, #12]
20003708:	681b      	ldr	r3, [r3, #0]
2000370a:	4a18      	ldr	r2, [pc, #96]	@ (2000376c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
2000370c:	4293      	cmp	r3, r2
2000370e:	d03b      	beq.n	20003788 <HAL_DMAEx_MultiBufferStart_IT+0x320>
20003710:	68fb      	ldr	r3, [r7, #12]
20003712:	681b      	ldr	r3, [r3, #0]
20003714:	4a16      	ldr	r2, [pc, #88]	@ (20003770 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
20003716:	4293      	cmp	r3, r2
20003718:	d012      	beq.n	20003740 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
2000371a:	68fb      	ldr	r3, [r7, #12]
2000371c:	681b      	ldr	r3, [r3, #0]
2000371e:	4a15      	ldr	r2, [pc, #84]	@ (20003774 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
20003720:	4293      	cmp	r3, r2
20003722:	d00a      	beq.n	2000373a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
20003724:	68fb      	ldr	r3, [r7, #12]
20003726:	681b      	ldr	r3, [r3, #0]
20003728:	4a13      	ldr	r2, [pc, #76]	@ (20003778 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
2000372a:	4293      	cmp	r3, r2
2000372c:	d102      	bne.n	20003734 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
2000372e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
20003732:	e03f      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003734:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
20003738:	e03c      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
2000373a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
2000373e:	e039      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003740:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
20003744:	e036      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003746:	bf00      	nop
20003748:	40026458 	.word	0x40026458
2000374c:	40026010 	.word	0x40026010
20003750:	40026410 	.word	0x40026410
20003754:	40026070 	.word	0x40026070
20003758:	40026470 	.word	0x40026470
2000375c:	40026028 	.word	0x40026028
20003760:	40026428 	.word	0x40026428
20003764:	40026088 	.word	0x40026088
20003768:	40026488 	.word	0x40026488
2000376c:	40026040 	.word	0x40026040
20003770:	40026440 	.word	0x40026440
20003774:	400260a0 	.word	0x400260a0
20003778:	400264a0 	.word	0x400264a0
2000377c:	40026400 	.word	0x40026400
20003780:	400260b8 	.word	0x400260b8
20003784:	40026058 	.word	0x40026058
20003788:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
2000378c:	e012      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
2000378e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20003792:	e00f      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003794:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20003798:	e00c      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
2000379a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
2000379e:	e009      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200037a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
200037a4:	e006      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200037a6:	2320      	movs	r3, #32
200037a8:	e004      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200037aa:	2320      	movs	r3, #32
200037ac:	e002      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200037ae:	2320      	movs	r3, #32
200037b0:	e000      	b.n	200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200037b2:	2320      	movs	r3, #32
200037b4:	4a8c      	ldr	r2, [pc, #560]	@ (200039e8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
200037b6:	60d3      	str	r3, [r2, #12]
200037b8:	e05f      	b.n	2000387a <HAL_DMAEx_MultiBufferStart_IT+0x412>
200037ba:	68fb      	ldr	r3, [r7, #12]
200037bc:	681b      	ldr	r3, [r3, #0]
200037be:	4a8b      	ldr	r2, [pc, #556]	@ (200039ec <HAL_DMAEx_MultiBufferStart_IT+0x584>)
200037c0:	4293      	cmp	r3, r2
200037c2:	d057      	beq.n	20003874 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
200037c4:	68fb      	ldr	r3, [r7, #12]
200037c6:	681b      	ldr	r3, [r3, #0]
200037c8:	4a89      	ldr	r2, [pc, #548]	@ (200039f0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
200037ca:	4293      	cmp	r3, r2
200037cc:	d050      	beq.n	20003870 <HAL_DMAEx_MultiBufferStart_IT+0x408>
200037ce:	68fb      	ldr	r3, [r7, #12]
200037d0:	681b      	ldr	r3, [r3, #0]
200037d2:	4a88      	ldr	r2, [pc, #544]	@ (200039f4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
200037d4:	4293      	cmp	r3, r2
200037d6:	d049      	beq.n	2000386c <HAL_DMAEx_MultiBufferStart_IT+0x404>
200037d8:	68fb      	ldr	r3, [r7, #12]
200037da:	681b      	ldr	r3, [r3, #0]
200037dc:	4a86      	ldr	r2, [pc, #536]	@ (200039f8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
200037de:	4293      	cmp	r3, r2
200037e0:	d042      	beq.n	20003868 <HAL_DMAEx_MultiBufferStart_IT+0x400>
200037e2:	68fb      	ldr	r3, [r7, #12]
200037e4:	681b      	ldr	r3, [r3, #0]
200037e6:	4a85      	ldr	r2, [pc, #532]	@ (200039fc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
200037e8:	4293      	cmp	r3, r2
200037ea:	d03a      	beq.n	20003862 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
200037ec:	68fb      	ldr	r3, [r7, #12]
200037ee:	681b      	ldr	r3, [r3, #0]
200037f0:	4a83      	ldr	r2, [pc, #524]	@ (20003a00 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
200037f2:	4293      	cmp	r3, r2
200037f4:	d032      	beq.n	2000385c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
200037f6:	68fb      	ldr	r3, [r7, #12]
200037f8:	681b      	ldr	r3, [r3, #0]
200037fa:	4a82      	ldr	r2, [pc, #520]	@ (20003a04 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
200037fc:	4293      	cmp	r3, r2
200037fe:	d02a      	beq.n	20003856 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
20003800:	68fb      	ldr	r3, [r7, #12]
20003802:	681b      	ldr	r3, [r3, #0]
20003804:	4a80      	ldr	r2, [pc, #512]	@ (20003a08 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
20003806:	4293      	cmp	r3, r2
20003808:	d022      	beq.n	20003850 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
2000380a:	68fb      	ldr	r3, [r7, #12]
2000380c:	681b      	ldr	r3, [r3, #0]
2000380e:	4a7f      	ldr	r2, [pc, #508]	@ (20003a0c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
20003810:	4293      	cmp	r3, r2
20003812:	d01a      	beq.n	2000384a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
20003814:	68fb      	ldr	r3, [r7, #12]
20003816:	681b      	ldr	r3, [r3, #0]
20003818:	4a7d      	ldr	r2, [pc, #500]	@ (20003a10 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
2000381a:	4293      	cmp	r3, r2
2000381c:	d012      	beq.n	20003844 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
2000381e:	68fb      	ldr	r3, [r7, #12]
20003820:	681b      	ldr	r3, [r3, #0]
20003822:	4a7c      	ldr	r2, [pc, #496]	@ (20003a14 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
20003824:	4293      	cmp	r3, r2
20003826:	d00a      	beq.n	2000383e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
20003828:	68fb      	ldr	r3, [r7, #12]
2000382a:	681b      	ldr	r3, [r3, #0]
2000382c:	4a7a      	ldr	r2, [pc, #488]	@ (20003a18 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
2000382e:	4293      	cmp	r3, r2
20003830:	d102      	bne.n	20003838 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
20003832:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
20003836:	e01e      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003838:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
2000383c:	e01b      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
2000383e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
20003842:	e018      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003844:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
20003848:	e015      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
2000384a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
2000384e:	e012      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003850:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20003854:	e00f      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003856:	f44f 6300 	mov.w	r3, #2048	@ 0x800
2000385a:	e00c      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
2000385c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20003860:	e009      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003862:	f44f 6300 	mov.w	r3, #2048	@ 0x800
20003866:	e006      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003868:	2320      	movs	r3, #32
2000386a:	e004      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
2000386c:	2320      	movs	r3, #32
2000386e:	e002      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003870:	2320      	movs	r3, #32
20003872:	e000      	b.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
20003874:	2320      	movs	r3, #32
20003876:	4a5c      	ldr	r2, [pc, #368]	@ (200039e8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
20003878:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000387a:	68fb      	ldr	r3, [r7, #12]
2000387c:	681b      	ldr	r3, [r3, #0]
2000387e:	461a      	mov	r2, r3
20003880:	4b66      	ldr	r3, [pc, #408]	@ (20003a1c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
20003882:	429a      	cmp	r2, r3
20003884:	d960      	bls.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
20003886:	68fb      	ldr	r3, [r7, #12]
20003888:	681b      	ldr	r3, [r3, #0]
2000388a:	4a58      	ldr	r2, [pc, #352]	@ (200039ec <HAL_DMAEx_MultiBufferStart_IT+0x584>)
2000388c:	4293      	cmp	r3, r2
2000388e:	d057      	beq.n	20003940 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
20003890:	68fb      	ldr	r3, [r7, #12]
20003892:	681b      	ldr	r3, [r3, #0]
20003894:	4a56      	ldr	r2, [pc, #344]	@ (200039f0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
20003896:	4293      	cmp	r3, r2
20003898:	d050      	beq.n	2000393c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
2000389a:	68fb      	ldr	r3, [r7, #12]
2000389c:	681b      	ldr	r3, [r3, #0]
2000389e:	4a55      	ldr	r2, [pc, #340]	@ (200039f4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
200038a0:	4293      	cmp	r3, r2
200038a2:	d049      	beq.n	20003938 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
200038a4:	68fb      	ldr	r3, [r7, #12]
200038a6:	681b      	ldr	r3, [r3, #0]
200038a8:	4a53      	ldr	r2, [pc, #332]	@ (200039f8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
200038aa:	4293      	cmp	r3, r2
200038ac:	d042      	beq.n	20003934 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
200038ae:	68fb      	ldr	r3, [r7, #12]
200038b0:	681b      	ldr	r3, [r3, #0]
200038b2:	4a52      	ldr	r2, [pc, #328]	@ (200039fc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
200038b4:	4293      	cmp	r3, r2
200038b6:	d03a      	beq.n	2000392e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
200038b8:	68fb      	ldr	r3, [r7, #12]
200038ba:	681b      	ldr	r3, [r3, #0]
200038bc:	4a50      	ldr	r2, [pc, #320]	@ (20003a00 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
200038be:	4293      	cmp	r3, r2
200038c0:	d032      	beq.n	20003928 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
200038c2:	68fb      	ldr	r3, [r7, #12]
200038c4:	681b      	ldr	r3, [r3, #0]
200038c6:	4a4f      	ldr	r2, [pc, #316]	@ (20003a04 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
200038c8:	4293      	cmp	r3, r2
200038ca:	d02a      	beq.n	20003922 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
200038cc:	68fb      	ldr	r3, [r7, #12]
200038ce:	681b      	ldr	r3, [r3, #0]
200038d0:	4a4d      	ldr	r2, [pc, #308]	@ (20003a08 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
200038d2:	4293      	cmp	r3, r2
200038d4:	d022      	beq.n	2000391c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
200038d6:	68fb      	ldr	r3, [r7, #12]
200038d8:	681b      	ldr	r3, [r3, #0]
200038da:	4a4c      	ldr	r2, [pc, #304]	@ (20003a0c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
200038dc:	4293      	cmp	r3, r2
200038de:	d01a      	beq.n	20003916 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
200038e0:	68fb      	ldr	r3, [r7, #12]
200038e2:	681b      	ldr	r3, [r3, #0]
200038e4:	4a4a      	ldr	r2, [pc, #296]	@ (20003a10 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
200038e6:	4293      	cmp	r3, r2
200038e8:	d012      	beq.n	20003910 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
200038ea:	68fb      	ldr	r3, [r7, #12]
200038ec:	681b      	ldr	r3, [r3, #0]
200038ee:	4a49      	ldr	r2, [pc, #292]	@ (20003a14 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
200038f0:	4293      	cmp	r3, r2
200038f2:	d00a      	beq.n	2000390a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
200038f4:	68fb      	ldr	r3, [r7, #12]
200038f6:	681b      	ldr	r3, [r3, #0]
200038f8:	4a47      	ldr	r2, [pc, #284]	@ (20003a18 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
200038fa:	4293      	cmp	r3, r2
200038fc:	d102      	bne.n	20003904 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
200038fe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20003902:	e01e      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003904:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
20003908:	e01b      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
2000390a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
2000390e:	e018      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003910:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20003914:	e015      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003916:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
2000391a:	e012      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
2000391c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003920:	e00f      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003926:	e00c      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
2000392c:	e009      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
2000392e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003932:	e006      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003934:	2310      	movs	r3, #16
20003936:	e004      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003938:	2310      	movs	r3, #16
2000393a:	e002      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
2000393c:	2310      	movs	r3, #16
2000393e:	e000      	b.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003940:	2310      	movs	r3, #16
20003942:	4a37      	ldr	r2, [pc, #220]	@ (20003a20 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
20003944:	60d3      	str	r3, [r2, #12]
20003946:	e14f      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
20003948:	68fb      	ldr	r3, [r7, #12]
2000394a:	681b      	ldr	r3, [r3, #0]
2000394c:	461a      	mov	r2, r3
2000394e:	4b35      	ldr	r3, [pc, #212]	@ (20003a24 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
20003950:	429a      	cmp	r2, r3
20003952:	f240 8082 	bls.w	20003a5a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
20003956:	68fb      	ldr	r3, [r7, #12]
20003958:	681b      	ldr	r3, [r3, #0]
2000395a:	4a24      	ldr	r2, [pc, #144]	@ (200039ec <HAL_DMAEx_MultiBufferStart_IT+0x584>)
2000395c:	4293      	cmp	r3, r2
2000395e:	d078      	beq.n	20003a52 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
20003960:	68fb      	ldr	r3, [r7, #12]
20003962:	681b      	ldr	r3, [r3, #0]
20003964:	4a22      	ldr	r2, [pc, #136]	@ (200039f0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
20003966:	4293      	cmp	r3, r2
20003968:	d071      	beq.n	20003a4e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
2000396a:	68fb      	ldr	r3, [r7, #12]
2000396c:	681b      	ldr	r3, [r3, #0]
2000396e:	4a21      	ldr	r2, [pc, #132]	@ (200039f4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
20003970:	4293      	cmp	r3, r2
20003972:	d06a      	beq.n	20003a4a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
20003974:	68fb      	ldr	r3, [r7, #12]
20003976:	681b      	ldr	r3, [r3, #0]
20003978:	4a1f      	ldr	r2, [pc, #124]	@ (200039f8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
2000397a:	4293      	cmp	r3, r2
2000397c:	d063      	beq.n	20003a46 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
2000397e:	68fb      	ldr	r3, [r7, #12]
20003980:	681b      	ldr	r3, [r3, #0]
20003982:	4a1e      	ldr	r2, [pc, #120]	@ (200039fc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
20003984:	4293      	cmp	r3, r2
20003986:	d05b      	beq.n	20003a40 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
20003988:	68fb      	ldr	r3, [r7, #12]
2000398a:	681b      	ldr	r3, [r3, #0]
2000398c:	4a1c      	ldr	r2, [pc, #112]	@ (20003a00 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
2000398e:	4293      	cmp	r3, r2
20003990:	d053      	beq.n	20003a3a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
20003992:	68fb      	ldr	r3, [r7, #12]
20003994:	681b      	ldr	r3, [r3, #0]
20003996:	4a1b      	ldr	r2, [pc, #108]	@ (20003a04 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
20003998:	4293      	cmp	r3, r2
2000399a:	d04b      	beq.n	20003a34 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
2000399c:	68fb      	ldr	r3, [r7, #12]
2000399e:	681b      	ldr	r3, [r3, #0]
200039a0:	4a19      	ldr	r2, [pc, #100]	@ (20003a08 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
200039a2:	4293      	cmp	r3, r2
200039a4:	d043      	beq.n	20003a2e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
200039a6:	68fb      	ldr	r3, [r7, #12]
200039a8:	681b      	ldr	r3, [r3, #0]
200039aa:	4a18      	ldr	r2, [pc, #96]	@ (20003a0c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
200039ac:	4293      	cmp	r3, r2
200039ae:	d03b      	beq.n	20003a28 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
200039b0:	68fb      	ldr	r3, [r7, #12]
200039b2:	681b      	ldr	r3, [r3, #0]
200039b4:	4a16      	ldr	r2, [pc, #88]	@ (20003a10 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
200039b6:	4293      	cmp	r3, r2
200039b8:	d012      	beq.n	200039e0 <HAL_DMAEx_MultiBufferStart_IT+0x578>
200039ba:	68fb      	ldr	r3, [r7, #12]
200039bc:	681b      	ldr	r3, [r3, #0]
200039be:	4a15      	ldr	r2, [pc, #84]	@ (20003a14 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
200039c0:	4293      	cmp	r3, r2
200039c2:	d00a      	beq.n	200039da <HAL_DMAEx_MultiBufferStart_IT+0x572>
200039c4:	68fb      	ldr	r3, [r7, #12]
200039c6:	681b      	ldr	r3, [r3, #0]
200039c8:	4a13      	ldr	r2, [pc, #76]	@ (20003a18 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
200039ca:	4293      	cmp	r3, r2
200039cc:	d102      	bne.n	200039d4 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
200039ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
200039d2:	e03f      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200039d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
200039d8:	e03c      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200039da:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
200039de:	e039      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200039e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
200039e4:	e036      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200039e6:	bf00      	nop
200039e8:	40026000 	.word	0x40026000
200039ec:	40026010 	.word	0x40026010
200039f0:	40026410 	.word	0x40026410
200039f4:	40026070 	.word	0x40026070
200039f8:	40026470 	.word	0x40026470
200039fc:	40026028 	.word	0x40026028
20003a00:	40026428 	.word	0x40026428
20003a04:	40026088 	.word	0x40026088
20003a08:	40026488 	.word	0x40026488
20003a0c:	40026040 	.word	0x40026040
20003a10:	40026440 	.word	0x40026440
20003a14:	400260a0 	.word	0x400260a0
20003a18:	400264a0 	.word	0x400264a0
20003a1c:	40026458 	.word	0x40026458
20003a20:	40026400 	.word	0x40026400
20003a24:	400260b8 	.word	0x400260b8
20003a28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20003a2c:	e012      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003a32:	e00f      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003a38:	e00c      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003a3e:	e009      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003a44:	e006      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003a46:	2310      	movs	r3, #16
20003a48:	e004      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003a4a:	2310      	movs	r3, #16
20003a4c:	e002      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003a4e:	2310      	movs	r3, #16
20003a50:	e000      	b.n	20003a54 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003a52:	2310      	movs	r3, #16
20003a54:	4a8c      	ldr	r2, [pc, #560]	@ (20003c88 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
20003a56:	6093      	str	r3, [r2, #8]
20003a58:	e0c6      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
20003a5a:	68fb      	ldr	r3, [r7, #12]
20003a5c:	681b      	ldr	r3, [r3, #0]
20003a5e:	461a      	mov	r2, r3
20003a60:	4b8a      	ldr	r3, [pc, #552]	@ (20003c8c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
20003a62:	429a      	cmp	r2, r3
20003a64:	d960      	bls.n	20003b28 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
20003a66:	68fb      	ldr	r3, [r7, #12]
20003a68:	681b      	ldr	r3, [r3, #0]
20003a6a:	4a89      	ldr	r2, [pc, #548]	@ (20003c90 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
20003a6c:	4293      	cmp	r3, r2
20003a6e:	d057      	beq.n	20003b20 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
20003a70:	68fb      	ldr	r3, [r7, #12]
20003a72:	681b      	ldr	r3, [r3, #0]
20003a74:	4a87      	ldr	r2, [pc, #540]	@ (20003c94 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
20003a76:	4293      	cmp	r3, r2
20003a78:	d050      	beq.n	20003b1c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
20003a7a:	68fb      	ldr	r3, [r7, #12]
20003a7c:	681b      	ldr	r3, [r3, #0]
20003a7e:	4a86      	ldr	r2, [pc, #536]	@ (20003c98 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
20003a80:	4293      	cmp	r3, r2
20003a82:	d049      	beq.n	20003b18 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
20003a84:	68fb      	ldr	r3, [r7, #12]
20003a86:	681b      	ldr	r3, [r3, #0]
20003a88:	4a84      	ldr	r2, [pc, #528]	@ (20003c9c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
20003a8a:	4293      	cmp	r3, r2
20003a8c:	d042      	beq.n	20003b14 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
20003a8e:	68fb      	ldr	r3, [r7, #12]
20003a90:	681b      	ldr	r3, [r3, #0]
20003a92:	4a83      	ldr	r2, [pc, #524]	@ (20003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
20003a94:	4293      	cmp	r3, r2
20003a96:	d03a      	beq.n	20003b0e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
20003a98:	68fb      	ldr	r3, [r7, #12]
20003a9a:	681b      	ldr	r3, [r3, #0]
20003a9c:	4a81      	ldr	r2, [pc, #516]	@ (20003ca4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003a9e:	4293      	cmp	r3, r2
20003aa0:	d032      	beq.n	20003b08 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
20003aa2:	68fb      	ldr	r3, [r7, #12]
20003aa4:	681b      	ldr	r3, [r3, #0]
20003aa6:	4a80      	ldr	r2, [pc, #512]	@ (20003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
20003aa8:	4293      	cmp	r3, r2
20003aaa:	d02a      	beq.n	20003b02 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
20003aac:	68fb      	ldr	r3, [r7, #12]
20003aae:	681b      	ldr	r3, [r3, #0]
20003ab0:	4a7e      	ldr	r2, [pc, #504]	@ (20003cac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
20003ab2:	4293      	cmp	r3, r2
20003ab4:	d022      	beq.n	20003afc <HAL_DMAEx_MultiBufferStart_IT+0x694>
20003ab6:	68fb      	ldr	r3, [r7, #12]
20003ab8:	681b      	ldr	r3, [r3, #0]
20003aba:	4a7d      	ldr	r2, [pc, #500]	@ (20003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
20003abc:	4293      	cmp	r3, r2
20003abe:	d01a      	beq.n	20003af6 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
20003ac0:	68fb      	ldr	r3, [r7, #12]
20003ac2:	681b      	ldr	r3, [r3, #0]
20003ac4:	4a7b      	ldr	r2, [pc, #492]	@ (20003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
20003ac6:	4293      	cmp	r3, r2
20003ac8:	d012      	beq.n	20003af0 <HAL_DMAEx_MultiBufferStart_IT+0x688>
20003aca:	68fb      	ldr	r3, [r7, #12]
20003acc:	681b      	ldr	r3, [r3, #0]
20003ace:	4a7a      	ldr	r2, [pc, #488]	@ (20003cb8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
20003ad0:	4293      	cmp	r3, r2
20003ad2:	d00a      	beq.n	20003aea <HAL_DMAEx_MultiBufferStart_IT+0x682>
20003ad4:	68fb      	ldr	r3, [r7, #12]
20003ad6:	681b      	ldr	r3, [r3, #0]
20003ad8:	4a78      	ldr	r2, [pc, #480]	@ (20003cbc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003ada:	4293      	cmp	r3, r2
20003adc:	d102      	bne.n	20003ae4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
20003ade:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20003ae2:	e01e      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003ae4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
20003ae8:	e01b      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003aea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20003aee:	e018      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003af0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20003af4:	e015      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003af6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20003afa:	e012      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003afc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003b00:	e00f      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003b02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003b06:	e00c      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003b08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003b0c:	e009      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003b12:	e006      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003b14:	2310      	movs	r3, #16
20003b16:	e004      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003b18:	2310      	movs	r3, #16
20003b1a:	e002      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003b1c:	2310      	movs	r3, #16
20003b1e:	e000      	b.n	20003b22 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003b20:	2310      	movs	r3, #16
20003b22:	4a67      	ldr	r2, [pc, #412]	@ (20003cc0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
20003b24:	60d3      	str	r3, [r2, #12]
20003b26:	e05f      	b.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
20003b28:	68fb      	ldr	r3, [r7, #12]
20003b2a:	681b      	ldr	r3, [r3, #0]
20003b2c:	4a58      	ldr	r2, [pc, #352]	@ (20003c90 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
20003b2e:	4293      	cmp	r3, r2
20003b30:	d057      	beq.n	20003be2 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
20003b32:	68fb      	ldr	r3, [r7, #12]
20003b34:	681b      	ldr	r3, [r3, #0]
20003b36:	4a57      	ldr	r2, [pc, #348]	@ (20003c94 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
20003b38:	4293      	cmp	r3, r2
20003b3a:	d050      	beq.n	20003bde <HAL_DMAEx_MultiBufferStart_IT+0x776>
20003b3c:	68fb      	ldr	r3, [r7, #12]
20003b3e:	681b      	ldr	r3, [r3, #0]
20003b40:	4a55      	ldr	r2, [pc, #340]	@ (20003c98 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
20003b42:	4293      	cmp	r3, r2
20003b44:	d049      	beq.n	20003bda <HAL_DMAEx_MultiBufferStart_IT+0x772>
20003b46:	68fb      	ldr	r3, [r7, #12]
20003b48:	681b      	ldr	r3, [r3, #0]
20003b4a:	4a54      	ldr	r2, [pc, #336]	@ (20003c9c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
20003b4c:	4293      	cmp	r3, r2
20003b4e:	d042      	beq.n	20003bd6 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
20003b50:	68fb      	ldr	r3, [r7, #12]
20003b52:	681b      	ldr	r3, [r3, #0]
20003b54:	4a52      	ldr	r2, [pc, #328]	@ (20003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
20003b56:	4293      	cmp	r3, r2
20003b58:	d03a      	beq.n	20003bd0 <HAL_DMAEx_MultiBufferStart_IT+0x768>
20003b5a:	68fb      	ldr	r3, [r7, #12]
20003b5c:	681b      	ldr	r3, [r3, #0]
20003b5e:	4a51      	ldr	r2, [pc, #324]	@ (20003ca4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003b60:	4293      	cmp	r3, r2
20003b62:	d032      	beq.n	20003bca <HAL_DMAEx_MultiBufferStart_IT+0x762>
20003b64:	68fb      	ldr	r3, [r7, #12]
20003b66:	681b      	ldr	r3, [r3, #0]
20003b68:	4a4f      	ldr	r2, [pc, #316]	@ (20003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
20003b6a:	4293      	cmp	r3, r2
20003b6c:	d02a      	beq.n	20003bc4 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
20003b6e:	68fb      	ldr	r3, [r7, #12]
20003b70:	681b      	ldr	r3, [r3, #0]
20003b72:	4a4e      	ldr	r2, [pc, #312]	@ (20003cac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
20003b74:	4293      	cmp	r3, r2
20003b76:	d022      	beq.n	20003bbe <HAL_DMAEx_MultiBufferStart_IT+0x756>
20003b78:	68fb      	ldr	r3, [r7, #12]
20003b7a:	681b      	ldr	r3, [r3, #0]
20003b7c:	4a4c      	ldr	r2, [pc, #304]	@ (20003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
20003b7e:	4293      	cmp	r3, r2
20003b80:	d01a      	beq.n	20003bb8 <HAL_DMAEx_MultiBufferStart_IT+0x750>
20003b82:	68fb      	ldr	r3, [r7, #12]
20003b84:	681b      	ldr	r3, [r3, #0]
20003b86:	4a4b      	ldr	r2, [pc, #300]	@ (20003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
20003b88:	4293      	cmp	r3, r2
20003b8a:	d012      	beq.n	20003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
20003b8c:	68fb      	ldr	r3, [r7, #12]
20003b8e:	681b      	ldr	r3, [r3, #0]
20003b90:	4a49      	ldr	r2, [pc, #292]	@ (20003cb8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
20003b92:	4293      	cmp	r3, r2
20003b94:	d00a      	beq.n	20003bac <HAL_DMAEx_MultiBufferStart_IT+0x744>
20003b96:	68fb      	ldr	r3, [r7, #12]
20003b98:	681b      	ldr	r3, [r3, #0]
20003b9a:	4a48      	ldr	r2, [pc, #288]	@ (20003cbc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003b9c:	4293      	cmp	r3, r2
20003b9e:	d102      	bne.n	20003ba6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
20003ba0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20003ba4:	e01e      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003ba6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
20003baa:	e01b      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003bac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20003bb0:	e018      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003bb2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20003bb6:	e015      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003bb8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
20003bbc:	e012      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003bc2:	e00f      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003bc8:	e00c      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003bce:	e009      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
20003bd4:	e006      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003bd6:	2310      	movs	r3, #16
20003bd8:	e004      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003bda:	2310      	movs	r3, #16
20003bdc:	e002      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003bde:	2310      	movs	r3, #16
20003be0:	e000      	b.n	20003be4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003be2:	2310      	movs	r3, #16
20003be4:	4a36      	ldr	r2, [pc, #216]	@ (20003cc0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
20003be6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20003be8:	68fb      	ldr	r3, [r7, #12]
20003bea:	681b      	ldr	r3, [r3, #0]
20003bec:	461a      	mov	r2, r3
20003bee:	4b35      	ldr	r3, [pc, #212]	@ (20003cc4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
20003bf0:	429a      	cmp	r2, r3
20003bf2:	f240 8082 	bls.w	20003cfa <HAL_DMAEx_MultiBufferStart_IT+0x892>
20003bf6:	68fb      	ldr	r3, [r7, #12]
20003bf8:	681b      	ldr	r3, [r3, #0]
20003bfa:	4a25      	ldr	r2, [pc, #148]	@ (20003c90 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
20003bfc:	4293      	cmp	r3, r2
20003bfe:	d078      	beq.n	20003cf2 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
20003c00:	68fb      	ldr	r3, [r7, #12]
20003c02:	681b      	ldr	r3, [r3, #0]
20003c04:	4a23      	ldr	r2, [pc, #140]	@ (20003c94 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
20003c06:	4293      	cmp	r3, r2
20003c08:	d071      	beq.n	20003cee <HAL_DMAEx_MultiBufferStart_IT+0x886>
20003c0a:	68fb      	ldr	r3, [r7, #12]
20003c0c:	681b      	ldr	r3, [r3, #0]
20003c0e:	4a22      	ldr	r2, [pc, #136]	@ (20003c98 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
20003c10:	4293      	cmp	r3, r2
20003c12:	d06a      	beq.n	20003cea <HAL_DMAEx_MultiBufferStart_IT+0x882>
20003c14:	68fb      	ldr	r3, [r7, #12]
20003c16:	681b      	ldr	r3, [r3, #0]
20003c18:	4a20      	ldr	r2, [pc, #128]	@ (20003c9c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
20003c1a:	4293      	cmp	r3, r2
20003c1c:	d063      	beq.n	20003ce6 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
20003c1e:	68fb      	ldr	r3, [r7, #12]
20003c20:	681b      	ldr	r3, [r3, #0]
20003c22:	4a1f      	ldr	r2, [pc, #124]	@ (20003ca0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
20003c24:	4293      	cmp	r3, r2
20003c26:	d05b      	beq.n	20003ce0 <HAL_DMAEx_MultiBufferStart_IT+0x878>
20003c28:	68fb      	ldr	r3, [r7, #12]
20003c2a:	681b      	ldr	r3, [r3, #0]
20003c2c:	4a1d      	ldr	r2, [pc, #116]	@ (20003ca4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003c2e:	4293      	cmp	r3, r2
20003c30:	d053      	beq.n	20003cda <HAL_DMAEx_MultiBufferStart_IT+0x872>
20003c32:	68fb      	ldr	r3, [r7, #12]
20003c34:	681b      	ldr	r3, [r3, #0]
20003c36:	4a1c      	ldr	r2, [pc, #112]	@ (20003ca8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
20003c38:	4293      	cmp	r3, r2
20003c3a:	d04b      	beq.n	20003cd4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
20003c3c:	68fb      	ldr	r3, [r7, #12]
20003c3e:	681b      	ldr	r3, [r3, #0]
20003c40:	4a1a      	ldr	r2, [pc, #104]	@ (20003cac <HAL_DMAEx_MultiBufferStart_IT+0x844>)
20003c42:	4293      	cmp	r3, r2
20003c44:	d043      	beq.n	20003cce <HAL_DMAEx_MultiBufferStart_IT+0x866>
20003c46:	68fb      	ldr	r3, [r7, #12]
20003c48:	681b      	ldr	r3, [r3, #0]
20003c4a:	4a19      	ldr	r2, [pc, #100]	@ (20003cb0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
20003c4c:	4293      	cmp	r3, r2
20003c4e:	d03b      	beq.n	20003cc8 <HAL_DMAEx_MultiBufferStart_IT+0x860>
20003c50:	68fb      	ldr	r3, [r7, #12]
20003c52:	681b      	ldr	r3, [r3, #0]
20003c54:	4a17      	ldr	r2, [pc, #92]	@ (20003cb4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
20003c56:	4293      	cmp	r3, r2
20003c58:	d012      	beq.n	20003c80 <HAL_DMAEx_MultiBufferStart_IT+0x818>
20003c5a:	68fb      	ldr	r3, [r7, #12]
20003c5c:	681b      	ldr	r3, [r3, #0]
20003c5e:	4a16      	ldr	r2, [pc, #88]	@ (20003cb8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
20003c60:	4293      	cmp	r3, r2
20003c62:	d00a      	beq.n	20003c7a <HAL_DMAEx_MultiBufferStart_IT+0x812>
20003c64:	68fb      	ldr	r3, [r7, #12]
20003c66:	681b      	ldr	r3, [r3, #0]
20003c68:	4a14      	ldr	r2, [pc, #80]	@ (20003cbc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003c6a:	4293      	cmp	r3, r2
20003c6c:	d102      	bne.n	20003c74 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
20003c6e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003c72:	e03f      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
20003c78:	e03c      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c7a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003c7e:	e039      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003c84:	e036      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c86:	bf00      	nop
20003c88:	40026400 	.word	0x40026400
20003c8c:	40026058 	.word	0x40026058
20003c90:	40026010 	.word	0x40026010
20003c94:	40026410 	.word	0x40026410
20003c98:	40026070 	.word	0x40026070
20003c9c:	40026470 	.word	0x40026470
20003ca0:	40026028 	.word	0x40026028
20003ca4:	40026428 	.word	0x40026428
20003ca8:	40026088 	.word	0x40026088
20003cac:	40026488 	.word	0x40026488
20003cb0:	40026040 	.word	0x40026040
20003cb4:	40026440 	.word	0x40026440
20003cb8:	400260a0 	.word	0x400260a0
20003cbc:	400264a0 	.word	0x400264a0
20003cc0:	40026000 	.word	0x40026000
20003cc4:	40026458 	.word	0x40026458
20003cc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003ccc:	e012      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003cce:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003cd2:	e00f      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003cd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003cd8:	e00c      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003cda:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003cde:	e009      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003ce0:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003ce4:	e006      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003ce6:	2308      	movs	r3, #8
20003ce8:	e004      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003cea:	2308      	movs	r3, #8
20003cec:	e002      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003cee:	2308      	movs	r3, #8
20003cf0:	e000      	b.n	20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003cf2:	2308      	movs	r3, #8
20003cf4:	4a8c      	ldr	r2, [pc, #560]	@ (20003f28 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
20003cf6:	60d3      	str	r3, [r2, #12]
20003cf8:	e14e      	b.n	20003f98 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
20003cfa:	68fb      	ldr	r3, [r7, #12]
20003cfc:	681b      	ldr	r3, [r3, #0]
20003cfe:	461a      	mov	r2, r3
20003d00:	4b8a      	ldr	r3, [pc, #552]	@ (20003f2c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
20003d02:	429a      	cmp	r2, r3
20003d04:	d960      	bls.n	20003dc8 <HAL_DMAEx_MultiBufferStart_IT+0x960>
20003d06:	68fb      	ldr	r3, [r7, #12]
20003d08:	681b      	ldr	r3, [r3, #0]
20003d0a:	4a89      	ldr	r2, [pc, #548]	@ (20003f30 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
20003d0c:	4293      	cmp	r3, r2
20003d0e:	d057      	beq.n	20003dc0 <HAL_DMAEx_MultiBufferStart_IT+0x958>
20003d10:	68fb      	ldr	r3, [r7, #12]
20003d12:	681b      	ldr	r3, [r3, #0]
20003d14:	4a87      	ldr	r2, [pc, #540]	@ (20003f34 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003d16:	4293      	cmp	r3, r2
20003d18:	d050      	beq.n	20003dbc <HAL_DMAEx_MultiBufferStart_IT+0x954>
20003d1a:	68fb      	ldr	r3, [r7, #12]
20003d1c:	681b      	ldr	r3, [r3, #0]
20003d1e:	4a86      	ldr	r2, [pc, #536]	@ (20003f38 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003d20:	4293      	cmp	r3, r2
20003d22:	d049      	beq.n	20003db8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
20003d24:	68fb      	ldr	r3, [r7, #12]
20003d26:	681b      	ldr	r3, [r3, #0]
20003d28:	4a84      	ldr	r2, [pc, #528]	@ (20003f3c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003d2a:	4293      	cmp	r3, r2
20003d2c:	d042      	beq.n	20003db4 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
20003d2e:	68fb      	ldr	r3, [r7, #12]
20003d30:	681b      	ldr	r3, [r3, #0]
20003d32:	4a83      	ldr	r2, [pc, #524]	@ (20003f40 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003d34:	4293      	cmp	r3, r2
20003d36:	d03a      	beq.n	20003dae <HAL_DMAEx_MultiBufferStart_IT+0x946>
20003d38:	68fb      	ldr	r3, [r7, #12]
20003d3a:	681b      	ldr	r3, [r3, #0]
20003d3c:	4a81      	ldr	r2, [pc, #516]	@ (20003f44 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003d3e:	4293      	cmp	r3, r2
20003d40:	d032      	beq.n	20003da8 <HAL_DMAEx_MultiBufferStart_IT+0x940>
20003d42:	68fb      	ldr	r3, [r7, #12]
20003d44:	681b      	ldr	r3, [r3, #0]
20003d46:	4a80      	ldr	r2, [pc, #512]	@ (20003f48 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003d48:	4293      	cmp	r3, r2
20003d4a:	d02a      	beq.n	20003da2 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
20003d4c:	68fb      	ldr	r3, [r7, #12]
20003d4e:	681b      	ldr	r3, [r3, #0]
20003d50:	4a7e      	ldr	r2, [pc, #504]	@ (20003f4c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003d52:	4293      	cmp	r3, r2
20003d54:	d022      	beq.n	20003d9c <HAL_DMAEx_MultiBufferStart_IT+0x934>
20003d56:	68fb      	ldr	r3, [r7, #12]
20003d58:	681b      	ldr	r3, [r3, #0]
20003d5a:	4a7d      	ldr	r2, [pc, #500]	@ (20003f50 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003d5c:	4293      	cmp	r3, r2
20003d5e:	d01a      	beq.n	20003d96 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
20003d60:	68fb      	ldr	r3, [r7, #12]
20003d62:	681b      	ldr	r3, [r3, #0]
20003d64:	4a7b      	ldr	r2, [pc, #492]	@ (20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003d66:	4293      	cmp	r3, r2
20003d68:	d012      	beq.n	20003d90 <HAL_DMAEx_MultiBufferStart_IT+0x928>
20003d6a:	68fb      	ldr	r3, [r7, #12]
20003d6c:	681b      	ldr	r3, [r3, #0]
20003d6e:	4a7a      	ldr	r2, [pc, #488]	@ (20003f58 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003d70:	4293      	cmp	r3, r2
20003d72:	d00a      	beq.n	20003d8a <HAL_DMAEx_MultiBufferStart_IT+0x922>
20003d74:	68fb      	ldr	r3, [r7, #12]
20003d76:	681b      	ldr	r3, [r3, #0]
20003d78:	4a78      	ldr	r2, [pc, #480]	@ (20003f5c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003d7a:	4293      	cmp	r3, r2
20003d7c:	d102      	bne.n	20003d84 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
20003d7e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003d82:	e01e      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
20003d88:	e01b      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d8a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003d8e:	e018      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003d94:	e015      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d96:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003d9a:	e012      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003da0:	e00f      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003da2:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003da6:	e00c      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003dac:	e009      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003dae:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003db2:	e006      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003db4:	2308      	movs	r3, #8
20003db6:	e004      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003db8:	2308      	movs	r3, #8
20003dba:	e002      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003dbc:	2308      	movs	r3, #8
20003dbe:	e000      	b.n	20003dc2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003dc0:	2308      	movs	r3, #8
20003dc2:	4a59      	ldr	r2, [pc, #356]	@ (20003f28 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
20003dc4:	6093      	str	r3, [r2, #8]
20003dc6:	e0e7      	b.n	20003f98 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
20003dc8:	68fb      	ldr	r3, [r7, #12]
20003dca:	681b      	ldr	r3, [r3, #0]
20003dcc:	461a      	mov	r2, r3
20003dce:	4b64      	ldr	r3, [pc, #400]	@ (20003f60 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
20003dd0:	429a      	cmp	r2, r3
20003dd2:	d960      	bls.n	20003e96 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
20003dd4:	68fb      	ldr	r3, [r7, #12]
20003dd6:	681b      	ldr	r3, [r3, #0]
20003dd8:	4a55      	ldr	r2, [pc, #340]	@ (20003f30 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
20003dda:	4293      	cmp	r3, r2
20003ddc:	d057      	beq.n	20003e8e <HAL_DMAEx_MultiBufferStart_IT+0xa26>
20003dde:	68fb      	ldr	r3, [r7, #12]
20003de0:	681b      	ldr	r3, [r3, #0]
20003de2:	4a54      	ldr	r2, [pc, #336]	@ (20003f34 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003de4:	4293      	cmp	r3, r2
20003de6:	d050      	beq.n	20003e8a <HAL_DMAEx_MultiBufferStart_IT+0xa22>
20003de8:	68fb      	ldr	r3, [r7, #12]
20003dea:	681b      	ldr	r3, [r3, #0]
20003dec:	4a52      	ldr	r2, [pc, #328]	@ (20003f38 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003dee:	4293      	cmp	r3, r2
20003df0:	d049      	beq.n	20003e86 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
20003df2:	68fb      	ldr	r3, [r7, #12]
20003df4:	681b      	ldr	r3, [r3, #0]
20003df6:	4a51      	ldr	r2, [pc, #324]	@ (20003f3c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003df8:	4293      	cmp	r3, r2
20003dfa:	d042      	beq.n	20003e82 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
20003dfc:	68fb      	ldr	r3, [r7, #12]
20003dfe:	681b      	ldr	r3, [r3, #0]
20003e00:	4a4f      	ldr	r2, [pc, #316]	@ (20003f40 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003e02:	4293      	cmp	r3, r2
20003e04:	d03a      	beq.n	20003e7c <HAL_DMAEx_MultiBufferStart_IT+0xa14>
20003e06:	68fb      	ldr	r3, [r7, #12]
20003e08:	681b      	ldr	r3, [r3, #0]
20003e0a:	4a4e      	ldr	r2, [pc, #312]	@ (20003f44 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003e0c:	4293      	cmp	r3, r2
20003e0e:	d032      	beq.n	20003e76 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
20003e10:	68fb      	ldr	r3, [r7, #12]
20003e12:	681b      	ldr	r3, [r3, #0]
20003e14:	4a4c      	ldr	r2, [pc, #304]	@ (20003f48 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003e16:	4293      	cmp	r3, r2
20003e18:	d02a      	beq.n	20003e70 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
20003e1a:	68fb      	ldr	r3, [r7, #12]
20003e1c:	681b      	ldr	r3, [r3, #0]
20003e1e:	4a4b      	ldr	r2, [pc, #300]	@ (20003f4c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003e20:	4293      	cmp	r3, r2
20003e22:	d022      	beq.n	20003e6a <HAL_DMAEx_MultiBufferStart_IT+0xa02>
20003e24:	68fb      	ldr	r3, [r7, #12]
20003e26:	681b      	ldr	r3, [r3, #0]
20003e28:	4a49      	ldr	r2, [pc, #292]	@ (20003f50 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003e2a:	4293      	cmp	r3, r2
20003e2c:	d01a      	beq.n	20003e64 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
20003e2e:	68fb      	ldr	r3, [r7, #12]
20003e30:	681b      	ldr	r3, [r3, #0]
20003e32:	4a48      	ldr	r2, [pc, #288]	@ (20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003e34:	4293      	cmp	r3, r2
20003e36:	d012      	beq.n	20003e5e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
20003e38:	68fb      	ldr	r3, [r7, #12]
20003e3a:	681b      	ldr	r3, [r3, #0]
20003e3c:	4a46      	ldr	r2, [pc, #280]	@ (20003f58 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003e3e:	4293      	cmp	r3, r2
20003e40:	d00a      	beq.n	20003e58 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
20003e42:	68fb      	ldr	r3, [r7, #12]
20003e44:	681b      	ldr	r3, [r3, #0]
20003e46:	4a45      	ldr	r2, [pc, #276]	@ (20003f5c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003e48:	4293      	cmp	r3, r2
20003e4a:	d102      	bne.n	20003e52 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
20003e4c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003e50:	e01e      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
20003e56:	e01b      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003e5c:	e018      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e5e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003e62:	e015      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003e68:	e012      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003e6e:	e00f      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e70:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003e74:	e00c      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e76:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003e7a:	e009      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003e80:	e006      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e82:	2308      	movs	r3, #8
20003e84:	e004      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e86:	2308      	movs	r3, #8
20003e88:	e002      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e8a:	2308      	movs	r3, #8
20003e8c:	e000      	b.n	20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003e8e:	2308      	movs	r3, #8
20003e90:	4a34      	ldr	r2, [pc, #208]	@ (20003f64 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
20003e92:	60d3      	str	r3, [r2, #12]
20003e94:	e080      	b.n	20003f98 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
20003e96:	68fb      	ldr	r3, [r7, #12]
20003e98:	681b      	ldr	r3, [r3, #0]
20003e9a:	4a25      	ldr	r2, [pc, #148]	@ (20003f30 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
20003e9c:	4293      	cmp	r3, r2
20003e9e:	d078      	beq.n	20003f92 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
20003ea0:	68fb      	ldr	r3, [r7, #12]
20003ea2:	681b      	ldr	r3, [r3, #0]
20003ea4:	4a23      	ldr	r2, [pc, #140]	@ (20003f34 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003ea6:	4293      	cmp	r3, r2
20003ea8:	d071      	beq.n	20003f8e <HAL_DMAEx_MultiBufferStart_IT+0xb26>
20003eaa:	68fb      	ldr	r3, [r7, #12]
20003eac:	681b      	ldr	r3, [r3, #0]
20003eae:	4a22      	ldr	r2, [pc, #136]	@ (20003f38 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003eb0:	4293      	cmp	r3, r2
20003eb2:	d06a      	beq.n	20003f8a <HAL_DMAEx_MultiBufferStart_IT+0xb22>
20003eb4:	68fb      	ldr	r3, [r7, #12]
20003eb6:	681b      	ldr	r3, [r3, #0]
20003eb8:	4a20      	ldr	r2, [pc, #128]	@ (20003f3c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003eba:	4293      	cmp	r3, r2
20003ebc:	d063      	beq.n	20003f86 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
20003ebe:	68fb      	ldr	r3, [r7, #12]
20003ec0:	681b      	ldr	r3, [r3, #0]
20003ec2:	4a1f      	ldr	r2, [pc, #124]	@ (20003f40 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003ec4:	4293      	cmp	r3, r2
20003ec6:	d05b      	beq.n	20003f80 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
20003ec8:	68fb      	ldr	r3, [r7, #12]
20003eca:	681b      	ldr	r3, [r3, #0]
20003ecc:	4a1d      	ldr	r2, [pc, #116]	@ (20003f44 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003ece:	4293      	cmp	r3, r2
20003ed0:	d053      	beq.n	20003f7a <HAL_DMAEx_MultiBufferStart_IT+0xb12>
20003ed2:	68fb      	ldr	r3, [r7, #12]
20003ed4:	681b      	ldr	r3, [r3, #0]
20003ed6:	4a1c      	ldr	r2, [pc, #112]	@ (20003f48 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003ed8:	4293      	cmp	r3, r2
20003eda:	d04b      	beq.n	20003f74 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
20003edc:	68fb      	ldr	r3, [r7, #12]
20003ede:	681b      	ldr	r3, [r3, #0]
20003ee0:	4a1a      	ldr	r2, [pc, #104]	@ (20003f4c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003ee2:	4293      	cmp	r3, r2
20003ee4:	d043      	beq.n	20003f6e <HAL_DMAEx_MultiBufferStart_IT+0xb06>
20003ee6:	68fb      	ldr	r3, [r7, #12]
20003ee8:	681b      	ldr	r3, [r3, #0]
20003eea:	4a19      	ldr	r2, [pc, #100]	@ (20003f50 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003eec:	4293      	cmp	r3, r2
20003eee:	d03b      	beq.n	20003f68 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
20003ef0:	68fb      	ldr	r3, [r7, #12]
20003ef2:	681b      	ldr	r3, [r3, #0]
20003ef4:	4a17      	ldr	r2, [pc, #92]	@ (20003f54 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003ef6:	4293      	cmp	r3, r2
20003ef8:	d012      	beq.n	20003f20 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
20003efa:	68fb      	ldr	r3, [r7, #12]
20003efc:	681b      	ldr	r3, [r3, #0]
20003efe:	4a16      	ldr	r2, [pc, #88]	@ (20003f58 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003f00:	4293      	cmp	r3, r2
20003f02:	d00a      	beq.n	20003f1a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
20003f04:	68fb      	ldr	r3, [r7, #12]
20003f06:	681b      	ldr	r3, [r3, #0]
20003f08:	4a14      	ldr	r2, [pc, #80]	@ (20003f5c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003f0a:	4293      	cmp	r3, r2
20003f0c:	d102      	bne.n	20003f14 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
20003f0e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003f12:	e03f      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
20003f18:	e03c      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f1a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003f1e:	e039      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003f24:	e036      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f26:	bf00      	nop
20003f28:	40026400 	.word	0x40026400
20003f2c:	400260b8 	.word	0x400260b8
20003f30:	40026010 	.word	0x40026010
20003f34:	40026410 	.word	0x40026410
20003f38:	40026070 	.word	0x40026070
20003f3c:	40026470 	.word	0x40026470
20003f40:	40026028 	.word	0x40026028
20003f44:	40026428 	.word	0x40026428
20003f48:	40026088 	.word	0x40026088
20003f4c:	40026488 	.word	0x40026488
20003f50:	40026040 	.word	0x40026040
20003f54:	40026440 	.word	0x40026440
20003f58:	400260a0 	.word	0x400260a0
20003f5c:	400264a0 	.word	0x400264a0
20003f60:	40026058 	.word	0x40026058
20003f64:	40026000 	.word	0x40026000
20003f68:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
20003f6c:	e012      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003f72:	e00f      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f74:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003f78:	e00c      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003f7e:	e009      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f80:	f44f 7300 	mov.w	r3, #512	@ 0x200
20003f84:	e006      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f86:	2308      	movs	r3, #8
20003f88:	e004      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f8a:	2308      	movs	r3, #8
20003f8c:	e002      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f8e:	2308      	movs	r3, #8
20003f90:	e000      	b.n	20003f94 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003f92:	2308      	movs	r3, #8
20003f94:	4a8a      	ldr	r2, [pc, #552]	@ (200041c0 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
20003f96:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20003f98:	68fb      	ldr	r3, [r7, #12]
20003f9a:	681b      	ldr	r3, [r3, #0]
20003f9c:	461a      	mov	r2, r3
20003f9e:	4b89      	ldr	r3, [pc, #548]	@ (200041c4 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
20003fa0:	429a      	cmp	r2, r3
20003fa2:	d960      	bls.n	20004066 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
20003fa4:	68fb      	ldr	r3, [r7, #12]
20003fa6:	681b      	ldr	r3, [r3, #0]
20003fa8:	4a87      	ldr	r2, [pc, #540]	@ (200041c8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
20003faa:	4293      	cmp	r3, r2
20003fac:	d057      	beq.n	2000405e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
20003fae:	68fb      	ldr	r3, [r7, #12]
20003fb0:	681b      	ldr	r3, [r3, #0]
20003fb2:	4a86      	ldr	r2, [pc, #536]	@ (200041cc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
20003fb4:	4293      	cmp	r3, r2
20003fb6:	d050      	beq.n	2000405a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
20003fb8:	68fb      	ldr	r3, [r7, #12]
20003fba:	681b      	ldr	r3, [r3, #0]
20003fbc:	4a84      	ldr	r2, [pc, #528]	@ (200041d0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
20003fbe:	4293      	cmp	r3, r2
20003fc0:	d049      	beq.n	20004056 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
20003fc2:	68fb      	ldr	r3, [r7, #12]
20003fc4:	681b      	ldr	r3, [r3, #0]
20003fc6:	4a83      	ldr	r2, [pc, #524]	@ (200041d4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
20003fc8:	4293      	cmp	r3, r2
20003fca:	d042      	beq.n	20004052 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
20003fcc:	68fb      	ldr	r3, [r7, #12]
20003fce:	681b      	ldr	r3, [r3, #0]
20003fd0:	4a81      	ldr	r2, [pc, #516]	@ (200041d8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
20003fd2:	4293      	cmp	r3, r2
20003fd4:	d03a      	beq.n	2000404c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
20003fd6:	68fb      	ldr	r3, [r7, #12]
20003fd8:	681b      	ldr	r3, [r3, #0]
20003fda:	4a80      	ldr	r2, [pc, #512]	@ (200041dc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
20003fdc:	4293      	cmp	r3, r2
20003fde:	d032      	beq.n	20004046 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
20003fe0:	68fb      	ldr	r3, [r7, #12]
20003fe2:	681b      	ldr	r3, [r3, #0]
20003fe4:	4a7e      	ldr	r2, [pc, #504]	@ (200041e0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
20003fe6:	4293      	cmp	r3, r2
20003fe8:	d02a      	beq.n	20004040 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
20003fea:	68fb      	ldr	r3, [r7, #12]
20003fec:	681b      	ldr	r3, [r3, #0]
20003fee:	4a7d      	ldr	r2, [pc, #500]	@ (200041e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
20003ff0:	4293      	cmp	r3, r2
20003ff2:	d022      	beq.n	2000403a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
20003ff4:	68fb      	ldr	r3, [r7, #12]
20003ff6:	681b      	ldr	r3, [r3, #0]
20003ff8:	4a7b      	ldr	r2, [pc, #492]	@ (200041e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
20003ffa:	4293      	cmp	r3, r2
20003ffc:	d01a      	beq.n	20004034 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
20003ffe:	68fb      	ldr	r3, [r7, #12]
20004000:	681b      	ldr	r3, [r3, #0]
20004002:	4a7a      	ldr	r2, [pc, #488]	@ (200041ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
20004004:	4293      	cmp	r3, r2
20004006:	d012      	beq.n	2000402e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
20004008:	68fb      	ldr	r3, [r7, #12]
2000400a:	681b      	ldr	r3, [r3, #0]
2000400c:	4a78      	ldr	r2, [pc, #480]	@ (200041f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
2000400e:	4293      	cmp	r3, r2
20004010:	d00a      	beq.n	20004028 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
20004012:	68fb      	ldr	r3, [r7, #12]
20004014:	681b      	ldr	r3, [r3, #0]
20004016:	4a77      	ldr	r2, [pc, #476]	@ (200041f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
20004018:	4293      	cmp	r3, r2
2000401a:	d102      	bne.n	20004022 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
2000401c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
20004020:	e01e      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20004022:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
20004026:	e01b      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20004028:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
2000402c:	e018      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
2000402e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
20004032:	e015      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20004034:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
20004038:	e012      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
2000403a:	f44f 7380 	mov.w	r3, #256	@ 0x100
2000403e:	e00f      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20004040:	f44f 7380 	mov.w	r3, #256	@ 0x100
20004044:	e00c      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20004046:	f44f 7380 	mov.w	r3, #256	@ 0x100
2000404a:	e009      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
2000404c:	f44f 7380 	mov.w	r3, #256	@ 0x100
20004050:	e006      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20004052:	2304      	movs	r3, #4
20004054:	e004      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20004056:	2304      	movs	r3, #4
20004058:	e002      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
2000405a:	2304      	movs	r3, #4
2000405c:	e000      	b.n	20004060 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
2000405e:	2304      	movs	r3, #4
20004060:	4a65      	ldr	r2, [pc, #404]	@ (200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
20004062:	60d3      	str	r3, [r2, #12]
20004064:	e150      	b.n	20004308 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20004066:	68fb      	ldr	r3, [r7, #12]
20004068:	681b      	ldr	r3, [r3, #0]
2000406a:	461a      	mov	r2, r3
2000406c:	4b63      	ldr	r3, [pc, #396]	@ (200041fc <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
2000406e:	429a      	cmp	r2, r3
20004070:	d960      	bls.n	20004134 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
20004072:	68fb      	ldr	r3, [r7, #12]
20004074:	681b      	ldr	r3, [r3, #0]
20004076:	4a54      	ldr	r2, [pc, #336]	@ (200041c8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
20004078:	4293      	cmp	r3, r2
2000407a:	d057      	beq.n	2000412c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
2000407c:	68fb      	ldr	r3, [r7, #12]
2000407e:	681b      	ldr	r3, [r3, #0]
20004080:	4a52      	ldr	r2, [pc, #328]	@ (200041cc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
20004082:	4293      	cmp	r3, r2
20004084:	d050      	beq.n	20004128 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
20004086:	68fb      	ldr	r3, [r7, #12]
20004088:	681b      	ldr	r3, [r3, #0]
2000408a:	4a51      	ldr	r2, [pc, #324]	@ (200041d0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
2000408c:	4293      	cmp	r3, r2
2000408e:	d049      	beq.n	20004124 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
20004090:	68fb      	ldr	r3, [r7, #12]
20004092:	681b      	ldr	r3, [r3, #0]
20004094:	4a4f      	ldr	r2, [pc, #316]	@ (200041d4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
20004096:	4293      	cmp	r3, r2
20004098:	d042      	beq.n	20004120 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
2000409a:	68fb      	ldr	r3, [r7, #12]
2000409c:	681b      	ldr	r3, [r3, #0]
2000409e:	4a4e      	ldr	r2, [pc, #312]	@ (200041d8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
200040a0:	4293      	cmp	r3, r2
200040a2:	d03a      	beq.n	2000411a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
200040a4:	68fb      	ldr	r3, [r7, #12]
200040a6:	681b      	ldr	r3, [r3, #0]
200040a8:	4a4c      	ldr	r2, [pc, #304]	@ (200041dc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
200040aa:	4293      	cmp	r3, r2
200040ac:	d032      	beq.n	20004114 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
200040ae:	68fb      	ldr	r3, [r7, #12]
200040b0:	681b      	ldr	r3, [r3, #0]
200040b2:	4a4b      	ldr	r2, [pc, #300]	@ (200041e0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
200040b4:	4293      	cmp	r3, r2
200040b6:	d02a      	beq.n	2000410e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
200040b8:	68fb      	ldr	r3, [r7, #12]
200040ba:	681b      	ldr	r3, [r3, #0]
200040bc:	4a49      	ldr	r2, [pc, #292]	@ (200041e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
200040be:	4293      	cmp	r3, r2
200040c0:	d022      	beq.n	20004108 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
200040c2:	68fb      	ldr	r3, [r7, #12]
200040c4:	681b      	ldr	r3, [r3, #0]
200040c6:	4a48      	ldr	r2, [pc, #288]	@ (200041e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
200040c8:	4293      	cmp	r3, r2
200040ca:	d01a      	beq.n	20004102 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
200040cc:	68fb      	ldr	r3, [r7, #12]
200040ce:	681b      	ldr	r3, [r3, #0]
200040d0:	4a46      	ldr	r2, [pc, #280]	@ (200041ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
200040d2:	4293      	cmp	r3, r2
200040d4:	d012      	beq.n	200040fc <HAL_DMAEx_MultiBufferStart_IT+0xc94>
200040d6:	68fb      	ldr	r3, [r7, #12]
200040d8:	681b      	ldr	r3, [r3, #0]
200040da:	4a45      	ldr	r2, [pc, #276]	@ (200041f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
200040dc:	4293      	cmp	r3, r2
200040de:	d00a      	beq.n	200040f6 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
200040e0:	68fb      	ldr	r3, [r7, #12]
200040e2:	681b      	ldr	r3, [r3, #0]
200040e4:	4a43      	ldr	r2, [pc, #268]	@ (200041f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
200040e6:	4293      	cmp	r3, r2
200040e8:	d102      	bne.n	200040f0 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
200040ea:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
200040ee:	e01e      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
200040f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
200040f4:	e01b      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
200040f6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
200040fa:	e018      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
200040fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
20004100:	e015      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004102:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
20004106:	e012      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004108:	f44f 7380 	mov.w	r3, #256	@ 0x100
2000410c:	e00f      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
2000410e:	f44f 7380 	mov.w	r3, #256	@ 0x100
20004112:	e00c      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004114:	f44f 7380 	mov.w	r3, #256	@ 0x100
20004118:	e009      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
2000411a:	f44f 7380 	mov.w	r3, #256	@ 0x100
2000411e:	e006      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004120:	2304      	movs	r3, #4
20004122:	e004      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004124:	2304      	movs	r3, #4
20004126:	e002      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004128:	2304      	movs	r3, #4
2000412a:	e000      	b.n	2000412e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
2000412c:	2304      	movs	r3, #4
2000412e:	4a32      	ldr	r2, [pc, #200]	@ (200041f8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
20004130:	6093      	str	r3, [r2, #8]
20004132:	e0e9      	b.n	20004308 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20004134:	68fb      	ldr	r3, [r7, #12]
20004136:	681b      	ldr	r3, [r3, #0]
20004138:	461a      	mov	r2, r3
2000413a:	4b31      	ldr	r3, [pc, #196]	@ (20004200 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
2000413c:	429a      	cmp	r2, r3
2000413e:	f240 8083 	bls.w	20004248 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
20004142:	68fb      	ldr	r3, [r7, #12]
20004144:	681b      	ldr	r3, [r3, #0]
20004146:	4a20      	ldr	r2, [pc, #128]	@ (200041c8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
20004148:	4293      	cmp	r3, r2
2000414a:	d079      	beq.n	20004240 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
2000414c:	68fb      	ldr	r3, [r7, #12]
2000414e:	681b      	ldr	r3, [r3, #0]
20004150:	4a1e      	ldr	r2, [pc, #120]	@ (200041cc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
20004152:	4293      	cmp	r3, r2
20004154:	d072      	beq.n	2000423c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
20004156:	68fb      	ldr	r3, [r7, #12]
20004158:	681b      	ldr	r3, [r3, #0]
2000415a:	4a1d      	ldr	r2, [pc, #116]	@ (200041d0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
2000415c:	4293      	cmp	r3, r2
2000415e:	d06b      	beq.n	20004238 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
20004160:	68fb      	ldr	r3, [r7, #12]
20004162:	681b      	ldr	r3, [r3, #0]
20004164:	4a1b      	ldr	r2, [pc, #108]	@ (200041d4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
20004166:	4293      	cmp	r3, r2
20004168:	d064      	beq.n	20004234 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
2000416a:	68fb      	ldr	r3, [r7, #12]
2000416c:	681b      	ldr	r3, [r3, #0]
2000416e:	4a1a      	ldr	r2, [pc, #104]	@ (200041d8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
20004170:	4293      	cmp	r3, r2
20004172:	d05c      	beq.n	2000422e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
20004174:	68fb      	ldr	r3, [r7, #12]
20004176:	681b      	ldr	r3, [r3, #0]
20004178:	4a18      	ldr	r2, [pc, #96]	@ (200041dc <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
2000417a:	4293      	cmp	r3, r2
2000417c:	d054      	beq.n	20004228 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
2000417e:	68fb      	ldr	r3, [r7, #12]
20004180:	681b      	ldr	r3, [r3, #0]
20004182:	4a17      	ldr	r2, [pc, #92]	@ (200041e0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
20004184:	4293      	cmp	r3, r2
20004186:	d04c      	beq.n	20004222 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
20004188:	68fb      	ldr	r3, [r7, #12]
2000418a:	681b      	ldr	r3, [r3, #0]
2000418c:	4a15      	ldr	r2, [pc, #84]	@ (200041e4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
2000418e:	4293      	cmp	r3, r2
20004190:	d044      	beq.n	2000421c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
20004192:	68fb      	ldr	r3, [r7, #12]
20004194:	681b      	ldr	r3, [r3, #0]
20004196:	4a14      	ldr	r2, [pc, #80]	@ (200041e8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
20004198:	4293      	cmp	r3, r2
2000419a:	d03c      	beq.n	20004216 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
2000419c:	68fb      	ldr	r3, [r7, #12]
2000419e:	681b      	ldr	r3, [r3, #0]
200041a0:	4a12      	ldr	r2, [pc, #72]	@ (200041ec <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
200041a2:	4293      	cmp	r3, r2
200041a4:	d034      	beq.n	20004210 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
200041a6:	68fb      	ldr	r3, [r7, #12]
200041a8:	681b      	ldr	r3, [r3, #0]
200041aa:	4a11      	ldr	r2, [pc, #68]	@ (200041f0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
200041ac:	4293      	cmp	r3, r2
200041ae:	d02c      	beq.n	2000420a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
200041b0:	68fb      	ldr	r3, [r7, #12]
200041b2:	681b      	ldr	r3, [r3, #0]
200041b4:	4a0f      	ldr	r2, [pc, #60]	@ (200041f4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
200041b6:	4293      	cmp	r3, r2
200041b8:	d124      	bne.n	20004204 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
200041ba:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
200041be:	e040      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
200041c0:	40026000 	.word	0x40026000
200041c4:	40026458 	.word	0x40026458
200041c8:	40026010 	.word	0x40026010
200041cc:	40026410 	.word	0x40026410
200041d0:	40026070 	.word	0x40026070
200041d4:	40026470 	.word	0x40026470
200041d8:	40026028 	.word	0x40026028
200041dc:	40026428 	.word	0x40026428
200041e0:	40026088 	.word	0x40026088
200041e4:	40026488 	.word	0x40026488
200041e8:	40026040 	.word	0x40026040
200041ec:	40026440 	.word	0x40026440
200041f0:	400260a0 	.word	0x400260a0
200041f4:	400264a0 	.word	0x400264a0
200041f8:	40026400 	.word	0x40026400
200041fc:	400260b8 	.word	0x400260b8
20004200:	40026058 	.word	0x40026058
20004204:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
20004208:	e01b      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
2000420a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
2000420e:	e018      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004210:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
20004214:	e015      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004216:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
2000421a:	e012      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
2000421c:	f44f 7380 	mov.w	r3, #256	@ 0x100
20004220:	e00f      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004222:	f44f 7380 	mov.w	r3, #256	@ 0x100
20004226:	e00c      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004228:	f44f 7380 	mov.w	r3, #256	@ 0x100
2000422c:	e009      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
2000422e:	f44f 7380 	mov.w	r3, #256	@ 0x100
20004232:	e006      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004234:	2304      	movs	r3, #4
20004236:	e004      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004238:	2304      	movs	r3, #4
2000423a:	e002      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
2000423c:	2304      	movs	r3, #4
2000423e:	e000      	b.n	20004242 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004240:	2304      	movs	r3, #4
20004242:	4a8b      	ldr	r2, [pc, #556]	@ (20004470 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
20004244:	60d3      	str	r3, [r2, #12]
20004246:	e05f      	b.n	20004308 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20004248:	68fb      	ldr	r3, [r7, #12]
2000424a:	681b      	ldr	r3, [r3, #0]
2000424c:	4a89      	ldr	r2, [pc, #548]	@ (20004474 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
2000424e:	4293      	cmp	r3, r2
20004250:	d057      	beq.n	20004302 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
20004252:	68fb      	ldr	r3, [r7, #12]
20004254:	681b      	ldr	r3, [r3, #0]
20004256:	4a88      	ldr	r2, [pc, #544]	@ (20004478 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
20004258:	4293      	cmp	r3, r2
2000425a:	d050      	beq.n	200042fe <HAL_DMAEx_MultiBufferStart_IT+0xe96>
2000425c:	68fb      	ldr	r3, [r7, #12]
2000425e:	681b      	ldr	r3, [r3, #0]
20004260:	4a86      	ldr	r2, [pc, #536]	@ (2000447c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
20004262:	4293      	cmp	r3, r2
20004264:	d049      	beq.n	200042fa <HAL_DMAEx_MultiBufferStart_IT+0xe92>
20004266:	68fb      	ldr	r3, [r7, #12]
20004268:	681b      	ldr	r3, [r3, #0]
2000426a:	4a85      	ldr	r2, [pc, #532]	@ (20004480 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
2000426c:	4293      	cmp	r3, r2
2000426e:	d042      	beq.n	200042f6 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
20004270:	68fb      	ldr	r3, [r7, #12]
20004272:	681b      	ldr	r3, [r3, #0]
20004274:	4a83      	ldr	r2, [pc, #524]	@ (20004484 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
20004276:	4293      	cmp	r3, r2
20004278:	d03a      	beq.n	200042f0 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
2000427a:	68fb      	ldr	r3, [r7, #12]
2000427c:	681b      	ldr	r3, [r3, #0]
2000427e:	4a82      	ldr	r2, [pc, #520]	@ (20004488 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
20004280:	4293      	cmp	r3, r2
20004282:	d032      	beq.n	200042ea <HAL_DMAEx_MultiBufferStart_IT+0xe82>
20004284:	68fb      	ldr	r3, [r7, #12]
20004286:	681b      	ldr	r3, [r3, #0]
20004288:	4a80      	ldr	r2, [pc, #512]	@ (2000448c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
2000428a:	4293      	cmp	r3, r2
2000428c:	d02a      	beq.n	200042e4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
2000428e:	68fb      	ldr	r3, [r7, #12]
20004290:	681b      	ldr	r3, [r3, #0]
20004292:	4a7f      	ldr	r2, [pc, #508]	@ (20004490 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
20004294:	4293      	cmp	r3, r2
20004296:	d022      	beq.n	200042de <HAL_DMAEx_MultiBufferStart_IT+0xe76>
20004298:	68fb      	ldr	r3, [r7, #12]
2000429a:	681b      	ldr	r3, [r3, #0]
2000429c:	4a7d      	ldr	r2, [pc, #500]	@ (20004494 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
2000429e:	4293      	cmp	r3, r2
200042a0:	d01a      	beq.n	200042d8 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
200042a2:	68fb      	ldr	r3, [r7, #12]
200042a4:	681b      	ldr	r3, [r3, #0]
200042a6:	4a7c      	ldr	r2, [pc, #496]	@ (20004498 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
200042a8:	4293      	cmp	r3, r2
200042aa:	d012      	beq.n	200042d2 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
200042ac:	68fb      	ldr	r3, [r7, #12]
200042ae:	681b      	ldr	r3, [r3, #0]
200042b0:	4a7a      	ldr	r2, [pc, #488]	@ (2000449c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
200042b2:	4293      	cmp	r3, r2
200042b4:	d00a      	beq.n	200042cc <HAL_DMAEx_MultiBufferStart_IT+0xe64>
200042b6:	68fb      	ldr	r3, [r7, #12]
200042b8:	681b      	ldr	r3, [r3, #0]
200042ba:	4a79      	ldr	r2, [pc, #484]	@ (200044a0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
200042bc:	4293      	cmp	r3, r2
200042be:	d102      	bne.n	200042c6 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
200042c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
200042c4:	e01e      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200042c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
200042ca:	e01b      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200042cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
200042d0:	e018      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200042d2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
200042d6:	e015      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200042d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
200042dc:	e012      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200042de:	f44f 7380 	mov.w	r3, #256	@ 0x100
200042e2:	e00f      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200042e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
200042e8:	e00c      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200042ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
200042ee:	e009      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200042f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
200042f4:	e006      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200042f6:	2304      	movs	r3, #4
200042f8:	e004      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200042fa:	2304      	movs	r3, #4
200042fc:	e002      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
200042fe:	2304      	movs	r3, #4
20004300:	e000      	b.n	20004304 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
20004302:	2304      	movs	r3, #4
20004304:	4a5a      	ldr	r2, [pc, #360]	@ (20004470 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
20004306:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20004308:	68fb      	ldr	r3, [r7, #12]
2000430a:	681b      	ldr	r3, [r3, #0]
2000430c:	461a      	mov	r2, r3
2000430e:	4b65      	ldr	r3, [pc, #404]	@ (200044a4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
20004310:	429a      	cmp	r2, r3
20004312:	d95c      	bls.n	200043ce <HAL_DMAEx_MultiBufferStart_IT+0xf66>
20004314:	68fb      	ldr	r3, [r7, #12]
20004316:	681b      	ldr	r3, [r3, #0]
20004318:	4a56      	ldr	r2, [pc, #344]	@ (20004474 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
2000431a:	4293      	cmp	r3, r2
2000431c:	d053      	beq.n	200043c6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
2000431e:	68fb      	ldr	r3, [r7, #12]
20004320:	681b      	ldr	r3, [r3, #0]
20004322:	4a55      	ldr	r2, [pc, #340]	@ (20004478 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
20004324:	4293      	cmp	r3, r2
20004326:	d04c      	beq.n	200043c2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
20004328:	68fb      	ldr	r3, [r7, #12]
2000432a:	681b      	ldr	r3, [r3, #0]
2000432c:	4a53      	ldr	r2, [pc, #332]	@ (2000447c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
2000432e:	4293      	cmp	r3, r2
20004330:	d045      	beq.n	200043be <HAL_DMAEx_MultiBufferStart_IT+0xf56>
20004332:	68fb      	ldr	r3, [r7, #12]
20004334:	681b      	ldr	r3, [r3, #0]
20004336:	4a52      	ldr	r2, [pc, #328]	@ (20004480 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
20004338:	4293      	cmp	r3, r2
2000433a:	d03e      	beq.n	200043ba <HAL_DMAEx_MultiBufferStart_IT+0xf52>
2000433c:	68fb      	ldr	r3, [r7, #12]
2000433e:	681b      	ldr	r3, [r3, #0]
20004340:	4a50      	ldr	r2, [pc, #320]	@ (20004484 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
20004342:	4293      	cmp	r3, r2
20004344:	d037      	beq.n	200043b6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
20004346:	68fb      	ldr	r3, [r7, #12]
20004348:	681b      	ldr	r3, [r3, #0]
2000434a:	4a4f      	ldr	r2, [pc, #316]	@ (20004488 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
2000434c:	4293      	cmp	r3, r2
2000434e:	d030      	beq.n	200043b2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
20004350:	68fb      	ldr	r3, [r7, #12]
20004352:	681b      	ldr	r3, [r3, #0]
20004354:	4a4d      	ldr	r2, [pc, #308]	@ (2000448c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
20004356:	4293      	cmp	r3, r2
20004358:	d029      	beq.n	200043ae <HAL_DMAEx_MultiBufferStart_IT+0xf46>
2000435a:	68fb      	ldr	r3, [r7, #12]
2000435c:	681b      	ldr	r3, [r3, #0]
2000435e:	4a4c      	ldr	r2, [pc, #304]	@ (20004490 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
20004360:	4293      	cmp	r3, r2
20004362:	d022      	beq.n	200043aa <HAL_DMAEx_MultiBufferStart_IT+0xf42>
20004364:	68fb      	ldr	r3, [r7, #12]
20004366:	681b      	ldr	r3, [r3, #0]
20004368:	4a4a      	ldr	r2, [pc, #296]	@ (20004494 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
2000436a:	4293      	cmp	r3, r2
2000436c:	d01a      	beq.n	200043a4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
2000436e:	68fb      	ldr	r3, [r7, #12]
20004370:	681b      	ldr	r3, [r3, #0]
20004372:	4a49      	ldr	r2, [pc, #292]	@ (20004498 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
20004374:	4293      	cmp	r3, r2
20004376:	d012      	beq.n	2000439e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
20004378:	68fb      	ldr	r3, [r7, #12]
2000437a:	681b      	ldr	r3, [r3, #0]
2000437c:	4a47      	ldr	r2, [pc, #284]	@ (2000449c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
2000437e:	4293      	cmp	r3, r2
20004380:	d00a      	beq.n	20004398 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
20004382:	68fb      	ldr	r3, [r7, #12]
20004384:	681b      	ldr	r3, [r3, #0]
20004386:	4a46      	ldr	r2, [pc, #280]	@ (200044a0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
20004388:	4293      	cmp	r3, r2
2000438a:	d102      	bne.n	20004392 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
2000438c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20004390:	e01a      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
20004392:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20004396:	e017      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
20004398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
2000439c:	e014      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
2000439e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
200043a2:	e011      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200043a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
200043a8:	e00e      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200043aa:	2340      	movs	r3, #64	@ 0x40
200043ac:	e00c      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200043ae:	2340      	movs	r3, #64	@ 0x40
200043b0:	e00a      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200043b2:	2340      	movs	r3, #64	@ 0x40
200043b4:	e008      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200043b6:	2340      	movs	r3, #64	@ 0x40
200043b8:	e006      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200043ba:	2301      	movs	r3, #1
200043bc:	e004      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200043be:	2301      	movs	r3, #1
200043c0:	e002      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200043c2:	2301      	movs	r3, #1
200043c4:	e000      	b.n	200043c8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200043c6:	2301      	movs	r3, #1
200043c8:	4a37      	ldr	r2, [pc, #220]	@ (200044a8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
200043ca:	60d3      	str	r3, [r2, #12]
200043cc:	e141      	b.n	20004652 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200043ce:	68fb      	ldr	r3, [r7, #12]
200043d0:	681b      	ldr	r3, [r3, #0]
200043d2:	461a      	mov	r2, r3
200043d4:	4b35      	ldr	r3, [pc, #212]	@ (200044ac <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
200043d6:	429a      	cmp	r2, r3
200043d8:	d97c      	bls.n	200044d4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
200043da:	68fb      	ldr	r3, [r7, #12]
200043dc:	681b      	ldr	r3, [r3, #0]
200043de:	4a25      	ldr	r2, [pc, #148]	@ (20004474 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
200043e0:	4293      	cmp	r3, r2
200043e2:	d073      	beq.n	200044cc <HAL_DMAEx_MultiBufferStart_IT+0x1064>
200043e4:	68fb      	ldr	r3, [r7, #12]
200043e6:	681b      	ldr	r3, [r3, #0]
200043e8:	4a23      	ldr	r2, [pc, #140]	@ (20004478 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
200043ea:	4293      	cmp	r3, r2
200043ec:	d06c      	beq.n	200044c8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
200043ee:	68fb      	ldr	r3, [r7, #12]
200043f0:	681b      	ldr	r3, [r3, #0]
200043f2:	4a22      	ldr	r2, [pc, #136]	@ (2000447c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
200043f4:	4293      	cmp	r3, r2
200043f6:	d065      	beq.n	200044c4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
200043f8:	68fb      	ldr	r3, [r7, #12]
200043fa:	681b      	ldr	r3, [r3, #0]
200043fc:	4a20      	ldr	r2, [pc, #128]	@ (20004480 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
200043fe:	4293      	cmp	r3, r2
20004400:	d05e      	beq.n	200044c0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
20004402:	68fb      	ldr	r3, [r7, #12]
20004404:	681b      	ldr	r3, [r3, #0]
20004406:	4a1f      	ldr	r2, [pc, #124]	@ (20004484 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
20004408:	4293      	cmp	r3, r2
2000440a:	d057      	beq.n	200044bc <HAL_DMAEx_MultiBufferStart_IT+0x1054>
2000440c:	68fb      	ldr	r3, [r7, #12]
2000440e:	681b      	ldr	r3, [r3, #0]
20004410:	4a1d      	ldr	r2, [pc, #116]	@ (20004488 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
20004412:	4293      	cmp	r3, r2
20004414:	d050      	beq.n	200044b8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
20004416:	68fb      	ldr	r3, [r7, #12]
20004418:	681b      	ldr	r3, [r3, #0]
2000441a:	4a1c      	ldr	r2, [pc, #112]	@ (2000448c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
2000441c:	4293      	cmp	r3, r2
2000441e:	d049      	beq.n	200044b4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
20004420:	68fb      	ldr	r3, [r7, #12]
20004422:	681b      	ldr	r3, [r3, #0]
20004424:	4a1a      	ldr	r2, [pc, #104]	@ (20004490 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
20004426:	4293      	cmp	r3, r2
20004428:	d042      	beq.n	200044b0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
2000442a:	68fb      	ldr	r3, [r7, #12]
2000442c:	681b      	ldr	r3, [r3, #0]
2000442e:	4a19      	ldr	r2, [pc, #100]	@ (20004494 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
20004430:	4293      	cmp	r3, r2
20004432:	d01a      	beq.n	2000446a <HAL_DMAEx_MultiBufferStart_IT+0x1002>
20004434:	68fb      	ldr	r3, [r7, #12]
20004436:	681b      	ldr	r3, [r3, #0]
20004438:	4a17      	ldr	r2, [pc, #92]	@ (20004498 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
2000443a:	4293      	cmp	r3, r2
2000443c:	d012      	beq.n	20004464 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
2000443e:	68fb      	ldr	r3, [r7, #12]
20004440:	681b      	ldr	r3, [r3, #0]
20004442:	4a16      	ldr	r2, [pc, #88]	@ (2000449c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
20004444:	4293      	cmp	r3, r2
20004446:	d00a      	beq.n	2000445e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
20004448:	68fb      	ldr	r3, [r7, #12]
2000444a:	681b      	ldr	r3, [r3, #0]
2000444c:	4a14      	ldr	r2, [pc, #80]	@ (200044a0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
2000444e:	4293      	cmp	r3, r2
20004450:	d102      	bne.n	20004458 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
20004452:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20004456:	e03a      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
20004458:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
2000445c:	e037      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
2000445e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20004462:	e034      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
20004464:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20004468:	e031      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
2000446a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
2000446e:	e02e      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
20004470:	40026000 	.word	0x40026000
20004474:	40026010 	.word	0x40026010
20004478:	40026410 	.word	0x40026410
2000447c:	40026070 	.word	0x40026070
20004480:	40026470 	.word	0x40026470
20004484:	40026028 	.word	0x40026028
20004488:	40026428 	.word	0x40026428
2000448c:	40026088 	.word	0x40026088
20004490:	40026488 	.word	0x40026488
20004494:	40026040 	.word	0x40026040
20004498:	40026440 	.word	0x40026440
2000449c:	400260a0 	.word	0x400260a0
200044a0:	400264a0 	.word	0x400264a0
200044a4:	40026458 	.word	0x40026458
200044a8:	40026400 	.word	0x40026400
200044ac:	400260b8 	.word	0x400260b8
200044b0:	2340      	movs	r3, #64	@ 0x40
200044b2:	e00c      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200044b4:	2340      	movs	r3, #64	@ 0x40
200044b6:	e00a      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200044b8:	2340      	movs	r3, #64	@ 0x40
200044ba:	e008      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200044bc:	2340      	movs	r3, #64	@ 0x40
200044be:	e006      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200044c0:	2301      	movs	r3, #1
200044c2:	e004      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200044c4:	2301      	movs	r3, #1
200044c6:	e002      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200044c8:	2301      	movs	r3, #1
200044ca:	e000      	b.n	200044ce <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200044cc:	2301      	movs	r3, #1
200044ce:	4a7b      	ldr	r2, [pc, #492]	@ (200046bc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
200044d0:	6093      	str	r3, [r2, #8]
200044d2:	e0be      	b.n	20004652 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
200044d4:	68fb      	ldr	r3, [r7, #12]
200044d6:	681b      	ldr	r3, [r3, #0]
200044d8:	461a      	mov	r2, r3
200044da:	4b79      	ldr	r3, [pc, #484]	@ (200046c0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
200044dc:	429a      	cmp	r2, r3
200044de:	d95c      	bls.n	2000459a <HAL_DMAEx_MultiBufferStart_IT+0x1132>
200044e0:	68fb      	ldr	r3, [r7, #12]
200044e2:	681b      	ldr	r3, [r3, #0]
200044e4:	4a77      	ldr	r2, [pc, #476]	@ (200046c4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
200044e6:	4293      	cmp	r3, r2
200044e8:	d053      	beq.n	20004592 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
200044ea:	68fb      	ldr	r3, [r7, #12]
200044ec:	681b      	ldr	r3, [r3, #0]
200044ee:	4a76      	ldr	r2, [pc, #472]	@ (200046c8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
200044f0:	4293      	cmp	r3, r2
200044f2:	d04c      	beq.n	2000458e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
200044f4:	68fb      	ldr	r3, [r7, #12]
200044f6:	681b      	ldr	r3, [r3, #0]
200044f8:	4a74      	ldr	r2, [pc, #464]	@ (200046cc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
200044fa:	4293      	cmp	r3, r2
200044fc:	d045      	beq.n	2000458a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
200044fe:	68fb      	ldr	r3, [r7, #12]
20004500:	681b      	ldr	r3, [r3, #0]
20004502:	4a73      	ldr	r2, [pc, #460]	@ (200046d0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
20004504:	4293      	cmp	r3, r2
20004506:	d03e      	beq.n	20004586 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
20004508:	68fb      	ldr	r3, [r7, #12]
2000450a:	681b      	ldr	r3, [r3, #0]
2000450c:	4a71      	ldr	r2, [pc, #452]	@ (200046d4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
2000450e:	4293      	cmp	r3, r2
20004510:	d037      	beq.n	20004582 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
20004512:	68fb      	ldr	r3, [r7, #12]
20004514:	681b      	ldr	r3, [r3, #0]
20004516:	4a70      	ldr	r2, [pc, #448]	@ (200046d8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
20004518:	4293      	cmp	r3, r2
2000451a:	d030      	beq.n	2000457e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
2000451c:	68fb      	ldr	r3, [r7, #12]
2000451e:	681b      	ldr	r3, [r3, #0]
20004520:	4a6e      	ldr	r2, [pc, #440]	@ (200046dc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
20004522:	4293      	cmp	r3, r2
20004524:	d029      	beq.n	2000457a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
20004526:	68fb      	ldr	r3, [r7, #12]
20004528:	681b      	ldr	r3, [r3, #0]
2000452a:	4a6d      	ldr	r2, [pc, #436]	@ (200046e0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
2000452c:	4293      	cmp	r3, r2
2000452e:	d022      	beq.n	20004576 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
20004530:	68fb      	ldr	r3, [r7, #12]
20004532:	681b      	ldr	r3, [r3, #0]
20004534:	4a6b      	ldr	r2, [pc, #428]	@ (200046e4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
20004536:	4293      	cmp	r3, r2
20004538:	d01a      	beq.n	20004570 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
2000453a:	68fb      	ldr	r3, [r7, #12]
2000453c:	681b      	ldr	r3, [r3, #0]
2000453e:	4a6a      	ldr	r2, [pc, #424]	@ (200046e8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
20004540:	4293      	cmp	r3, r2
20004542:	d012      	beq.n	2000456a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
20004544:	68fb      	ldr	r3, [r7, #12]
20004546:	681b      	ldr	r3, [r3, #0]
20004548:	4a68      	ldr	r2, [pc, #416]	@ (200046ec <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
2000454a:	4293      	cmp	r3, r2
2000454c:	d00a      	beq.n	20004564 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
2000454e:	68fb      	ldr	r3, [r7, #12]
20004550:	681b      	ldr	r3, [r3, #0]
20004552:	4a67      	ldr	r2, [pc, #412]	@ (200046f0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
20004554:	4293      	cmp	r3, r2
20004556:	d102      	bne.n	2000455e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
20004558:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
2000455c:	e01a      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
2000455e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
20004562:	e017      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004564:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20004568:	e014      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
2000456a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
2000456e:	e011      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004570:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20004574:	e00e      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004576:	2340      	movs	r3, #64	@ 0x40
20004578:	e00c      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
2000457a:	2340      	movs	r3, #64	@ 0x40
2000457c:	e00a      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
2000457e:	2340      	movs	r3, #64	@ 0x40
20004580:	e008      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004582:	2340      	movs	r3, #64	@ 0x40
20004584:	e006      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004586:	2301      	movs	r3, #1
20004588:	e004      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
2000458a:	2301      	movs	r3, #1
2000458c:	e002      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
2000458e:	2301      	movs	r3, #1
20004590:	e000      	b.n	20004594 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
20004592:	2301      	movs	r3, #1
20004594:	4a57      	ldr	r2, [pc, #348]	@ (200046f4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
20004596:	60d3      	str	r3, [r2, #12]
20004598:	e05b      	b.n	20004652 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
2000459a:	68fb      	ldr	r3, [r7, #12]
2000459c:	681b      	ldr	r3, [r3, #0]
2000459e:	4a49      	ldr	r2, [pc, #292]	@ (200046c4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
200045a0:	4293      	cmp	r3, r2
200045a2:	d053      	beq.n	2000464c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
200045a4:	68fb      	ldr	r3, [r7, #12]
200045a6:	681b      	ldr	r3, [r3, #0]
200045a8:	4a47      	ldr	r2, [pc, #284]	@ (200046c8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
200045aa:	4293      	cmp	r3, r2
200045ac:	d04c      	beq.n	20004648 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
200045ae:	68fb      	ldr	r3, [r7, #12]
200045b0:	681b      	ldr	r3, [r3, #0]
200045b2:	4a46      	ldr	r2, [pc, #280]	@ (200046cc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
200045b4:	4293      	cmp	r3, r2
200045b6:	d045      	beq.n	20004644 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
200045b8:	68fb      	ldr	r3, [r7, #12]
200045ba:	681b      	ldr	r3, [r3, #0]
200045bc:	4a44      	ldr	r2, [pc, #272]	@ (200046d0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
200045be:	4293      	cmp	r3, r2
200045c0:	d03e      	beq.n	20004640 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
200045c2:	68fb      	ldr	r3, [r7, #12]
200045c4:	681b      	ldr	r3, [r3, #0]
200045c6:	4a43      	ldr	r2, [pc, #268]	@ (200046d4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
200045c8:	4293      	cmp	r3, r2
200045ca:	d037      	beq.n	2000463c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
200045cc:	68fb      	ldr	r3, [r7, #12]
200045ce:	681b      	ldr	r3, [r3, #0]
200045d0:	4a41      	ldr	r2, [pc, #260]	@ (200046d8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
200045d2:	4293      	cmp	r3, r2
200045d4:	d030      	beq.n	20004638 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
200045d6:	68fb      	ldr	r3, [r7, #12]
200045d8:	681b      	ldr	r3, [r3, #0]
200045da:	4a40      	ldr	r2, [pc, #256]	@ (200046dc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
200045dc:	4293      	cmp	r3, r2
200045de:	d029      	beq.n	20004634 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
200045e0:	68fb      	ldr	r3, [r7, #12]
200045e2:	681b      	ldr	r3, [r3, #0]
200045e4:	4a3e      	ldr	r2, [pc, #248]	@ (200046e0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
200045e6:	4293      	cmp	r3, r2
200045e8:	d022      	beq.n	20004630 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
200045ea:	68fb      	ldr	r3, [r7, #12]
200045ec:	681b      	ldr	r3, [r3, #0]
200045ee:	4a3d      	ldr	r2, [pc, #244]	@ (200046e4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
200045f0:	4293      	cmp	r3, r2
200045f2:	d01a      	beq.n	2000462a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
200045f4:	68fb      	ldr	r3, [r7, #12]
200045f6:	681b      	ldr	r3, [r3, #0]
200045f8:	4a3b      	ldr	r2, [pc, #236]	@ (200046e8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
200045fa:	4293      	cmp	r3, r2
200045fc:	d012      	beq.n	20004624 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
200045fe:	68fb      	ldr	r3, [r7, #12]
20004600:	681b      	ldr	r3, [r3, #0]
20004602:	4a3a      	ldr	r2, [pc, #232]	@ (200046ec <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
20004604:	4293      	cmp	r3, r2
20004606:	d00a      	beq.n	2000461e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
20004608:	68fb      	ldr	r3, [r7, #12]
2000460a:	681b      	ldr	r3, [r3, #0]
2000460c:	4a38      	ldr	r2, [pc, #224]	@ (200046f0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
2000460e:	4293      	cmp	r3, r2
20004610:	d102      	bne.n	20004618 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
20004612:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20004616:	e01a      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004618:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
2000461c:	e017      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
2000461e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20004622:	e014      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004624:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20004628:	e011      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
2000462a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
2000462e:	e00e      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004630:	2340      	movs	r3, #64	@ 0x40
20004632:	e00c      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004634:	2340      	movs	r3, #64	@ 0x40
20004636:	e00a      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004638:	2340      	movs	r3, #64	@ 0x40
2000463a:	e008      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
2000463c:	2340      	movs	r3, #64	@ 0x40
2000463e:	e006      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004640:	2301      	movs	r3, #1
20004642:	e004      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004644:	2301      	movs	r3, #1
20004646:	e002      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004648:	2301      	movs	r3, #1
2000464a:	e000      	b.n	2000464e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
2000464c:	2301      	movs	r3, #1
2000464e:	4a29      	ldr	r2, [pc, #164]	@ (200046f4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
20004650:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
20004652:	68fb      	ldr	r3, [r7, #12]
20004654:	681b      	ldr	r3, [r3, #0]
20004656:	681a      	ldr	r2, [r3, #0]
20004658:	68fb      	ldr	r3, [r7, #12]
2000465a:	681b      	ldr	r3, [r3, #0]
2000465c:	f042 0216 	orr.w	r2, r2, #22
20004660:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
20004662:	68fb      	ldr	r3, [r7, #12]
20004664:	681b      	ldr	r3, [r3, #0]
20004666:	695a      	ldr	r2, [r3, #20]
20004668:	68fb      	ldr	r3, [r7, #12]
2000466a:	681b      	ldr	r3, [r3, #0]
2000466c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
20004670:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20004672:	68fb      	ldr	r3, [r7, #12]
20004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20004676:	2b00      	cmp	r3, #0
20004678:	d103      	bne.n	20004682 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
2000467a:	68fb      	ldr	r3, [r7, #12]
2000467c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2000467e:	2b00      	cmp	r3, #0
20004680:	d007      	beq.n	20004692 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
20004682:	68fb      	ldr	r3, [r7, #12]
20004684:	681b      	ldr	r3, [r3, #0]
20004686:	681a      	ldr	r2, [r3, #0]
20004688:	68fb      	ldr	r3, [r7, #12]
2000468a:	681b      	ldr	r3, [r3, #0]
2000468c:	f042 0208 	orr.w	r2, r2, #8
20004690:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
20004692:	68fb      	ldr	r3, [r7, #12]
20004694:	681b      	ldr	r3, [r3, #0]
20004696:	681a      	ldr	r2, [r3, #0]
20004698:	68fb      	ldr	r3, [r7, #12]
2000469a:	681b      	ldr	r3, [r3, #0]
2000469c:	f042 0201 	orr.w	r2, r2, #1
200046a0:	601a      	str	r2, [r3, #0]
200046a2:	e005      	b.n	200046b0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
200046a4:	68fb      	ldr	r3, [r7, #12]
200046a6:	2200      	movs	r2, #0
200046a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
200046ac:	2302      	movs	r3, #2
200046ae:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
200046b0:	7dfb      	ldrb	r3, [r7, #23]
}
200046b2:	4618      	mov	r0, r3
200046b4:	3718      	adds	r7, #24
200046b6:	46bd      	mov	sp, r7
200046b8:	bd80      	pop	{r7, pc}
200046ba:	bf00      	nop
200046bc:	40026400 	.word	0x40026400
200046c0:	40026058 	.word	0x40026058
200046c4:	40026010 	.word	0x40026010
200046c8:	40026410 	.word	0x40026410
200046cc:	40026070 	.word	0x40026070
200046d0:	40026470 	.word	0x40026470
200046d4:	40026028 	.word	0x40026028
200046d8:	40026428 	.word	0x40026428
200046dc:	40026088 	.word	0x40026088
200046e0:	40026488 	.word	0x40026488
200046e4:	40026040 	.word	0x40026040
200046e8:	40026440 	.word	0x40026440
200046ec:	400260a0 	.word	0x400260a0
200046f0:	400264a0 	.word	0x400264a0
200046f4:	40026000 	.word	0x40026000

200046f8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
200046f8:	b480      	push	{r7}
200046fa:	b085      	sub	sp, #20
200046fc:	af00      	add	r7, sp, #0
200046fe:	60f8      	str	r0, [r7, #12]
20004700:	60b9      	str	r1, [r7, #8]
20004702:	4613      	mov	r3, r2
20004704:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
20004706:	79fb      	ldrb	r3, [r7, #7]
20004708:	2b00      	cmp	r3, #0
2000470a:	d104      	bne.n	20004716 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
2000470c:	68fb      	ldr	r3, [r7, #12]
2000470e:	681b      	ldr	r3, [r3, #0]
20004710:	68ba      	ldr	r2, [r7, #8]
20004712:	60da      	str	r2, [r3, #12]
20004714:	e003      	b.n	2000471e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
20004716:	68fb      	ldr	r3, [r7, #12]
20004718:	681b      	ldr	r3, [r3, #0]
2000471a:	68ba      	ldr	r2, [r7, #8]
2000471c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
2000471e:	2300      	movs	r3, #0
}
20004720:	4618      	mov	r0, r3
20004722:	3714      	adds	r7, #20
20004724:	46bd      	mov	sp, r7
20004726:	f85d 7b04 	ldr.w	r7, [sp], #4
2000472a:	4770      	bx	lr

2000472c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
2000472c:	b480      	push	{r7}
2000472e:	b085      	sub	sp, #20
20004730:	af00      	add	r7, sp, #0
20004732:	60f8      	str	r0, [r7, #12]
20004734:	60b9      	str	r1, [r7, #8]
20004736:	607a      	str	r2, [r7, #4]
20004738:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
2000473a:	68fb      	ldr	r3, [r7, #12]
2000473c:	681b      	ldr	r3, [r3, #0]
2000473e:	683a      	ldr	r2, [r7, #0]
20004740:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20004742:	68fb      	ldr	r3, [r7, #12]
20004744:	689b      	ldr	r3, [r3, #8]
20004746:	2b40      	cmp	r3, #64	@ 0x40
20004748:	d108      	bne.n	2000475c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
2000474a:	68fb      	ldr	r3, [r7, #12]
2000474c:	681b      	ldr	r3, [r3, #0]
2000474e:	687a      	ldr	r2, [r7, #4]
20004750:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
20004752:	68fb      	ldr	r3, [r7, #12]
20004754:	681b      	ldr	r3, [r3, #0]
20004756:	68ba      	ldr	r2, [r7, #8]
20004758:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
2000475a:	e007      	b.n	2000476c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
2000475c:	68fb      	ldr	r3, [r7, #12]
2000475e:	681b      	ldr	r3, [r3, #0]
20004760:	68ba      	ldr	r2, [r7, #8]
20004762:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
20004764:	68fb      	ldr	r3, [r7, #12]
20004766:	681b      	ldr	r3, [r3, #0]
20004768:	687a      	ldr	r2, [r7, #4]
2000476a:	60da      	str	r2, [r3, #12]
}
2000476c:	bf00      	nop
2000476e:	3714      	adds	r7, #20
20004770:	46bd      	mov	sp, r7
20004772:	f85d 7b04 	ldr.w	r7, [sp], #4
20004776:	4770      	bx	lr

20004778 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
20004778:	b480      	push	{r7}
2000477a:	b087      	sub	sp, #28
2000477c:	af00      	add	r7, sp, #0
2000477e:	6078      	str	r0, [r7, #4]
20004780:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
20004782:	687b      	ldr	r3, [r7, #4]
20004784:	2b00      	cmp	r3, #0
20004786:	d002      	beq.n	2000478e <HAL_EXTI_SetConfigLine+0x16>
20004788:	683b      	ldr	r3, [r7, #0]
2000478a:	2b00      	cmp	r3, #0
2000478c:	d101      	bne.n	20004792 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
2000478e:	2301      	movs	r3, #1
20004790:	e08f      	b.n	200048b2 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
20004792:	683b      	ldr	r3, [r7, #0]
20004794:	681a      	ldr	r2, [r3, #0]
20004796:	687b      	ldr	r3, [r7, #4]
20004798:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
2000479a:	683b      	ldr	r3, [r7, #0]
2000479c:	681b      	ldr	r3, [r3, #0]
2000479e:	f003 031f 	and.w	r3, r3, #31
200047a2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
200047a4:	2201      	movs	r2, #1
200047a6:	697b      	ldr	r3, [r7, #20]
200047a8:	fa02 f303 	lsl.w	r3, r2, r3
200047ac:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
200047ae:	683b      	ldr	r3, [r7, #0]
200047b0:	681b      	ldr	r3, [r3, #0]
200047b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200047b6:	2b00      	cmp	r3, #0
200047b8:	d052      	beq.n	20004860 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
200047ba:	683b      	ldr	r3, [r7, #0]
200047bc:	689b      	ldr	r3, [r3, #8]
200047be:	f003 0301 	and.w	r3, r3, #1
200047c2:	2b00      	cmp	r3, #0
200047c4:	d006      	beq.n	200047d4 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
200047c6:	4b3e      	ldr	r3, [pc, #248]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
200047c8:	689a      	ldr	r2, [r3, #8]
200047ca:	493d      	ldr	r1, [pc, #244]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
200047cc:	693b      	ldr	r3, [r7, #16]
200047ce:	4313      	orrs	r3, r2
200047d0:	608b      	str	r3, [r1, #8]
200047d2:	e006      	b.n	200047e2 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
200047d4:	4b3a      	ldr	r3, [pc, #232]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
200047d6:	689a      	ldr	r2, [r3, #8]
200047d8:	693b      	ldr	r3, [r7, #16]
200047da:	43db      	mvns	r3, r3
200047dc:	4938      	ldr	r1, [pc, #224]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
200047de:	4013      	ands	r3, r2
200047e0:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
200047e2:	683b      	ldr	r3, [r7, #0]
200047e4:	689b      	ldr	r3, [r3, #8]
200047e6:	f003 0302 	and.w	r3, r3, #2
200047ea:	2b00      	cmp	r3, #0
200047ec:	d006      	beq.n	200047fc <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
200047ee:	4b34      	ldr	r3, [pc, #208]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
200047f0:	68da      	ldr	r2, [r3, #12]
200047f2:	4933      	ldr	r1, [pc, #204]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
200047f4:	693b      	ldr	r3, [r7, #16]
200047f6:	4313      	orrs	r3, r2
200047f8:	60cb      	str	r3, [r1, #12]
200047fa:	e006      	b.n	2000480a <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
200047fc:	4b30      	ldr	r3, [pc, #192]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
200047fe:	68da      	ldr	r2, [r3, #12]
20004800:	693b      	ldr	r3, [r7, #16]
20004802:	43db      	mvns	r3, r3
20004804:	492e      	ldr	r1, [pc, #184]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
20004806:	4013      	ands	r3, r2
20004808:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
2000480a:	683b      	ldr	r3, [r7, #0]
2000480c:	681b      	ldr	r3, [r3, #0]
2000480e:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
20004812:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
20004816:	d123      	bne.n	20004860 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
20004818:	4a2a      	ldr	r2, [pc, #168]	@ (200048c4 <HAL_EXTI_SetConfigLine+0x14c>)
2000481a:	697b      	ldr	r3, [r7, #20]
2000481c:	089b      	lsrs	r3, r3, #2
2000481e:	3302      	adds	r3, #2
20004820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004824:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20004826:	697b      	ldr	r3, [r7, #20]
20004828:	f003 0303 	and.w	r3, r3, #3
2000482c:	009b      	lsls	r3, r3, #2
2000482e:	220f      	movs	r2, #15
20004830:	fa02 f303 	lsl.w	r3, r2, r3
20004834:	43db      	mvns	r3, r3
20004836:	68fa      	ldr	r2, [r7, #12]
20004838:	4013      	ands	r3, r2
2000483a:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
2000483c:	683b      	ldr	r3, [r7, #0]
2000483e:	68da      	ldr	r2, [r3, #12]
20004840:	697b      	ldr	r3, [r7, #20]
20004842:	f003 0303 	and.w	r3, r3, #3
20004846:	009b      	lsls	r3, r3, #2
20004848:	fa02 f303 	lsl.w	r3, r2, r3
2000484c:	68fa      	ldr	r2, [r7, #12]
2000484e:	4313      	orrs	r3, r2
20004850:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
20004852:	491c      	ldr	r1, [pc, #112]	@ (200048c4 <HAL_EXTI_SetConfigLine+0x14c>)
20004854:	697b      	ldr	r3, [r7, #20]
20004856:	089b      	lsrs	r3, r3, #2
20004858:	3302      	adds	r3, #2
2000485a:	68fa      	ldr	r2, [r7, #12]
2000485c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
20004860:	683b      	ldr	r3, [r7, #0]
20004862:	685b      	ldr	r3, [r3, #4]
20004864:	f003 0301 	and.w	r3, r3, #1
20004868:	2b00      	cmp	r3, #0
2000486a:	d006      	beq.n	2000487a <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
2000486c:	4b14      	ldr	r3, [pc, #80]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
2000486e:	681a      	ldr	r2, [r3, #0]
20004870:	4913      	ldr	r1, [pc, #76]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
20004872:	693b      	ldr	r3, [r7, #16]
20004874:	4313      	orrs	r3, r2
20004876:	600b      	str	r3, [r1, #0]
20004878:	e006      	b.n	20004888 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
2000487a:	4b11      	ldr	r3, [pc, #68]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
2000487c:	681a      	ldr	r2, [r3, #0]
2000487e:	693b      	ldr	r3, [r7, #16]
20004880:	43db      	mvns	r3, r3
20004882:	490f      	ldr	r1, [pc, #60]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
20004884:	4013      	ands	r3, r2
20004886:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
20004888:	683b      	ldr	r3, [r7, #0]
2000488a:	685b      	ldr	r3, [r3, #4]
2000488c:	f003 0302 	and.w	r3, r3, #2
20004890:	2b00      	cmp	r3, #0
20004892:	d006      	beq.n	200048a2 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
20004894:	4b0a      	ldr	r3, [pc, #40]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
20004896:	685a      	ldr	r2, [r3, #4]
20004898:	4909      	ldr	r1, [pc, #36]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
2000489a:	693b      	ldr	r3, [r7, #16]
2000489c:	4313      	orrs	r3, r2
2000489e:	604b      	str	r3, [r1, #4]
200048a0:	e006      	b.n	200048b0 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
200048a2:	4b07      	ldr	r3, [pc, #28]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
200048a4:	685a      	ldr	r2, [r3, #4]
200048a6:	693b      	ldr	r3, [r7, #16]
200048a8:	43db      	mvns	r3, r3
200048aa:	4905      	ldr	r1, [pc, #20]	@ (200048c0 <HAL_EXTI_SetConfigLine+0x148>)
200048ac:	4013      	ands	r3, r2
200048ae:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
200048b0:	2300      	movs	r3, #0
}
200048b2:	4618      	mov	r0, r3
200048b4:	371c      	adds	r7, #28
200048b6:	46bd      	mov	sp, r7
200048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200048bc:	4770      	bx	lr
200048be:	bf00      	nop
200048c0:	40013c00 	.word	0x40013c00
200048c4:	40013800 	.word	0x40013800

200048c8 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
200048c8:	b480      	push	{r7}
200048ca:	b087      	sub	sp, #28
200048cc:	af00      	add	r7, sp, #0
200048ce:	6078      	str	r0, [r7, #4]
200048d0:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
200048d2:	687b      	ldr	r3, [r7, #4]
200048d4:	2b00      	cmp	r3, #0
200048d6:	d002      	beq.n	200048de <HAL_EXTI_GetConfigLine+0x16>
200048d8:	683b      	ldr	r3, [r7, #0]
200048da:	2b00      	cmp	r3, #0
200048dc:	d101      	bne.n	200048e2 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
200048de:	2301      	movs	r3, #1
200048e0:	e061      	b.n	200049a6 <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
200048e2:	687b      	ldr	r3, [r7, #4]
200048e4:	681a      	ldr	r2, [r3, #0]
200048e6:	683b      	ldr	r3, [r7, #0]
200048e8:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
200048ea:	683b      	ldr	r3, [r7, #0]
200048ec:	681b      	ldr	r3, [r3, #0]
200048ee:	f003 031f 	and.w	r3, r3, #31
200048f2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
200048f4:	2201      	movs	r2, #1
200048f6:	697b      	ldr	r3, [r7, #20]
200048f8:	fa02 f303 	lsl.w	r3, r2, r3
200048fc:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
200048fe:	4b2d      	ldr	r3, [pc, #180]	@ (200049b4 <HAL_EXTI_GetConfigLine+0xec>)
20004900:	681a      	ldr	r2, [r3, #0]
20004902:	693b      	ldr	r3, [r7, #16]
20004904:	4013      	ands	r3, r2
20004906:	2b00      	cmp	r3, #0
20004908:	d003      	beq.n	20004912 <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
2000490a:	683b      	ldr	r3, [r7, #0]
2000490c:	2201      	movs	r2, #1
2000490e:	605a      	str	r2, [r3, #4]
20004910:	e002      	b.n	20004918 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
20004912:	683b      	ldr	r3, [r7, #0]
20004914:	2200      	movs	r2, #0
20004916:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
20004918:	4b26      	ldr	r3, [pc, #152]	@ (200049b4 <HAL_EXTI_GetConfigLine+0xec>)
2000491a:	685a      	ldr	r2, [r3, #4]
2000491c:	693b      	ldr	r3, [r7, #16]
2000491e:	4013      	ands	r3, r2
20004920:	2b00      	cmp	r3, #0
20004922:	d005      	beq.n	20004930 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
20004924:	683b      	ldr	r3, [r7, #0]
20004926:	685b      	ldr	r3, [r3, #4]
20004928:	f043 0202 	orr.w	r2, r3, #2
2000492c:	683b      	ldr	r3, [r7, #0]
2000492e:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
20004930:	683b      	ldr	r3, [r7, #0]
20004932:	2200      	movs	r2, #0
20004934:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
20004936:	683b      	ldr	r3, [r7, #0]
20004938:	2200      	movs	r2, #0
2000493a:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
2000493c:	683b      	ldr	r3, [r7, #0]
2000493e:	681b      	ldr	r3, [r3, #0]
20004940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20004944:	2b00      	cmp	r3, #0
20004946:	d02d      	beq.n	200049a4 <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
20004948:	4b1a      	ldr	r3, [pc, #104]	@ (200049b4 <HAL_EXTI_GetConfigLine+0xec>)
2000494a:	689a      	ldr	r2, [r3, #8]
2000494c:	693b      	ldr	r3, [r7, #16]
2000494e:	4013      	ands	r3, r2
20004950:	2b00      	cmp	r3, #0
20004952:	d002      	beq.n	2000495a <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
20004954:	683b      	ldr	r3, [r7, #0]
20004956:	2201      	movs	r2, #1
20004958:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
2000495a:	4b16      	ldr	r3, [pc, #88]	@ (200049b4 <HAL_EXTI_GetConfigLine+0xec>)
2000495c:	68da      	ldr	r2, [r3, #12]
2000495e:	693b      	ldr	r3, [r7, #16]
20004960:	4013      	ands	r3, r2
20004962:	2b00      	cmp	r3, #0
20004964:	d005      	beq.n	20004972 <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
20004966:	683b      	ldr	r3, [r7, #0]
20004968:	689b      	ldr	r3, [r3, #8]
2000496a:	f043 0202 	orr.w	r2, r3, #2
2000496e:	683b      	ldr	r3, [r7, #0]
20004970:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
20004972:	683b      	ldr	r3, [r7, #0]
20004974:	681b      	ldr	r3, [r3, #0]
20004976:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
2000497a:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
2000497e:	d111      	bne.n	200049a4 <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
20004980:	4a0d      	ldr	r2, [pc, #52]	@ (200049b8 <HAL_EXTI_GetConfigLine+0xf0>)
20004982:	697b      	ldr	r3, [r7, #20]
20004984:	089b      	lsrs	r3, r3, #2
20004986:	3302      	adds	r3, #2
20004988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000498c:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = (regval >> (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & SYSCFG_EXTICR1_EXTI0;
2000498e:	697b      	ldr	r3, [r7, #20]
20004990:	f003 0303 	and.w	r3, r3, #3
20004994:	009b      	lsls	r3, r3, #2
20004996:	68fa      	ldr	r2, [r7, #12]
20004998:	fa22 f303 	lsr.w	r3, r2, r3
2000499c:	f003 020f 	and.w	r2, r3, #15
200049a0:	683b      	ldr	r3, [r7, #0]
200049a2:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
200049a4:	2300      	movs	r3, #0
}
200049a6:	4618      	mov	r0, r3
200049a8:	371c      	adds	r7, #28
200049aa:	46bd      	mov	sp, r7
200049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200049b0:	4770      	bx	lr
200049b2:	bf00      	nop
200049b4:	40013c00 	.word	0x40013c00
200049b8:	40013800 	.word	0x40013800

200049bc <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
200049bc:	b480      	push	{r7}
200049be:	b087      	sub	sp, #28
200049c0:	af00      	add	r7, sp, #0
200049c2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
200049c4:	687b      	ldr	r3, [r7, #4]
200049c6:	2b00      	cmp	r3, #0
200049c8:	d101      	bne.n	200049ce <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
200049ca:	2301      	movs	r3, #1
200049cc:	e04c      	b.n	20004a68 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
200049ce:	687b      	ldr	r3, [r7, #4]
200049d0:	681b      	ldr	r3, [r3, #0]
200049d2:	f003 031f 	and.w	r3, r3, #31
200049d6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
200049d8:	2201      	movs	r2, #1
200049da:	697b      	ldr	r3, [r7, #20]
200049dc:	fa02 f303 	lsl.w	r3, r2, r3
200049e0:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
200049e2:	4b24      	ldr	r3, [pc, #144]	@ (20004a74 <HAL_EXTI_ClearConfigLine+0xb8>)
200049e4:	681a      	ldr	r2, [r3, #0]
200049e6:	693b      	ldr	r3, [r7, #16]
200049e8:	43db      	mvns	r3, r3
200049ea:	4922      	ldr	r1, [pc, #136]	@ (20004a74 <HAL_EXTI_ClearConfigLine+0xb8>)
200049ec:	4013      	ands	r3, r2
200049ee:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
200049f0:	4b20      	ldr	r3, [pc, #128]	@ (20004a74 <HAL_EXTI_ClearConfigLine+0xb8>)
200049f2:	685a      	ldr	r2, [r3, #4]
200049f4:	693b      	ldr	r3, [r7, #16]
200049f6:	43db      	mvns	r3, r3
200049f8:	491e      	ldr	r1, [pc, #120]	@ (20004a74 <HAL_EXTI_ClearConfigLine+0xb8>)
200049fa:	4013      	ands	r3, r2
200049fc:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
200049fe:	687b      	ldr	r3, [r7, #4]
20004a00:	681b      	ldr	r3, [r3, #0]
20004a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20004a06:	2b00      	cmp	r3, #0
20004a08:	d02d      	beq.n	20004a66 <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
20004a0a:	4b1a      	ldr	r3, [pc, #104]	@ (20004a74 <HAL_EXTI_ClearConfigLine+0xb8>)
20004a0c:	689a      	ldr	r2, [r3, #8]
20004a0e:	693b      	ldr	r3, [r7, #16]
20004a10:	43db      	mvns	r3, r3
20004a12:	4918      	ldr	r1, [pc, #96]	@ (20004a74 <HAL_EXTI_ClearConfigLine+0xb8>)
20004a14:	4013      	ands	r3, r2
20004a16:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
20004a18:	4b16      	ldr	r3, [pc, #88]	@ (20004a74 <HAL_EXTI_ClearConfigLine+0xb8>)
20004a1a:	68da      	ldr	r2, [r3, #12]
20004a1c:	693b      	ldr	r3, [r7, #16]
20004a1e:	43db      	mvns	r3, r3
20004a20:	4914      	ldr	r1, [pc, #80]	@ (20004a74 <HAL_EXTI_ClearConfigLine+0xb8>)
20004a22:	4013      	ands	r3, r2
20004a24:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
20004a26:	687b      	ldr	r3, [r7, #4]
20004a28:	681b      	ldr	r3, [r3, #0]
20004a2a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
20004a2e:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
20004a32:	d118      	bne.n	20004a66 <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
20004a34:	4a10      	ldr	r2, [pc, #64]	@ (20004a78 <HAL_EXTI_ClearConfigLine+0xbc>)
20004a36:	697b      	ldr	r3, [r7, #20]
20004a38:	089b      	lsrs	r3, r3, #2
20004a3a:	3302      	adds	r3, #2
20004a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004a40:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20004a42:	697b      	ldr	r3, [r7, #20]
20004a44:	f003 0303 	and.w	r3, r3, #3
20004a48:	009b      	lsls	r3, r3, #2
20004a4a:	220f      	movs	r2, #15
20004a4c:	fa02 f303 	lsl.w	r3, r2, r3
20004a50:	43db      	mvns	r3, r3
20004a52:	68fa      	ldr	r2, [r7, #12]
20004a54:	4013      	ands	r3, r2
20004a56:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
20004a58:	4907      	ldr	r1, [pc, #28]	@ (20004a78 <HAL_EXTI_ClearConfigLine+0xbc>)
20004a5a:	697b      	ldr	r3, [r7, #20]
20004a5c:	089b      	lsrs	r3, r3, #2
20004a5e:	3302      	adds	r3, #2
20004a60:	68fa      	ldr	r2, [r7, #12]
20004a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
20004a66:	2300      	movs	r3, #0
}
20004a68:	4618      	mov	r0, r3
20004a6a:	371c      	adds	r7, #28
20004a6c:	46bd      	mov	sp, r7
20004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a72:	4770      	bx	lr
20004a74:	40013c00 	.word	0x40013c00
20004a78:	40013800 	.word	0x40013800

20004a7c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
20004a7c:	b480      	push	{r7}
20004a7e:	b087      	sub	sp, #28
20004a80:	af00      	add	r7, sp, #0
20004a82:	60f8      	str	r0, [r7, #12]
20004a84:	460b      	mov	r3, r1
20004a86:	607a      	str	r2, [r7, #4]
20004a88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
20004a8a:	2300      	movs	r3, #0
20004a8c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
20004a8e:	7afb      	ldrb	r3, [r7, #11]
20004a90:	2b00      	cmp	r3, #0
20004a92:	d103      	bne.n	20004a9c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
20004a94:	68fb      	ldr	r3, [r7, #12]
20004a96:	687a      	ldr	r2, [r7, #4]
20004a98:	605a      	str	r2, [r3, #4]
      break;
20004a9a:	e002      	b.n	20004aa2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
20004a9c:	2301      	movs	r3, #1
20004a9e:	75fb      	strb	r3, [r7, #23]
      break;
20004aa0:	bf00      	nop
  }

  return status;
20004aa2:	7dfb      	ldrb	r3, [r7, #23]
}
20004aa4:	4618      	mov	r0, r3
20004aa6:	371c      	adds	r7, #28
20004aa8:	46bd      	mov	sp, r7
20004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
20004aae:	4770      	bx	lr

20004ab0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
20004ab0:	b480      	push	{r7}
20004ab2:	b083      	sub	sp, #12
20004ab4:	af00      	add	r7, sp, #0
20004ab6:	6078      	str	r0, [r7, #4]
20004ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
20004aba:	687b      	ldr	r3, [r7, #4]
20004abc:	2b00      	cmp	r3, #0
20004abe:	d101      	bne.n	20004ac4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
20004ac0:	2301      	movs	r3, #1
20004ac2:	e003      	b.n	20004acc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
20004ac4:	687b      	ldr	r3, [r7, #4]
20004ac6:	683a      	ldr	r2, [r7, #0]
20004ac8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
20004aca:	2300      	movs	r3, #0
  }
}
20004acc:	4618      	mov	r0, r3
20004ace:	370c      	adds	r7, #12
20004ad0:	46bd      	mov	sp, r7
20004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ad6:	4770      	bx	lr

20004ad8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
20004ad8:	b580      	push	{r7, lr}
20004ada:	b084      	sub	sp, #16
20004adc:	af00      	add	r7, sp, #0
20004ade:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004ae0:	687b      	ldr	r3, [r7, #4]
20004ae2:	681b      	ldr	r3, [r3, #0]
20004ae4:	f003 031f 	and.w	r3, r3, #31
20004ae8:	2201      	movs	r2, #1
20004aea:	fa02 f303 	lsl.w	r3, r2, r3
20004aee:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
20004af0:	4b0a      	ldr	r3, [pc, #40]	@ (20004b1c <HAL_EXTI_IRQHandler+0x44>)
20004af2:	695b      	ldr	r3, [r3, #20]
20004af4:	68fa      	ldr	r2, [r7, #12]
20004af6:	4013      	ands	r3, r2
20004af8:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
20004afa:	68bb      	ldr	r3, [r7, #8]
20004afc:	2b00      	cmp	r3, #0
20004afe:	d009      	beq.n	20004b14 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
20004b00:	4a06      	ldr	r2, [pc, #24]	@ (20004b1c <HAL_EXTI_IRQHandler+0x44>)
20004b02:	68fb      	ldr	r3, [r7, #12]
20004b04:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
20004b06:	687b      	ldr	r3, [r7, #4]
20004b08:	685b      	ldr	r3, [r3, #4]
20004b0a:	2b00      	cmp	r3, #0
20004b0c:	d002      	beq.n	20004b14 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
20004b0e:	687b      	ldr	r3, [r7, #4]
20004b10:	685b      	ldr	r3, [r3, #4]
20004b12:	4798      	blx	r3
    }
  }
}
20004b14:	bf00      	nop
20004b16:	3710      	adds	r7, #16
20004b18:	46bd      	mov	sp, r7
20004b1a:	bd80      	pop	{r7, pc}
20004b1c:	40013c00 	.word	0x40013c00

20004b20 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
20004b20:	b480      	push	{r7}
20004b22:	b087      	sub	sp, #28
20004b24:	af00      	add	r7, sp, #0
20004b26:	6078      	str	r0, [r7, #4]
20004b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
20004b2a:	687b      	ldr	r3, [r7, #4]
20004b2c:	681b      	ldr	r3, [r3, #0]
20004b2e:	f003 031f 	and.w	r3, r3, #31
20004b32:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20004b34:	2201      	movs	r2, #1
20004b36:	697b      	ldr	r3, [r7, #20]
20004b38:	fa02 f303 	lsl.w	r3, r2, r3
20004b3c:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
20004b3e:	4b07      	ldr	r3, [pc, #28]	@ (20004b5c <HAL_EXTI_GetPending+0x3c>)
20004b40:	695a      	ldr	r2, [r3, #20]
20004b42:	693b      	ldr	r3, [r7, #16]
20004b44:	401a      	ands	r2, r3
20004b46:	697b      	ldr	r3, [r7, #20]
20004b48:	fa22 f303 	lsr.w	r3, r2, r3
20004b4c:	60fb      	str	r3, [r7, #12]
  return regval;
20004b4e:	68fb      	ldr	r3, [r7, #12]
}
20004b50:	4618      	mov	r0, r3
20004b52:	371c      	adds	r7, #28
20004b54:	46bd      	mov	sp, r7
20004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b5a:	4770      	bx	lr
20004b5c:	40013c00 	.word	0x40013c00

20004b60 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
20004b60:	b480      	push	{r7}
20004b62:	b085      	sub	sp, #20
20004b64:	af00      	add	r7, sp, #0
20004b66:	6078      	str	r0, [r7, #4]
20004b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004b6a:	687b      	ldr	r3, [r7, #4]
20004b6c:	681b      	ldr	r3, [r3, #0]
20004b6e:	f003 031f 	and.w	r3, r3, #31
20004b72:	2201      	movs	r2, #1
20004b74:	fa02 f303 	lsl.w	r3, r2, r3
20004b78:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
20004b7a:	4a04      	ldr	r2, [pc, #16]	@ (20004b8c <HAL_EXTI_ClearPending+0x2c>)
20004b7c:	68fb      	ldr	r3, [r7, #12]
20004b7e:	6153      	str	r3, [r2, #20]
}
20004b80:	bf00      	nop
20004b82:	3714      	adds	r7, #20
20004b84:	46bd      	mov	sp, r7
20004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b8a:	4770      	bx	lr
20004b8c:	40013c00 	.word	0x40013c00

20004b90 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
20004b90:	b480      	push	{r7}
20004b92:	b085      	sub	sp, #20
20004b94:	af00      	add	r7, sp, #0
20004b96:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004b98:	687b      	ldr	r3, [r7, #4]
20004b9a:	681b      	ldr	r3, [r3, #0]
20004b9c:	f003 031f 	and.w	r3, r3, #31
20004ba0:	2201      	movs	r2, #1
20004ba2:	fa02 f303 	lsl.w	r3, r2, r3
20004ba6:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
20004ba8:	4a04      	ldr	r2, [pc, #16]	@ (20004bbc <HAL_EXTI_GenerateSWI+0x2c>)
20004baa:	68fb      	ldr	r3, [r7, #12]
20004bac:	6113      	str	r3, [r2, #16]
}
20004bae:	bf00      	nop
20004bb0:	3714      	adds	r7, #20
20004bb2:	46bd      	mov	sp, r7
20004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
20004bb8:	4770      	bx	lr
20004bba:	bf00      	nop
20004bbc:	40013c00 	.word	0x40013c00

20004bc0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20004bc0:	b580      	push	{r7, lr}
20004bc2:	b086      	sub	sp, #24
20004bc4:	af00      	add	r7, sp, #0
20004bc6:	60f8      	str	r0, [r7, #12]
20004bc8:	60b9      	str	r1, [r7, #8]
20004bca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
20004bce:	2301      	movs	r3, #1
20004bd0:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20004bd2:	4b23      	ldr	r3, [pc, #140]	@ (20004c60 <HAL_FLASH_Program+0xa0>)
20004bd4:	7e1b      	ldrb	r3, [r3, #24]
20004bd6:	2b01      	cmp	r3, #1
20004bd8:	d101      	bne.n	20004bde <HAL_FLASH_Program+0x1e>
20004bda:	2302      	movs	r3, #2
20004bdc:	e03b      	b.n	20004c56 <HAL_FLASH_Program+0x96>
20004bde:	4b20      	ldr	r3, [pc, #128]	@ (20004c60 <HAL_FLASH_Program+0xa0>)
20004be0:	2201      	movs	r2, #1
20004be2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004be4:	f24c 3050 	movw	r0, #50000	@ 0xc350
20004be8:	f000 f9b0 	bl	20004f4c <FLASH_WaitForLastOperation>
20004bec:	4603      	mov	r3, r0
20004bee:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
20004bf0:	7dfb      	ldrb	r3, [r7, #23]
20004bf2:	2b00      	cmp	r3, #0
20004bf4:	d12b      	bne.n	20004c4e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
20004bf6:	68fb      	ldr	r3, [r7, #12]
20004bf8:	2b00      	cmp	r3, #0
20004bfa:	d105      	bne.n	20004c08 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
20004bfc:	783b      	ldrb	r3, [r7, #0]
20004bfe:	4619      	mov	r1, r3
20004c00:	68b8      	ldr	r0, [r7, #8]
20004c02:	f000 fa5b 	bl	200050bc <FLASH_Program_Byte>
20004c06:	e016      	b.n	20004c36 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20004c08:	68fb      	ldr	r3, [r7, #12]
20004c0a:	2b01      	cmp	r3, #1
20004c0c:	d105      	bne.n	20004c1a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
20004c0e:	883b      	ldrh	r3, [r7, #0]
20004c10:	4619      	mov	r1, r3
20004c12:	68b8      	ldr	r0, [r7, #8]
20004c14:	f000 fa2e 	bl	20005074 <FLASH_Program_HalfWord>
20004c18:	e00d      	b.n	20004c36 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
20004c1a:	68fb      	ldr	r3, [r7, #12]
20004c1c:	2b02      	cmp	r3, #2
20004c1e:	d105      	bne.n	20004c2c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
20004c20:	683b      	ldr	r3, [r7, #0]
20004c22:	4619      	mov	r1, r3
20004c24:	68b8      	ldr	r0, [r7, #8]
20004c26:	f000 fa03 	bl	20005030 <FLASH_Program_Word>
20004c2a:	e004      	b.n	20004c36 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
20004c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
20004c30:	68b8      	ldr	r0, [r7, #8]
20004c32:	f000 f9cb 	bl	20004fcc <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004c36:	f24c 3050 	movw	r0, #50000	@ 0xc350
20004c3a:	f000 f987 	bl	20004f4c <FLASH_WaitForLastOperation>
20004c3e:	4603      	mov	r3, r0
20004c40:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
20004c42:	4b08      	ldr	r3, [pc, #32]	@ (20004c64 <HAL_FLASH_Program+0xa4>)
20004c44:	691b      	ldr	r3, [r3, #16]
20004c46:	4a07      	ldr	r2, [pc, #28]	@ (20004c64 <HAL_FLASH_Program+0xa4>)
20004c48:	f023 0301 	bic.w	r3, r3, #1
20004c4c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20004c4e:	4b04      	ldr	r3, [pc, #16]	@ (20004c60 <HAL_FLASH_Program+0xa0>)
20004c50:	2200      	movs	r2, #0
20004c52:	761a      	strb	r2, [r3, #24]

  return status;
20004c54:	7dfb      	ldrb	r3, [r7, #23]
}
20004c56:	4618      	mov	r0, r3
20004c58:	3718      	adds	r7, #24
20004c5a:	46bd      	mov	sp, r7
20004c5c:	bd80      	pop	{r7, pc}
20004c5e:	bf00      	nop
20004c60:	20000498 	.word	0x20000498
20004c64:	40023c00 	.word	0x40023c00

20004c68 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20004c68:	b580      	push	{r7, lr}
20004c6a:	b086      	sub	sp, #24
20004c6c:	af00      	add	r7, sp, #0
20004c6e:	60f8      	str	r0, [r7, #12]
20004c70:	60b9      	str	r1, [r7, #8]
20004c72:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
20004c76:	2300      	movs	r3, #0
20004c78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
20004c7a:	4b1b      	ldr	r3, [pc, #108]	@ (20004ce8 <HAL_FLASH_Program_IT+0x80>)
20004c7c:	691b      	ldr	r3, [r3, #16]
20004c7e:	4a1a      	ldr	r2, [pc, #104]	@ (20004ce8 <HAL_FLASH_Program_IT+0x80>)
20004c80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
20004c84:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
20004c86:	4b18      	ldr	r3, [pc, #96]	@ (20004ce8 <HAL_FLASH_Program_IT+0x80>)
20004c88:	691b      	ldr	r3, [r3, #16]
20004c8a:	4a17      	ldr	r2, [pc, #92]	@ (20004ce8 <HAL_FLASH_Program_IT+0x80>)
20004c8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
20004c90:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
20004c92:	4b16      	ldr	r3, [pc, #88]	@ (20004cec <HAL_FLASH_Program_IT+0x84>)
20004c94:	2203      	movs	r2, #3
20004c96:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
20004c98:	4a14      	ldr	r2, [pc, #80]	@ (20004cec <HAL_FLASH_Program_IT+0x84>)
20004c9a:	68bb      	ldr	r3, [r7, #8]
20004c9c:	6153      	str	r3, [r2, #20]

  if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
20004c9e:	68fb      	ldr	r3, [r7, #12]
20004ca0:	2b00      	cmp	r3, #0
20004ca2:	d105      	bne.n	20004cb0 <HAL_FLASH_Program_IT+0x48>
  {
    /*Program byte (8-bit) at a specified address.*/
    FLASH_Program_Byte(Address, (uint8_t) Data);
20004ca4:	783b      	ldrb	r3, [r7, #0]
20004ca6:	4619      	mov	r1, r3
20004ca8:	68b8      	ldr	r0, [r7, #8]
20004caa:	f000 fa07 	bl	200050bc <FLASH_Program_Byte>
20004cae:	e016      	b.n	20004cde <HAL_FLASH_Program_IT+0x76>
  }
  else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20004cb0:	68fb      	ldr	r3, [r7, #12]
20004cb2:	2b01      	cmp	r3, #1
20004cb4:	d105      	bne.n	20004cc2 <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
20004cb6:	883b      	ldrh	r3, [r7, #0]
20004cb8:	4619      	mov	r1, r3
20004cba:	68b8      	ldr	r0, [r7, #8]
20004cbc:	f000 f9da 	bl	20005074 <FLASH_Program_HalfWord>
20004cc0:	e00d      	b.n	20004cde <HAL_FLASH_Program_IT+0x76>
  }
  else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
20004cc2:	68fb      	ldr	r3, [r7, #12]
20004cc4:	2b02      	cmp	r3, #2
20004cc6:	d105      	bne.n	20004cd4 <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
20004cc8:	683b      	ldr	r3, [r7, #0]
20004cca:	4619      	mov	r1, r3
20004ccc:	68b8      	ldr	r0, [r7, #8]
20004cce:	f000 f9af 	bl	20005030 <FLASH_Program_Word>
20004cd2:	e004      	b.n	20004cde <HAL_FLASH_Program_IT+0x76>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
20004cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
20004cd8:	68b8      	ldr	r0, [r7, #8]
20004cda:	f000 f977 	bl	20004fcc <FLASH_Program_DoubleWord>
  }

  return status;
20004cde:	7dfb      	ldrb	r3, [r7, #23]
}
20004ce0:	4618      	mov	r0, r3
20004ce2:	3718      	adds	r7, #24
20004ce4:	46bd      	mov	sp, r7
20004ce6:	bd80      	pop	{r7, pc}
20004ce8:	40023c00 	.word	0x40023c00
20004cec:	20000498 	.word	0x20000498

20004cf0 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
20004cf0:	b580      	push	{r7, lr}
20004cf2:	b082      	sub	sp, #8
20004cf4:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
20004cf6:	2300      	movs	r3, #0
20004cf8:	607b      	str	r3, [r7, #4]

  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20004cfa:	4b49      	ldr	r3, [pc, #292]	@ (20004e20 <HAL_FLASH_IRQHandler+0x130>)
20004cfc:	68db      	ldr	r3, [r3, #12]
20004cfe:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
20004d02:	2b00      	cmp	r3, #0
20004d04:	d020      	beq.n	20004d48 <HAL_FLASH_IRQHandler+0x58>
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
20004d06:	4b47      	ldr	r3, [pc, #284]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d08:	781b      	ldrb	r3, [r3, #0]
20004d0a:	b2db      	uxtb	r3, r3
20004d0c:	2b01      	cmp	r3, #1
20004d0e:	d107      	bne.n	20004d20 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
20004d10:	4b44      	ldr	r3, [pc, #272]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d12:	68db      	ldr	r3, [r3, #12]
20004d14:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
20004d16:	4b43      	ldr	r3, [pc, #268]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d18:	f04f 32ff 	mov.w	r2, #4294967295
20004d1c:	60da      	str	r2, [r3, #12]
20004d1e:	e00b      	b.n	20004d38 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
20004d20:	4b40      	ldr	r3, [pc, #256]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d22:	781b      	ldrb	r3, [r3, #0]
20004d24:	b2db      	uxtb	r3, r3
20004d26:	2b02      	cmp	r3, #2
20004d28:	d103      	bne.n	20004d32 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
20004d2a:	4b3e      	ldr	r3, [pc, #248]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d2c:	691b      	ldr	r3, [r3, #16]
20004d2e:	607b      	str	r3, [r7, #4]
20004d30:	e002      	b.n	20004d38 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
20004d32:	4b3c      	ldr	r3, [pc, #240]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d34:	695b      	ldr	r3, [r3, #20]
20004d36:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
20004d38:	f000 f9e2 	bl	20005100 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
20004d3c:	6878      	ldr	r0, [r7, #4]
20004d3e:	f000 f87d 	bl	20004e3c <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004d42:	4b38      	ldr	r3, [pc, #224]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d44:	2200      	movs	r2, #0
20004d46:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20004d48:	4b35      	ldr	r3, [pc, #212]	@ (20004e20 <HAL_FLASH_IRQHandler+0x130>)
20004d4a:	68db      	ldr	r3, [r3, #12]
20004d4c:	f003 0301 	and.w	r3, r3, #1
20004d50:	2b00      	cmp	r3, #0
20004d52:	d04a      	beq.n	20004dea <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004d54:	4b32      	ldr	r3, [pc, #200]	@ (20004e20 <HAL_FLASH_IRQHandler+0x130>)
20004d56:	2201      	movs	r2, #1
20004d58:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
20004d5a:	4b32      	ldr	r3, [pc, #200]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d5c:	781b      	ldrb	r3, [r3, #0]
20004d5e:	b2db      	uxtb	r3, r3
20004d60:	2b01      	cmp	r3, #1
20004d62:	d12d      	bne.n	20004dc0 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
20004d64:	4b2f      	ldr	r3, [pc, #188]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d66:	685b      	ldr	r3, [r3, #4]
20004d68:	3b01      	subs	r3, #1
20004d6a:	4a2e      	ldr	r2, [pc, #184]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d6c:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
20004d6e:	4b2d      	ldr	r3, [pc, #180]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d70:	685b      	ldr	r3, [r3, #4]
20004d72:	2b00      	cmp	r3, #0
20004d74:	d015      	beq.n	20004da2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
20004d76:	4b2b      	ldr	r3, [pc, #172]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d78:	68db      	ldr	r3, [r3, #12]
20004d7a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
20004d7c:	6878      	ldr	r0, [r7, #4]
20004d7e:	f000 f853 	bl	20004e28 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
20004d82:	4b28      	ldr	r3, [pc, #160]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d84:	68db      	ldr	r3, [r3, #12]
20004d86:	3301      	adds	r3, #1
20004d88:	4a26      	ldr	r2, [pc, #152]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d8a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
20004d8c:	4b25      	ldr	r3, [pc, #148]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d8e:	68db      	ldr	r3, [r3, #12]
20004d90:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
20004d92:	4b24      	ldr	r3, [pc, #144]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004d94:	7a1b      	ldrb	r3, [r3, #8]
20004d96:	b2db      	uxtb	r3, r3
20004d98:	4619      	mov	r1, r3
20004d9a:	6878      	ldr	r0, [r7, #4]
20004d9c:	f000 fbf0 	bl	20005580 <FLASH_Erase_Sector>
20004da0:	e023      	b.n	20004dea <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
20004da2:	f04f 33ff 	mov.w	r3, #4294967295
20004da6:	607b      	str	r3, [r7, #4]
20004da8:	4a1e      	ldr	r2, [pc, #120]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004daa:	687b      	ldr	r3, [r7, #4]
20004dac:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004dae:	4b1d      	ldr	r3, [pc, #116]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004db0:	2200      	movs	r2, #0
20004db2:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
20004db4:	f000 fd64 	bl	20005880 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
20004db8:	6878      	ldr	r0, [r7, #4]
20004dba:	f000 f835 	bl	20004e28 <HAL_FLASH_EndOfOperationCallback>
20004dbe:	e014      	b.n	20004dea <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
20004dc0:	4b18      	ldr	r3, [pc, #96]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004dc2:	781b      	ldrb	r3, [r3, #0]
20004dc4:	b2db      	uxtb	r3, r3
20004dc6:	2b02      	cmp	r3, #2
20004dc8:	d107      	bne.n	20004dda <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
20004dca:	f000 fd59 	bl	20005880 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
20004dce:	4b15      	ldr	r3, [pc, #84]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004dd0:	691b      	ldr	r3, [r3, #16]
20004dd2:	4618      	mov	r0, r3
20004dd4:	f000 f828 	bl	20004e28 <HAL_FLASH_EndOfOperationCallback>
20004dd8:	e004      	b.n	20004de4 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
20004dda:	4b12      	ldr	r3, [pc, #72]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004ddc:	695b      	ldr	r3, [r3, #20]
20004dde:	4618      	mov	r0, r3
20004de0:	f000 f822 	bl	20004e28 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004de4:	4b0f      	ldr	r3, [pc, #60]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004de6:	2200      	movs	r2, #0
20004de8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
20004dea:	4b0e      	ldr	r3, [pc, #56]	@ (20004e24 <HAL_FLASH_IRQHandler+0x134>)
20004dec:	781b      	ldrb	r3, [r3, #0]
20004dee:	b2db      	uxtb	r3, r3
20004df0:	2b00      	cmp	r3, #0
20004df2:	d111      	bne.n	20004e18 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
20004df4:	4b0a      	ldr	r3, [pc, #40]	@ (20004e20 <HAL_FLASH_IRQHandler+0x130>)
20004df6:	691b      	ldr	r3, [r3, #16]
20004df8:	4a09      	ldr	r2, [pc, #36]	@ (20004e20 <HAL_FLASH_IRQHandler+0x130>)
20004dfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
20004dfe:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
20004e00:	4b07      	ldr	r3, [pc, #28]	@ (20004e20 <HAL_FLASH_IRQHandler+0x130>)
20004e02:	691b      	ldr	r3, [r3, #16]
20004e04:	4a06      	ldr	r2, [pc, #24]	@ (20004e20 <HAL_FLASH_IRQHandler+0x130>)
20004e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
20004e0a:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
20004e0c:	4b04      	ldr	r3, [pc, #16]	@ (20004e20 <HAL_FLASH_IRQHandler+0x130>)
20004e0e:	691b      	ldr	r3, [r3, #16]
20004e10:	4a03      	ldr	r2, [pc, #12]	@ (20004e20 <HAL_FLASH_IRQHandler+0x130>)
20004e12:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
20004e16:	6113      	str	r3, [r2, #16]
  }
}
20004e18:	bf00      	nop
20004e1a:	3708      	adds	r7, #8
20004e1c:	46bd      	mov	sp, r7
20004e1e:	bd80      	pop	{r7, pc}
20004e20:	40023c00 	.word	0x40023c00
20004e24:	20000498 	.word	0x20000498

20004e28 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
20004e28:	b480      	push	{r7}
20004e2a:	b083      	sub	sp, #12
20004e2c:	af00      	add	r7, sp, #0
20004e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
20004e30:	bf00      	nop
20004e32:	370c      	adds	r7, #12
20004e34:	46bd      	mov	sp, r7
20004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e3a:	4770      	bx	lr

20004e3c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
20004e3c:	b480      	push	{r7}
20004e3e:	b083      	sub	sp, #12
20004e40:	af00      	add	r7, sp, #0
20004e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
20004e44:	bf00      	nop
20004e46:	370c      	adds	r7, #12
20004e48:	46bd      	mov	sp, r7
20004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e4e:	4770      	bx	lr

20004e50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
20004e50:	b480      	push	{r7}
20004e52:	b083      	sub	sp, #12
20004e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
20004e56:	2300      	movs	r3, #0
20004e58:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20004e5a:	4b0b      	ldr	r3, [pc, #44]	@ (20004e88 <HAL_FLASH_Unlock+0x38>)
20004e5c:	691b      	ldr	r3, [r3, #16]
20004e5e:	2b00      	cmp	r3, #0
20004e60:	da0b      	bge.n	20004e7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
20004e62:	4b09      	ldr	r3, [pc, #36]	@ (20004e88 <HAL_FLASH_Unlock+0x38>)
20004e64:	4a09      	ldr	r2, [pc, #36]	@ (20004e8c <HAL_FLASH_Unlock+0x3c>)
20004e66:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20004e68:	4b07      	ldr	r3, [pc, #28]	@ (20004e88 <HAL_FLASH_Unlock+0x38>)
20004e6a:	4a09      	ldr	r2, [pc, #36]	@ (20004e90 <HAL_FLASH_Unlock+0x40>)
20004e6c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20004e6e:	4b06      	ldr	r3, [pc, #24]	@ (20004e88 <HAL_FLASH_Unlock+0x38>)
20004e70:	691b      	ldr	r3, [r3, #16]
20004e72:	2b00      	cmp	r3, #0
20004e74:	da01      	bge.n	20004e7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
20004e76:	2301      	movs	r3, #1
20004e78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
20004e7a:	79fb      	ldrb	r3, [r7, #7]
}
20004e7c:	4618      	mov	r0, r3
20004e7e:	370c      	adds	r7, #12
20004e80:	46bd      	mov	sp, r7
20004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e86:	4770      	bx	lr
20004e88:	40023c00 	.word	0x40023c00
20004e8c:	45670123 	.word	0x45670123
20004e90:	cdef89ab 	.word	0xcdef89ab

20004e94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
20004e94:	b480      	push	{r7}
20004e96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
20004e98:	4b05      	ldr	r3, [pc, #20]	@ (20004eb0 <HAL_FLASH_Lock+0x1c>)
20004e9a:	691b      	ldr	r3, [r3, #16]
20004e9c:	4a04      	ldr	r2, [pc, #16]	@ (20004eb0 <HAL_FLASH_Lock+0x1c>)
20004e9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
20004ea2:	6113      	str	r3, [r2, #16]

  return HAL_OK;
20004ea4:	2300      	movs	r3, #0
}
20004ea6:	4618      	mov	r0, r3
20004ea8:	46bd      	mov	sp, r7
20004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
20004eae:	4770      	bx	lr
20004eb0:	40023c00 	.word	0x40023c00

20004eb4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
20004eb4:	b480      	push	{r7}
20004eb6:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
20004eb8:	4b09      	ldr	r3, [pc, #36]	@ (20004ee0 <HAL_FLASH_OB_Unlock+0x2c>)
20004eba:	695b      	ldr	r3, [r3, #20]
20004ebc:	f003 0301 	and.w	r3, r3, #1
20004ec0:	2b00      	cmp	r3, #0
20004ec2:	d007      	beq.n	20004ed4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
20004ec4:	4b06      	ldr	r3, [pc, #24]	@ (20004ee0 <HAL_FLASH_OB_Unlock+0x2c>)
20004ec6:	4a07      	ldr	r2, [pc, #28]	@ (20004ee4 <HAL_FLASH_OB_Unlock+0x30>)
20004ec8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
20004eca:	4b05      	ldr	r3, [pc, #20]	@ (20004ee0 <HAL_FLASH_OB_Unlock+0x2c>)
20004ecc:	4a06      	ldr	r2, [pc, #24]	@ (20004ee8 <HAL_FLASH_OB_Unlock+0x34>)
20004ece:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
20004ed0:	2300      	movs	r3, #0
20004ed2:	e000      	b.n	20004ed6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
20004ed4:	2301      	movs	r3, #1
}
20004ed6:	4618      	mov	r0, r3
20004ed8:	46bd      	mov	sp, r7
20004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ede:	4770      	bx	lr
20004ee0:	40023c00 	.word	0x40023c00
20004ee4:	08192a3b 	.word	0x08192a3b
20004ee8:	4c5d6e7f 	.word	0x4c5d6e7f

20004eec <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
20004eec:	b480      	push	{r7}
20004eee:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
20004ef0:	4b05      	ldr	r3, [pc, #20]	@ (20004f08 <HAL_FLASH_OB_Lock+0x1c>)
20004ef2:	695b      	ldr	r3, [r3, #20]
20004ef4:	4a04      	ldr	r2, [pc, #16]	@ (20004f08 <HAL_FLASH_OB_Lock+0x1c>)
20004ef6:	f043 0301 	orr.w	r3, r3, #1
20004efa:	6153      	str	r3, [r2, #20]

  return HAL_OK;
20004efc:	2300      	movs	r3, #0
}
20004efe:	4618      	mov	r0, r3
20004f00:	46bd      	mov	sp, r7
20004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f06:	4770      	bx	lr
20004f08:	40023c00 	.word	0x40023c00

20004f0c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
20004f0c:	b580      	push	{r7, lr}
20004f0e:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
20004f10:	4b07      	ldr	r3, [pc, #28]	@ (20004f30 <HAL_FLASH_OB_Launch+0x24>)
20004f12:	781b      	ldrb	r3, [r3, #0]
20004f14:	b2db      	uxtb	r3, r3
20004f16:	4a06      	ldr	r2, [pc, #24]	@ (20004f30 <HAL_FLASH_OB_Launch+0x24>)
20004f18:	f043 0302 	orr.w	r3, r3, #2
20004f1c:	b2db      	uxtb	r3, r3
20004f1e:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
20004f20:	f24c 3050 	movw	r0, #50000	@ 0xc350
20004f24:	f000 f812 	bl	20004f4c <FLASH_WaitForLastOperation>
20004f28:	4603      	mov	r3, r0
}
20004f2a:	4618      	mov	r0, r3
20004f2c:	bd80      	pop	{r7, pc}
20004f2e:	bf00      	nop
20004f30:	40023c14 	.word	0x40023c14

20004f34 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
20004f34:	b480      	push	{r7}
20004f36:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
20004f38:	4b03      	ldr	r3, [pc, #12]	@ (20004f48 <HAL_FLASH_GetError+0x14>)
20004f3a:	69db      	ldr	r3, [r3, #28]
}
20004f3c:	4618      	mov	r0, r3
20004f3e:	46bd      	mov	sp, r7
20004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f44:	4770      	bx	lr
20004f46:	bf00      	nop
20004f48:	20000498 	.word	0x20000498

20004f4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
20004f4c:	b580      	push	{r7, lr}
20004f4e:	b084      	sub	sp, #16
20004f50:	af00      	add	r7, sp, #0
20004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20004f54:	2300      	movs	r3, #0
20004f56:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20004f58:	4b1a      	ldr	r3, [pc, #104]	@ (20004fc4 <FLASH_WaitForLastOperation+0x78>)
20004f5a:	2200      	movs	r2, #0
20004f5c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
20004f5e:	f7fb fd5a 	bl	20000a16 <HAL_GetTick>
20004f62:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
20004f64:	e010      	b.n	20004f88 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
20004f66:	687b      	ldr	r3, [r7, #4]
20004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
20004f6c:	d00c      	beq.n	20004f88 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
20004f6e:	687b      	ldr	r3, [r7, #4]
20004f70:	2b00      	cmp	r3, #0
20004f72:	d007      	beq.n	20004f84 <FLASH_WaitForLastOperation+0x38>
20004f74:	f7fb fd4f 	bl	20000a16 <HAL_GetTick>
20004f78:	4602      	mov	r2, r0
20004f7a:	68fb      	ldr	r3, [r7, #12]
20004f7c:	1ad3      	subs	r3, r2, r3
20004f7e:	687a      	ldr	r2, [r7, #4]
20004f80:	429a      	cmp	r2, r3
20004f82:	d201      	bcs.n	20004f88 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
20004f84:	2303      	movs	r3, #3
20004f86:	e019      	b.n	20004fbc <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
20004f88:	4b0f      	ldr	r3, [pc, #60]	@ (20004fc8 <FLASH_WaitForLastOperation+0x7c>)
20004f8a:	68db      	ldr	r3, [r3, #12]
20004f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20004f90:	2b00      	cmp	r3, #0
20004f92:	d1e8      	bne.n	20004f66 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20004f94:	4b0c      	ldr	r3, [pc, #48]	@ (20004fc8 <FLASH_WaitForLastOperation+0x7c>)
20004f96:	68db      	ldr	r3, [r3, #12]
20004f98:	f003 0301 	and.w	r3, r3, #1
20004f9c:	2b00      	cmp	r3, #0
20004f9e:	d002      	beq.n	20004fa6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004fa0:	4b09      	ldr	r3, [pc, #36]	@ (20004fc8 <FLASH_WaitForLastOperation+0x7c>)
20004fa2:	2201      	movs	r2, #1
20004fa4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20004fa6:	4b08      	ldr	r3, [pc, #32]	@ (20004fc8 <FLASH_WaitForLastOperation+0x7c>)
20004fa8:	68db      	ldr	r3, [r3, #12]
20004faa:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
20004fae:	2b00      	cmp	r3, #0
20004fb0:	d003      	beq.n	20004fba <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
20004fb2:	f000 f8a5 	bl	20005100 <FLASH_SetErrorCode>
    return HAL_ERROR;
20004fb6:	2301      	movs	r3, #1
20004fb8:	e000      	b.n	20004fbc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
20004fba:	2300      	movs	r3, #0

}
20004fbc:	4618      	mov	r0, r3
20004fbe:	3710      	adds	r7, #16
20004fc0:	46bd      	mov	sp, r7
20004fc2:	bd80      	pop	{r7, pc}
20004fc4:	20000498 	.word	0x20000498
20004fc8:	40023c00 	.word	0x40023c00

20004fcc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
20004fcc:	b480      	push	{r7}
20004fce:	b085      	sub	sp, #20
20004fd0:	af00      	add	r7, sp, #0
20004fd2:	60f8      	str	r0, [r7, #12]
20004fd4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004fd8:	4b14      	ldr	r3, [pc, #80]	@ (2000502c <FLASH_Program_DoubleWord+0x60>)
20004fda:	691b      	ldr	r3, [r3, #16]
20004fdc:	4a13      	ldr	r2, [pc, #76]	@ (2000502c <FLASH_Program_DoubleWord+0x60>)
20004fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
20004fe2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20004fe4:	4b11      	ldr	r3, [pc, #68]	@ (2000502c <FLASH_Program_DoubleWord+0x60>)
20004fe6:	691b      	ldr	r3, [r3, #16]
20004fe8:	4a10      	ldr	r2, [pc, #64]	@ (2000502c <FLASH_Program_DoubleWord+0x60>)
20004fea:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
20004fee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004ff0:	4b0e      	ldr	r3, [pc, #56]	@ (2000502c <FLASH_Program_DoubleWord+0x60>)
20004ff2:	691b      	ldr	r3, [r3, #16]
20004ff4:	4a0d      	ldr	r2, [pc, #52]	@ (2000502c <FLASH_Program_DoubleWord+0x60>)
20004ff6:	f043 0301 	orr.w	r3, r3, #1
20004ffa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
20004ffc:	68fb      	ldr	r3, [r7, #12]
20004ffe:	683a      	ldr	r2, [r7, #0]
20005000:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
20005002:	f3bf 8f6f 	isb	sy
}
20005006:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
20005008:	e9d7 0100 	ldrd	r0, r1, [r7]
2000500c:	f04f 0200 	mov.w	r2, #0
20005010:	f04f 0300 	mov.w	r3, #0
20005014:	000a      	movs	r2, r1
20005016:	2300      	movs	r3, #0
20005018:	68f9      	ldr	r1, [r7, #12]
2000501a:	3104      	adds	r1, #4
2000501c:	4613      	mov	r3, r2
2000501e:	600b      	str	r3, [r1, #0]
}
20005020:	bf00      	nop
20005022:	3714      	adds	r7, #20
20005024:	46bd      	mov	sp, r7
20005026:	f85d 7b04 	ldr.w	r7, [sp], #4
2000502a:	4770      	bx	lr
2000502c:	40023c00 	.word	0x40023c00

20005030 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
20005030:	b480      	push	{r7}
20005032:	b083      	sub	sp, #12
20005034:	af00      	add	r7, sp, #0
20005036:	6078      	str	r0, [r7, #4]
20005038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
2000503a:	4b0d      	ldr	r3, [pc, #52]	@ (20005070 <FLASH_Program_Word+0x40>)
2000503c:	691b      	ldr	r3, [r3, #16]
2000503e:	4a0c      	ldr	r2, [pc, #48]	@ (20005070 <FLASH_Program_Word+0x40>)
20005040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
20005044:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
20005046:	4b0a      	ldr	r3, [pc, #40]	@ (20005070 <FLASH_Program_Word+0x40>)
20005048:	691b      	ldr	r3, [r3, #16]
2000504a:	4a09      	ldr	r2, [pc, #36]	@ (20005070 <FLASH_Program_Word+0x40>)
2000504c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
20005050:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20005052:	4b07      	ldr	r3, [pc, #28]	@ (20005070 <FLASH_Program_Word+0x40>)
20005054:	691b      	ldr	r3, [r3, #16]
20005056:	4a06      	ldr	r2, [pc, #24]	@ (20005070 <FLASH_Program_Word+0x40>)
20005058:	f043 0301 	orr.w	r3, r3, #1
2000505c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
2000505e:	687b      	ldr	r3, [r7, #4]
20005060:	683a      	ldr	r2, [r7, #0]
20005062:	601a      	str	r2, [r3, #0]
}
20005064:	bf00      	nop
20005066:	370c      	adds	r7, #12
20005068:	46bd      	mov	sp, r7
2000506a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000506e:	4770      	bx	lr
20005070:	40023c00 	.word	0x40023c00

20005074 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
20005074:	b480      	push	{r7}
20005076:	b083      	sub	sp, #12
20005078:	af00      	add	r7, sp, #0
2000507a:	6078      	str	r0, [r7, #4]
2000507c:	460b      	mov	r3, r1
2000507e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20005080:	4b0d      	ldr	r3, [pc, #52]	@ (200050b8 <FLASH_Program_HalfWord+0x44>)
20005082:	691b      	ldr	r3, [r3, #16]
20005084:	4a0c      	ldr	r2, [pc, #48]	@ (200050b8 <FLASH_Program_HalfWord+0x44>)
20005086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
2000508a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
2000508c:	4b0a      	ldr	r3, [pc, #40]	@ (200050b8 <FLASH_Program_HalfWord+0x44>)
2000508e:	691b      	ldr	r3, [r3, #16]
20005090:	4a09      	ldr	r2, [pc, #36]	@ (200050b8 <FLASH_Program_HalfWord+0x44>)
20005092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
20005096:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20005098:	4b07      	ldr	r3, [pc, #28]	@ (200050b8 <FLASH_Program_HalfWord+0x44>)
2000509a:	691b      	ldr	r3, [r3, #16]
2000509c:	4a06      	ldr	r2, [pc, #24]	@ (200050b8 <FLASH_Program_HalfWord+0x44>)
2000509e:	f043 0301 	orr.w	r3, r3, #1
200050a2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
200050a4:	687b      	ldr	r3, [r7, #4]
200050a6:	887a      	ldrh	r2, [r7, #2]
200050a8:	801a      	strh	r2, [r3, #0]
}
200050aa:	bf00      	nop
200050ac:	370c      	adds	r7, #12
200050ae:	46bd      	mov	sp, r7
200050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200050b4:	4770      	bx	lr
200050b6:	bf00      	nop
200050b8:	40023c00 	.word	0x40023c00

200050bc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
200050bc:	b480      	push	{r7}
200050be:	b083      	sub	sp, #12
200050c0:	af00      	add	r7, sp, #0
200050c2:	6078      	str	r0, [r7, #4]
200050c4:	460b      	mov	r3, r1
200050c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
200050c8:	4b0c      	ldr	r3, [pc, #48]	@ (200050fc <FLASH_Program_Byte+0x40>)
200050ca:	691b      	ldr	r3, [r3, #16]
200050cc:	4a0b      	ldr	r2, [pc, #44]	@ (200050fc <FLASH_Program_Byte+0x40>)
200050ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
200050d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
200050d4:	4b09      	ldr	r3, [pc, #36]	@ (200050fc <FLASH_Program_Byte+0x40>)
200050d6:	4a09      	ldr	r2, [pc, #36]	@ (200050fc <FLASH_Program_Byte+0x40>)
200050d8:	691b      	ldr	r3, [r3, #16]
200050da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
200050dc:	4b07      	ldr	r3, [pc, #28]	@ (200050fc <FLASH_Program_Byte+0x40>)
200050de:	691b      	ldr	r3, [r3, #16]
200050e0:	4a06      	ldr	r2, [pc, #24]	@ (200050fc <FLASH_Program_Byte+0x40>)
200050e2:	f043 0301 	orr.w	r3, r3, #1
200050e6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
200050e8:	687b      	ldr	r3, [r7, #4]
200050ea:	78fa      	ldrb	r2, [r7, #3]
200050ec:	701a      	strb	r2, [r3, #0]
}
200050ee:	bf00      	nop
200050f0:	370c      	adds	r7, #12
200050f2:	46bd      	mov	sp, r7
200050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
200050f8:	4770      	bx	lr
200050fa:	bf00      	nop
200050fc:	40023c00 	.word	0x40023c00

20005100 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
20005100:	b480      	push	{r7}
20005102:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
20005104:	4b2f      	ldr	r3, [pc, #188]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
20005106:	68db      	ldr	r3, [r3, #12]
20005108:	f003 0310 	and.w	r3, r3, #16
2000510c:	2b00      	cmp	r3, #0
2000510e:	d008      	beq.n	20005122 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20005110:	4b2d      	ldr	r3, [pc, #180]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
20005112:	69db      	ldr	r3, [r3, #28]
20005114:	f043 0310 	orr.w	r3, r3, #16
20005118:	4a2b      	ldr	r2, [pc, #172]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
2000511a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
2000511c:	4b29      	ldr	r3, [pc, #164]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
2000511e:	2210      	movs	r2, #16
20005120:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
20005122:	4b28      	ldr	r3, [pc, #160]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
20005124:	68db      	ldr	r3, [r3, #12]
20005126:	f003 0320 	and.w	r3, r3, #32
2000512a:	2b00      	cmp	r3, #0
2000512c:	d008      	beq.n	20005140 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
2000512e:	4b26      	ldr	r3, [pc, #152]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
20005130:	69db      	ldr	r3, [r3, #28]
20005132:	f043 0308 	orr.w	r3, r3, #8
20005136:	4a24      	ldr	r2, [pc, #144]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
20005138:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
2000513a:	4b22      	ldr	r3, [pc, #136]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
2000513c:	2220      	movs	r2, #32
2000513e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
20005140:	4b20      	ldr	r3, [pc, #128]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
20005142:	68db      	ldr	r3, [r3, #12]
20005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20005148:	2b00      	cmp	r3, #0
2000514a:	d008      	beq.n	2000515e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
2000514c:	4b1e      	ldr	r3, [pc, #120]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
2000514e:	69db      	ldr	r3, [r3, #28]
20005150:	f043 0304 	orr.w	r3, r3, #4
20005154:	4a1c      	ldr	r2, [pc, #112]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
20005156:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
20005158:	4b1a      	ldr	r3, [pc, #104]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
2000515a:	2240      	movs	r2, #64	@ 0x40
2000515c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
2000515e:	4b19      	ldr	r3, [pc, #100]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
20005160:	68db      	ldr	r3, [r3, #12]
20005162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20005166:	2b00      	cmp	r3, #0
20005168:	d008      	beq.n	2000517c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
2000516a:	4b17      	ldr	r3, [pc, #92]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
2000516c:	69db      	ldr	r3, [r3, #28]
2000516e:	f043 0302 	orr.w	r3, r3, #2
20005172:	4a15      	ldr	r2, [pc, #84]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
20005174:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
20005176:	4b13      	ldr	r3, [pc, #76]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
20005178:	2280      	movs	r2, #128	@ 0x80
2000517a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
2000517c:	4b11      	ldr	r3, [pc, #68]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
2000517e:	68db      	ldr	r3, [r3, #12]
20005180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20005184:	2b00      	cmp	r3, #0
20005186:	d009      	beq.n	2000519c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
20005188:	4b0f      	ldr	r3, [pc, #60]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
2000518a:	69db      	ldr	r3, [r3, #28]
2000518c:	f043 0301 	orr.w	r3, r3, #1
20005190:	4a0d      	ldr	r2, [pc, #52]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
20005192:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
20005194:	4b0b      	ldr	r3, [pc, #44]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
20005196:	f44f 7280 	mov.w	r2, #256	@ 0x100
2000519a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
2000519c:	4b09      	ldr	r3, [pc, #36]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
2000519e:	68db      	ldr	r3, [r3, #12]
200051a0:	f003 0302 	and.w	r3, r3, #2
200051a4:	2b00      	cmp	r3, #0
200051a6:	d008      	beq.n	200051ba <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
200051a8:	4b07      	ldr	r3, [pc, #28]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
200051aa:	69db      	ldr	r3, [r3, #28]
200051ac:	f043 0320 	orr.w	r3, r3, #32
200051b0:	4a05      	ldr	r2, [pc, #20]	@ (200051c8 <FLASH_SetErrorCode+0xc8>)
200051b2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
200051b4:	4b03      	ldr	r3, [pc, #12]	@ (200051c4 <FLASH_SetErrorCode+0xc4>)
200051b6:	2202      	movs	r2, #2
200051b8:	60da      	str	r2, [r3, #12]
  }
}
200051ba:	bf00      	nop
200051bc:	46bd      	mov	sp, r7
200051be:	f85d 7b04 	ldr.w	r7, [sp], #4
200051c2:	4770      	bx	lr
200051c4:	40023c00 	.word	0x40023c00
200051c8:	20000498 	.word	0x20000498

200051cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
200051cc:	b580      	push	{r7, lr}
200051ce:	b084      	sub	sp, #16
200051d0:	af00      	add	r7, sp, #0
200051d2:	6078      	str	r0, [r7, #4]
200051d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
200051d6:	2301      	movs	r3, #1
200051d8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
200051da:	2300      	movs	r3, #0
200051dc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
200051de:	4b31      	ldr	r3, [pc, #196]	@ (200052a4 <HAL_FLASHEx_Erase+0xd8>)
200051e0:	7e1b      	ldrb	r3, [r3, #24]
200051e2:	2b01      	cmp	r3, #1
200051e4:	d101      	bne.n	200051ea <HAL_FLASHEx_Erase+0x1e>
200051e6:	2302      	movs	r3, #2
200051e8:	e058      	b.n	2000529c <HAL_FLASHEx_Erase+0xd0>
200051ea:	4b2e      	ldr	r3, [pc, #184]	@ (200052a4 <HAL_FLASHEx_Erase+0xd8>)
200051ec:	2201      	movs	r2, #1
200051ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200051f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
200051f4:	f7ff feaa 	bl	20004f4c <FLASH_WaitForLastOperation>
200051f8:	4603      	mov	r3, r0
200051fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
200051fc:	7bfb      	ldrb	r3, [r7, #15]
200051fe:	2b00      	cmp	r3, #0
20005200:	d148      	bne.n	20005294 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
20005202:	683b      	ldr	r3, [r7, #0]
20005204:	f04f 32ff 	mov.w	r2, #4294967295
20005208:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
2000520a:	687b      	ldr	r3, [r7, #4]
2000520c:	681b      	ldr	r3, [r3, #0]
2000520e:	2b01      	cmp	r3, #1
20005210:	d115      	bne.n	2000523e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
20005212:	687b      	ldr	r3, [r7, #4]
20005214:	691b      	ldr	r3, [r3, #16]
20005216:	b2da      	uxtb	r2, r3
20005218:	687b      	ldr	r3, [r7, #4]
2000521a:	685b      	ldr	r3, [r3, #4]
2000521c:	4619      	mov	r1, r3
2000521e:	4610      	mov	r0, r2
20005220:	f000 f98a 	bl	20005538 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005224:	f24c 3050 	movw	r0, #50000	@ 0xc350
20005228:	f7ff fe90 	bl	20004f4c <FLASH_WaitForLastOperation>
2000522c:	4603      	mov	r3, r0
2000522e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
20005230:	4b1d      	ldr	r3, [pc, #116]	@ (200052a8 <HAL_FLASHEx_Erase+0xdc>)
20005232:	691b      	ldr	r3, [r3, #16]
20005234:	4a1c      	ldr	r2, [pc, #112]	@ (200052a8 <HAL_FLASHEx_Erase+0xdc>)
20005236:	f023 0304 	bic.w	r3, r3, #4
2000523a:	6113      	str	r3, [r2, #16]
2000523c:	e028      	b.n	20005290 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
2000523e:	687b      	ldr	r3, [r7, #4]
20005240:	689b      	ldr	r3, [r3, #8]
20005242:	60bb      	str	r3, [r7, #8]
20005244:	e01c      	b.n	20005280 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
20005246:	687b      	ldr	r3, [r7, #4]
20005248:	691b      	ldr	r3, [r3, #16]
2000524a:	b2db      	uxtb	r3, r3
2000524c:	4619      	mov	r1, r3
2000524e:	68b8      	ldr	r0, [r7, #8]
20005250:	f000 f996 	bl	20005580 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005254:	f24c 3050 	movw	r0, #50000	@ 0xc350
20005258:	f7ff fe78 	bl	20004f4c <FLASH_WaitForLastOperation>
2000525c:	4603      	mov	r3, r0
2000525e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
20005260:	4b11      	ldr	r3, [pc, #68]	@ (200052a8 <HAL_FLASHEx_Erase+0xdc>)
20005262:	691b      	ldr	r3, [r3, #16]
20005264:	4a10      	ldr	r2, [pc, #64]	@ (200052a8 <HAL_FLASHEx_Erase+0xdc>)
20005266:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
2000526a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
2000526c:	7bfb      	ldrb	r3, [r7, #15]
2000526e:	2b00      	cmp	r3, #0
20005270:	d003      	beq.n	2000527a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
20005272:	683b      	ldr	r3, [r7, #0]
20005274:	68ba      	ldr	r2, [r7, #8]
20005276:	601a      	str	r2, [r3, #0]
          break;
20005278:	e00a      	b.n	20005290 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
2000527a:	68bb      	ldr	r3, [r7, #8]
2000527c:	3301      	adds	r3, #1
2000527e:	60bb      	str	r3, [r7, #8]
20005280:	687b      	ldr	r3, [r7, #4]
20005282:	68da      	ldr	r2, [r3, #12]
20005284:	687b      	ldr	r3, [r7, #4]
20005286:	689b      	ldr	r3, [r3, #8]
20005288:	4413      	add	r3, r2
2000528a:	68ba      	ldr	r2, [r7, #8]
2000528c:	429a      	cmp	r2, r3
2000528e:	d3da      	bcc.n	20005246 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
20005290:	f000 faf6 	bl	20005880 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20005294:	4b03      	ldr	r3, [pc, #12]	@ (200052a4 <HAL_FLASHEx_Erase+0xd8>)
20005296:	2200      	movs	r2, #0
20005298:	761a      	strb	r2, [r3, #24]

  return status;
2000529a:	7bfb      	ldrb	r3, [r7, #15]
}
2000529c:	4618      	mov	r0, r3
2000529e:	3710      	adds	r7, #16
200052a0:	46bd      	mov	sp, r7
200052a2:	bd80      	pop	{r7, pc}
200052a4:	20000498 	.word	0x20000498
200052a8:	40023c00 	.word	0x40023c00

200052ac <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
200052ac:	b580      	push	{r7, lr}
200052ae:	b084      	sub	sp, #16
200052b0:	af00      	add	r7, sp, #0
200052b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
200052b4:	2300      	movs	r3, #0
200052b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
200052b8:	4b20      	ldr	r3, [pc, #128]	@ (2000533c <HAL_FLASHEx_Erase_IT+0x90>)
200052ba:	691b      	ldr	r3, [r3, #16]
200052bc:	4a1f      	ldr	r2, [pc, #124]	@ (2000533c <HAL_FLASHEx_Erase_IT+0x90>)
200052be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
200052c2:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
200052c4:	4b1d      	ldr	r3, [pc, #116]	@ (2000533c <HAL_FLASHEx_Erase_IT+0x90>)
200052c6:	691b      	ldr	r3, [r3, #16]
200052c8:	4a1c      	ldr	r2, [pc, #112]	@ (2000533c <HAL_FLASHEx_Erase_IT+0x90>)
200052ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
200052ce:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
200052d0:	4b1a      	ldr	r3, [pc, #104]	@ (2000533c <HAL_FLASHEx_Erase_IT+0x90>)
200052d2:	22f3      	movs	r2, #243	@ 0xf3
200052d4:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
200052d6:	687b      	ldr	r3, [r7, #4]
200052d8:	681b      	ldr	r3, [r3, #0]
200052da:	2b01      	cmp	r3, #1
200052dc:	d110      	bne.n	20005300 <HAL_FLASHEx_Erase_IT+0x54>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
200052de:	4b18      	ldr	r3, [pc, #96]	@ (20005340 <HAL_FLASHEx_Erase_IT+0x94>)
200052e0:	2202      	movs	r2, #2
200052e2:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
200052e4:	687b      	ldr	r3, [r7, #4]
200052e6:	685b      	ldr	r3, [r3, #4]
200052e8:	4a15      	ldr	r2, [pc, #84]	@ (20005340 <HAL_FLASHEx_Erase_IT+0x94>)
200052ea:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
200052ec:	687b      	ldr	r3, [r7, #4]
200052ee:	691b      	ldr	r3, [r3, #16]
200052f0:	b2da      	uxtb	r2, r3
200052f2:	687b      	ldr	r3, [r7, #4]
200052f4:	685b      	ldr	r3, [r3, #4]
200052f6:	4619      	mov	r1, r3
200052f8:	4610      	mov	r0, r2
200052fa:	f000 f91d 	bl	20005538 <FLASH_MassErase>
200052fe:	e018      	b.n	20005332 <HAL_FLASHEx_Erase_IT+0x86>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
20005300:	4b0f      	ldr	r3, [pc, #60]	@ (20005340 <HAL_FLASHEx_Erase_IT+0x94>)
20005302:	2201      	movs	r2, #1
20005304:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
20005306:	687b      	ldr	r3, [r7, #4]
20005308:	68db      	ldr	r3, [r3, #12]
2000530a:	4a0d      	ldr	r2, [pc, #52]	@ (20005340 <HAL_FLASHEx_Erase_IT+0x94>)
2000530c:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
2000530e:	687b      	ldr	r3, [r7, #4]
20005310:	689b      	ldr	r3, [r3, #8]
20005312:	4a0b      	ldr	r2, [pc, #44]	@ (20005340 <HAL_FLASHEx_Erase_IT+0x94>)
20005314:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
20005316:	687b      	ldr	r3, [r7, #4]
20005318:	691b      	ldr	r3, [r3, #16]
2000531a:	b2da      	uxtb	r2, r3
2000531c:	4b08      	ldr	r3, [pc, #32]	@ (20005340 <HAL_FLASHEx_Erase_IT+0x94>)
2000531e:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
20005320:	687b      	ldr	r3, [r7, #4]
20005322:	689a      	ldr	r2, [r3, #8]
20005324:	687b      	ldr	r3, [r7, #4]
20005326:	691b      	ldr	r3, [r3, #16]
20005328:	b2db      	uxtb	r3, r3
2000532a:	4619      	mov	r1, r3
2000532c:	4610      	mov	r0, r2
2000532e:	f000 f927 	bl	20005580 <FLASH_Erase_Sector>
  }

  return status;
20005332:	7bfb      	ldrb	r3, [r7, #15]
}
20005334:	4618      	mov	r0, r3
20005336:	3710      	adds	r7, #16
20005338:	46bd      	mov	sp, r7
2000533a:	bd80      	pop	{r7, pc}
2000533c:	40023c00 	.word	0x40023c00
20005340:	20000498 	.word	0x20000498

20005344 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
20005344:	b580      	push	{r7, lr}
20005346:	b084      	sub	sp, #16
20005348:	af00      	add	r7, sp, #0
2000534a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
2000534c:	2301      	movs	r3, #1
2000534e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20005350:	4b32      	ldr	r3, [pc, #200]	@ (2000541c <HAL_FLASHEx_OBProgram+0xd8>)
20005352:	7e1b      	ldrb	r3, [r3, #24]
20005354:	2b01      	cmp	r3, #1
20005356:	d101      	bne.n	2000535c <HAL_FLASHEx_OBProgram+0x18>
20005358:	2302      	movs	r3, #2
2000535a:	e05b      	b.n	20005414 <HAL_FLASHEx_OBProgram+0xd0>
2000535c:	4b2f      	ldr	r3, [pc, #188]	@ (2000541c <HAL_FLASHEx_OBProgram+0xd8>)
2000535e:	2201      	movs	r2, #1
20005360:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
20005362:	687b      	ldr	r3, [r7, #4]
20005364:	681b      	ldr	r3, [r3, #0]
20005366:	f003 0301 	and.w	r3, r3, #1
2000536a:	2b00      	cmp	r3, #0
2000536c:	d018      	beq.n	200053a0 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
2000536e:	687b      	ldr	r3, [r7, #4]
20005370:	685b      	ldr	r3, [r3, #4]
20005372:	2b01      	cmp	r3, #1
20005374:	d10a      	bne.n	2000538c <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
20005376:	687b      	ldr	r3, [r7, #4]
20005378:	689a      	ldr	r2, [r3, #8]
2000537a:	687b      	ldr	r3, [r7, #4]
2000537c:	68db      	ldr	r3, [r3, #12]
2000537e:	4619      	mov	r1, r3
20005380:	4610      	mov	r0, r2
20005382:	f000 f945 	bl	20005610 <FLASH_OB_EnableWRP>
20005386:	4603      	mov	r3, r0
20005388:	73fb      	strb	r3, [r7, #15]
2000538a:	e009      	b.n	200053a0 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
2000538c:	687b      	ldr	r3, [r7, #4]
2000538e:	689a      	ldr	r2, [r3, #8]
20005390:	687b      	ldr	r3, [r7, #4]
20005392:	68db      	ldr	r3, [r3, #12]
20005394:	4619      	mov	r1, r3
20005396:	4610      	mov	r0, r2
20005398:	f000 f95c 	bl	20005654 <FLASH_OB_DisableWRP>
2000539c:	4603      	mov	r3, r0
2000539e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
200053a0:	687b      	ldr	r3, [r7, #4]
200053a2:	681b      	ldr	r3, [r3, #0]
200053a4:	f003 0302 	and.w	r3, r3, #2
200053a8:	2b00      	cmp	r3, #0
200053aa:	d007      	beq.n	200053bc <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
200053ac:	687b      	ldr	r3, [r7, #4]
200053ae:	691b      	ldr	r3, [r3, #16]
200053b0:	b2db      	uxtb	r3, r3
200053b2:	4618      	mov	r0, r3
200053b4:	f000 f9b0 	bl	20005718 <FLASH_OB_RDP_LevelConfig>
200053b8:	4603      	mov	r3, r0
200053ba:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
200053bc:	687b      	ldr	r3, [r7, #4]
200053be:	681b      	ldr	r3, [r3, #0]
200053c0:	f003 0304 	and.w	r3, r3, #4
200053c4:	2b00      	cmp	r3, #0
200053c6:	d013      	beq.n	200053f0 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
200053c8:	687b      	ldr	r3, [r7, #4]
200053ca:	7e1b      	ldrb	r3, [r3, #24]
200053cc:	f003 0320 	and.w	r3, r3, #32
200053d0:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
200053d2:	687b      	ldr	r3, [r7, #4]
200053d4:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
200053d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200053da:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
200053dc:	687b      	ldr	r3, [r7, #4]
200053de:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
200053e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
200053e4:	b2db      	uxtb	r3, r3
200053e6:	461a      	mov	r2, r3
200053e8:	f000 f9b0 	bl	2000574c <FLASH_OB_UserConfig>
200053ec:	4603      	mov	r3, r0
200053ee:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
200053f0:	687b      	ldr	r3, [r7, #4]
200053f2:	681b      	ldr	r3, [r3, #0]
200053f4:	f003 0308 	and.w	r3, r3, #8
200053f8:	2b00      	cmp	r3, #0
200053fa:	d007      	beq.n	2000540c <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
200053fc:	687b      	ldr	r3, [r7, #4]
200053fe:	695b      	ldr	r3, [r3, #20]
20005400:	b2db      	uxtb	r3, r3
20005402:	4618      	mov	r0, r3
20005404:	f000 f9d2 	bl	200057ac <FLASH_OB_BOR_LevelConfig>
20005408:	4603      	mov	r3, r0
2000540a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
2000540c:	4b03      	ldr	r3, [pc, #12]	@ (2000541c <HAL_FLASHEx_OBProgram+0xd8>)
2000540e:	2200      	movs	r2, #0
20005410:	761a      	strb	r2, [r3, #24]

  return status;
20005412:	7bfb      	ldrb	r3, [r7, #15]
}
20005414:	4618      	mov	r0, r3
20005416:	3710      	adds	r7, #16
20005418:	46bd      	mov	sp, r7
2000541a:	bd80      	pop	{r7, pc}
2000541c:	20000498 	.word	0x20000498

20005420 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
20005420:	b580      	push	{r7, lr}
20005422:	b082      	sub	sp, #8
20005424:	af00      	add	r7, sp, #0
20005426:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
20005428:	687b      	ldr	r3, [r7, #4]
2000542a:	220f      	movs	r2, #15
2000542c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
2000542e:	f000 f9eb 	bl	20005808 <FLASH_OB_GetWRP>
20005432:	4603      	mov	r3, r0
20005434:	461a      	mov	r2, r3
20005436:	687b      	ldr	r3, [r7, #4]
20005438:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
2000543a:	f000 f9f1 	bl	20005820 <FLASH_OB_GetRDP>
2000543e:	4603      	mov	r3, r0
20005440:	461a      	mov	r2, r3
20005442:	687b      	ldr	r3, [r7, #4]
20005444:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
20005446:	f000 f9cf 	bl	200057e8 <FLASH_OB_GetUser>
2000544a:	4603      	mov	r3, r0
2000544c:	461a      	mov	r2, r3
2000544e:	687b      	ldr	r3, [r7, #4]
20005450:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
20005452:	f000 fa05 	bl	20005860 <FLASH_OB_GetBOR>
20005456:	4603      	mov	r3, r0
20005458:	461a      	mov	r2, r3
2000545a:	687b      	ldr	r3, [r7, #4]
2000545c:	615a      	str	r2, [r3, #20]
}
2000545e:	bf00      	nop
20005460:	3708      	adds	r7, #8
20005462:	46bd      	mov	sp, r7
20005464:	bd80      	pop	{r7, pc}

20005466 <HAL_FLASHEx_AdvOBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
20005466:	b580      	push	{r7, lr}
20005468:	b084      	sub	sp, #16
2000546a:	af00      	add	r7, sp, #0
2000546c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
2000546e:	2301      	movs	r3, #1
20005470:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OBEX(pAdvOBInit->OptionType));

  /*Program PCROP option byte*/
  if (((pAdvOBInit->OptionType) & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
20005472:	687b      	ldr	r3, [r7, #4]
20005474:	681b      	ldr	r3, [r3, #0]
20005476:	f003 0301 	and.w	r3, r3, #1
2000547a:	2b00      	cmp	r3, #0
2000547c:	d012      	beq.n	200054a4 <HAL_FLASHEx_AdvOBProgram+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
    if ((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
2000547e:	687b      	ldr	r3, [r7, #4]
20005480:	685b      	ldr	r3, [r3, #4]
20005482:	2b01      	cmp	r3, #1
20005484:	d107      	bne.n	20005496 <HAL_FLASHEx_AdvOBProgram+0x30>
    {
      /*Enable of Write protection on the selected Sector*/
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_EnablePCROP(pAdvOBInit->Sectors);
20005486:	687b      	ldr	r3, [r7, #4]
20005488:	891b      	ldrh	r3, [r3, #8]
2000548a:	4618      	mov	r0, r3
2000548c:	f000 f902 	bl	20005694 <FLASH_OB_EnablePCROP>
20005490:	4603      	mov	r3, r0
20005492:	73fb      	strb	r3, [r7, #15]
20005494:	e006      	b.n	200054a4 <HAL_FLASHEx_AdvOBProgram+0x3e>
    {
      /*Disable of Write protection on the selected Sector*/
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_DisablePCROP(pAdvOBInit->Sectors);
20005496:	687b      	ldr	r3, [r7, #4]
20005498:	891b      	ldrh	r3, [r3, #8]
2000549a:	4618      	mov	r0, r3
2000549c:	f000 f91a 	bl	200056d4 <FLASH_OB_DisablePCROP>
200054a0:	4603      	mov	r3, r0
200054a2:	73fb      	strb	r3, [r7, #15]
  {
    status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
  }
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */

  return status;
200054a4:	7bfb      	ldrb	r3, [r7, #15]
}
200054a6:	4618      	mov	r0, r3
200054a8:	3710      	adds	r7, #16
200054aa:	46bd      	mov	sp, r7
200054ac:	bd80      	pop	{r7, pc}
	...

200054b0 <HAL_FLASHEx_AdvOBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
200054b0:	b480      	push	{r7}
200054b2:	b083      	sub	sp, #12
200054b4:	af00      	add	r7, sp, #0
200054b6:	6078      	str	r0, [r7, #4]
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /*Get Sector*/
  pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
200054b8:	4b05      	ldr	r3, [pc, #20]	@ (200054d0 <HAL_FLASHEx_AdvOBGetConfig+0x20>)
200054ba:	881b      	ldrh	r3, [r3, #0]
200054bc:	b29a      	uxth	r2, r3
200054be:	687b      	ldr	r3, [r7, #4]
200054c0:	811a      	strh	r2, [r3, #8]

  /*Get Boot config OB*/
  pAdvOBInit->BootConfig = *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS;
#endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx ||
          STM32F413xx || STM32F423xx */
}
200054c2:	bf00      	nop
200054c4:	370c      	adds	r7, #12
200054c6:	46bd      	mov	sp, r7
200054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
200054cc:	4770      	bx	lr
200054ce:	bf00      	nop
200054d0:	40023c16 	.word	0x40023c16

200054d4 <HAL_FLASHEx_OB_SelectPCROP>:
  *         STM32F469xx/STM32F479xx/STM32F412xx/STM32F413xx devices.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void)
{
200054d4:	b480      	push	{r7}
200054d6:	b083      	sub	sp, #12
200054d8:	af00      	add	r7, sp, #0
  uint8_t optiontmp = 0xFF;
200054da:	23ff      	movs	r3, #255	@ 0xff
200054dc:	71fb      	strb	r3, [r7, #7]

  /* Mask SPRMOD bit */
  optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F);
200054de:	4b09      	ldr	r3, [pc, #36]	@ (20005504 <HAL_FLASHEx_OB_SelectPCROP+0x30>)
200054e0:	781b      	ldrb	r3, [r3, #0]
200054e2:	b2db      	uxtb	r3, r3
200054e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
200054e8:	71fb      	strb	r3, [r7, #7]

  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_SELECTED | optiontmp);
200054ea:	4a06      	ldr	r2, [pc, #24]	@ (20005504 <HAL_FLASHEx_OB_SelectPCROP+0x30>)
200054ec:	79fb      	ldrb	r3, [r7, #7]
200054ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
200054f2:	b2db      	uxtb	r3, r3
200054f4:	7013      	strb	r3, [r2, #0]

  return HAL_OK;
200054f6:	2300      	movs	r3, #0
}
200054f8:	4618      	mov	r0, r3
200054fa:	370c      	adds	r7, #12
200054fc:	46bd      	mov	sp, r7
200054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20005502:	4770      	bx	lr
20005504:	40023c17 	.word	0x40023c17

20005508 <HAL_FLASHEx_OB_DeSelectPCROP>:
  *         STM32F469xx/STM32F479xx/STM32F412xx/STM32F413xx devices.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OB_DeSelectPCROP(void)
{
20005508:	b480      	push	{r7}
2000550a:	b083      	sub	sp, #12
2000550c:	af00      	add	r7, sp, #0
  uint8_t optiontmp = 0xFF;
2000550e:	23ff      	movs	r3, #255	@ 0xff
20005510:	71fb      	strb	r3, [r7, #7]

  /* Mask SPRMOD bit */
  optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F);
20005512:	4b08      	ldr	r3, [pc, #32]	@ (20005534 <HAL_FLASHEx_OB_DeSelectPCROP+0x2c>)
20005514:	781b      	ldrb	r3, [r3, #0]
20005516:	b2db      	uxtb	r3, r3
20005518:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2000551c:	71fb      	strb	r3, [r7, #7]

  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_DESELECTED | optiontmp);
2000551e:	4a05      	ldr	r2, [pc, #20]	@ (20005534 <HAL_FLASHEx_OB_DeSelectPCROP+0x2c>)
20005520:	79fb      	ldrb	r3, [r7, #7]
20005522:	7013      	strb	r3, [r2, #0]

  return HAL_OK;
20005524:	2300      	movs	r3, #0
}
20005526:	4618      	mov	r0, r3
20005528:	370c      	adds	r7, #12
2000552a:	46bd      	mov	sp, r7
2000552c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005530:	4770      	bx	lr
20005532:	bf00      	nop
20005534:	40023c17 	.word	0x40023c17

20005538 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
20005538:	b480      	push	{r7}
2000553a:	b083      	sub	sp, #12
2000553c:	af00      	add	r7, sp, #0
2000553e:	4603      	mov	r3, r0
20005540:	6039      	str	r1, [r7, #0]
20005542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20005544:	4b0d      	ldr	r3, [pc, #52]	@ (2000557c <FLASH_MassErase+0x44>)
20005546:	691b      	ldr	r3, [r3, #16]
20005548:	4a0c      	ldr	r2, [pc, #48]	@ (2000557c <FLASH_MassErase+0x44>)
2000554a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
2000554e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
20005550:	4b0a      	ldr	r3, [pc, #40]	@ (2000557c <FLASH_MassErase+0x44>)
20005552:	691b      	ldr	r3, [r3, #16]
20005554:	4a09      	ldr	r2, [pc, #36]	@ (2000557c <FLASH_MassErase+0x44>)
20005556:	f043 0304 	orr.w	r3, r3, #4
2000555a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
2000555c:	4b07      	ldr	r3, [pc, #28]	@ (2000557c <FLASH_MassErase+0x44>)
2000555e:	691a      	ldr	r2, [r3, #16]
20005560:	79fb      	ldrb	r3, [r7, #7]
20005562:	021b      	lsls	r3, r3, #8
20005564:	4313      	orrs	r3, r2
20005566:	4a05      	ldr	r2, [pc, #20]	@ (2000557c <FLASH_MassErase+0x44>)
20005568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2000556c:	6113      	str	r3, [r2, #16]
}
2000556e:	bf00      	nop
20005570:	370c      	adds	r7, #12
20005572:	46bd      	mov	sp, r7
20005574:	f85d 7b04 	ldr.w	r7, [sp], #4
20005578:	4770      	bx	lr
2000557a:	bf00      	nop
2000557c:	40023c00 	.word	0x40023c00

20005580 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
20005580:	b480      	push	{r7}
20005582:	b085      	sub	sp, #20
20005584:	af00      	add	r7, sp, #0
20005586:	6078      	str	r0, [r7, #4]
20005588:	460b      	mov	r3, r1
2000558a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
2000558c:	2300      	movs	r3, #0
2000558e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
20005590:	78fb      	ldrb	r3, [r7, #3]
20005592:	2b00      	cmp	r3, #0
20005594:	d102      	bne.n	2000559c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
20005596:	2300      	movs	r3, #0
20005598:	60fb      	str	r3, [r7, #12]
2000559a:	e010      	b.n	200055be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
2000559c:	78fb      	ldrb	r3, [r7, #3]
2000559e:	2b01      	cmp	r3, #1
200055a0:	d103      	bne.n	200055aa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
200055a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
200055a6:	60fb      	str	r3, [r7, #12]
200055a8:	e009      	b.n	200055be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
200055aa:	78fb      	ldrb	r3, [r7, #3]
200055ac:	2b02      	cmp	r3, #2
200055ae:	d103      	bne.n	200055b8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
200055b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
200055b4:	60fb      	str	r3, [r7, #12]
200055b6:	e002      	b.n	200055be <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
200055b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
200055bc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
200055be:	4b13      	ldr	r3, [pc, #76]	@ (2000560c <FLASH_Erase_Sector+0x8c>)
200055c0:	691b      	ldr	r3, [r3, #16]
200055c2:	4a12      	ldr	r2, [pc, #72]	@ (2000560c <FLASH_Erase_Sector+0x8c>)
200055c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
200055c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
200055ca:	4b10      	ldr	r3, [pc, #64]	@ (2000560c <FLASH_Erase_Sector+0x8c>)
200055cc:	691a      	ldr	r2, [r3, #16]
200055ce:	490f      	ldr	r1, [pc, #60]	@ (2000560c <FLASH_Erase_Sector+0x8c>)
200055d0:	68fb      	ldr	r3, [r7, #12]
200055d2:	4313      	orrs	r3, r2
200055d4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
200055d6:	4b0d      	ldr	r3, [pc, #52]	@ (2000560c <FLASH_Erase_Sector+0x8c>)
200055d8:	691b      	ldr	r3, [r3, #16]
200055da:	4a0c      	ldr	r2, [pc, #48]	@ (2000560c <FLASH_Erase_Sector+0x8c>)
200055dc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
200055e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
200055e2:	4b0a      	ldr	r3, [pc, #40]	@ (2000560c <FLASH_Erase_Sector+0x8c>)
200055e4:	691a      	ldr	r2, [r3, #16]
200055e6:	687b      	ldr	r3, [r7, #4]
200055e8:	00db      	lsls	r3, r3, #3
200055ea:	4313      	orrs	r3, r2
200055ec:	4a07      	ldr	r2, [pc, #28]	@ (2000560c <FLASH_Erase_Sector+0x8c>)
200055ee:	f043 0302 	orr.w	r3, r3, #2
200055f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
200055f4:	4b05      	ldr	r3, [pc, #20]	@ (2000560c <FLASH_Erase_Sector+0x8c>)
200055f6:	691b      	ldr	r3, [r3, #16]
200055f8:	4a04      	ldr	r2, [pc, #16]	@ (2000560c <FLASH_Erase_Sector+0x8c>)
200055fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
200055fe:	6113      	str	r3, [r2, #16]
}
20005600:	bf00      	nop
20005602:	3714      	adds	r7, #20
20005604:	46bd      	mov	sp, r7
20005606:	f85d 7b04 	ldr.w	r7, [sp], #4
2000560a:	4770      	bx	lr
2000560c:	40023c00 	.word	0x40023c00

20005610 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
20005610:	b580      	push	{r7, lr}
20005612:	b084      	sub	sp, #16
20005614:	af00      	add	r7, sp, #0
20005616:	6078      	str	r0, [r7, #4]
20005618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000561a:	2300      	movs	r3, #0
2000561c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000561e:	f24c 3050 	movw	r0, #50000	@ 0xc350
20005622:	f7ff fc93 	bl	20004f4c <FLASH_WaitForLastOperation>
20005626:	4603      	mov	r3, r0
20005628:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
2000562a:	7bfb      	ldrb	r3, [r7, #15]
2000562c:	2b00      	cmp	r3, #0
2000562e:	d10a      	bne.n	20005646 <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
20005630:	4b07      	ldr	r3, [pc, #28]	@ (20005650 <FLASH_OB_EnableWRP+0x40>)
20005632:	881b      	ldrh	r3, [r3, #0]
20005634:	b29a      	uxth	r2, r3
20005636:	687b      	ldr	r3, [r7, #4]
20005638:	b29b      	uxth	r3, r3
2000563a:	43db      	mvns	r3, r3
2000563c:	b29b      	uxth	r3, r3
2000563e:	4904      	ldr	r1, [pc, #16]	@ (20005650 <FLASH_OB_EnableWRP+0x40>)
20005640:	4013      	ands	r3, r2
20005642:	b29b      	uxth	r3, r3
20005644:	800b      	strh	r3, [r1, #0]
  }

  return status;
20005646:	7bfb      	ldrb	r3, [r7, #15]
}
20005648:	4618      	mov	r0, r3
2000564a:	3710      	adds	r7, #16
2000564c:	46bd      	mov	sp, r7
2000564e:	bd80      	pop	{r7, pc}
20005650:	40023c16 	.word	0x40023c16

20005654 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
20005654:	b580      	push	{r7, lr}
20005656:	b084      	sub	sp, #16
20005658:	af00      	add	r7, sp, #0
2000565a:	6078      	str	r0, [r7, #4]
2000565c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000565e:	2300      	movs	r3, #0
20005660:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005662:	f24c 3050 	movw	r0, #50000	@ 0xc350
20005666:	f7ff fc71 	bl	20004f4c <FLASH_WaitForLastOperation>
2000566a:	4603      	mov	r3, r0
2000566c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
2000566e:	7bfb      	ldrb	r3, [r7, #15]
20005670:	2b00      	cmp	r3, #0
20005672:	d108      	bne.n	20005686 <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
20005674:	4b06      	ldr	r3, [pc, #24]	@ (20005690 <FLASH_OB_DisableWRP+0x3c>)
20005676:	881b      	ldrh	r3, [r3, #0]
20005678:	b29a      	uxth	r2, r3
2000567a:	687b      	ldr	r3, [r7, #4]
2000567c:	b29b      	uxth	r3, r3
2000567e:	4904      	ldr	r1, [pc, #16]	@ (20005690 <FLASH_OB_DisableWRP+0x3c>)
20005680:	4313      	orrs	r3, r2
20005682:	b29b      	uxth	r3, r3
20005684:	800b      	strh	r3, [r1, #0]
  }

  return status;
20005686:	7bfb      	ldrb	r3, [r7, #15]
}
20005688:	4618      	mov	r0, r3
2000568a:	3710      	adds	r7, #16
2000568c:	46bd      	mov	sp, r7
2000568e:	bd80      	pop	{r7, pc}
20005690:	40023c16 	.word	0x40023c16

20005694 <FLASH_OB_EnablePCROP>:
  *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
  *            @arg OB_PCROP_Sector_All
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t Sector)
{
20005694:	b580      	push	{r7, lr}
20005696:	b084      	sub	sp, #16
20005698:	af00      	add	r7, sp, #0
2000569a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2000569c:	2300      	movs	r3, #0
2000569e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_PCROP(Sector));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200056a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
200056a4:	f7ff fc52 	bl	20004f4c <FLASH_WaitForLastOperation>
200056a8:	4603      	mov	r3, r0
200056aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
200056ac:	7bfb      	ldrb	r3, [r7, #15]
200056ae:	2b00      	cmp	r3, #0
200056b0:	d108      	bne.n	200056c4 <FLASH_OB_EnablePCROP+0x30>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)Sector;
200056b2:	4b07      	ldr	r3, [pc, #28]	@ (200056d0 <FLASH_OB_EnablePCROP+0x3c>)
200056b4:	881b      	ldrh	r3, [r3, #0]
200056b6:	b29a      	uxth	r2, r3
200056b8:	687b      	ldr	r3, [r7, #4]
200056ba:	b29b      	uxth	r3, r3
200056bc:	4904      	ldr	r1, [pc, #16]	@ (200056d0 <FLASH_OB_EnablePCROP+0x3c>)
200056be:	4313      	orrs	r3, r2
200056c0:	b29b      	uxth	r3, r3
200056c2:	800b      	strh	r3, [r1, #0]
  }

  return status;
200056c4:	7bfb      	ldrb	r3, [r7, #15]
}
200056c6:	4618      	mov	r0, r3
200056c8:	3710      	adds	r7, #16
200056ca:	46bd      	mov	sp, r7
200056cc:	bd80      	pop	{r7, pc}
200056ce:	bf00      	nop
200056d0:	40023c16 	.word	0x40023c16

200056d4 <FLASH_OB_DisablePCROP>:
  *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
  *            @arg OB_PCROP_Sector_All
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t Sector)
{
200056d4:	b580      	push	{r7, lr}
200056d6:	b084      	sub	sp, #16
200056d8:	af00      	add	r7, sp, #0
200056da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
200056dc:	2300      	movs	r3, #0
200056de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_PCROP(Sector));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200056e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
200056e4:	f7ff fc32 	bl	20004f4c <FLASH_WaitForLastOperation>
200056e8:	4603      	mov	r3, r0
200056ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
200056ec:	7bfb      	ldrb	r3, [r7, #15]
200056ee:	2b00      	cmp	r3, #0
200056f0:	d10a      	bne.n	20005708 <FLASH_OB_DisablePCROP+0x34>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~Sector);
200056f2:	4b08      	ldr	r3, [pc, #32]	@ (20005714 <FLASH_OB_DisablePCROP+0x40>)
200056f4:	881b      	ldrh	r3, [r3, #0]
200056f6:	b29a      	uxth	r2, r3
200056f8:	687b      	ldr	r3, [r7, #4]
200056fa:	b29b      	uxth	r3, r3
200056fc:	43db      	mvns	r3, r3
200056fe:	b29b      	uxth	r3, r3
20005700:	4904      	ldr	r1, [pc, #16]	@ (20005714 <FLASH_OB_DisablePCROP+0x40>)
20005702:	4013      	ands	r3, r2
20005704:	b29b      	uxth	r3, r3
20005706:	800b      	strh	r3, [r1, #0]
  }

  return status;
20005708:	7bfb      	ldrb	r3, [r7, #15]

}
2000570a:	4618      	mov	r0, r3
2000570c:	3710      	adds	r7, #16
2000570e:	46bd      	mov	sp, r7
20005710:	bd80      	pop	{r7, pc}
20005712:	bf00      	nop
20005714:	40023c16 	.word	0x40023c16

20005718 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
20005718:	b580      	push	{r7, lr}
2000571a:	b084      	sub	sp, #16
2000571c:	af00      	add	r7, sp, #0
2000571e:	4603      	mov	r3, r0
20005720:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
20005722:	2300      	movs	r3, #0
20005724:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005726:	f24c 3050 	movw	r0, #50000	@ 0xc350
2000572a:	f7ff fc0f 	bl	20004f4c <FLASH_WaitForLastOperation>
2000572e:	4603      	mov	r3, r0
20005730:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
20005732:	7bfb      	ldrb	r3, [r7, #15]
20005734:	2b00      	cmp	r3, #0
20005736:	d102      	bne.n	2000573e <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
20005738:	4a03      	ldr	r2, [pc, #12]	@ (20005748 <FLASH_OB_RDP_LevelConfig+0x30>)
2000573a:	79fb      	ldrb	r3, [r7, #7]
2000573c:	7013      	strb	r3, [r2, #0]
  }

  return status;
2000573e:	7bfb      	ldrb	r3, [r7, #15]
}
20005740:	4618      	mov	r0, r3
20005742:	3710      	adds	r7, #16
20005744:	46bd      	mov	sp, r7
20005746:	bd80      	pop	{r7, pc}
20005748:	40023c15 	.word	0x40023c15

2000574c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
2000574c:	b580      	push	{r7, lr}
2000574e:	b084      	sub	sp, #16
20005750:	af00      	add	r7, sp, #0
20005752:	4603      	mov	r3, r0
20005754:	71fb      	strb	r3, [r7, #7]
20005756:	460b      	mov	r3, r1
20005758:	71bb      	strb	r3, [r7, #6]
2000575a:	4613      	mov	r3, r2
2000575c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
2000575e:	23ff      	movs	r3, #255	@ 0xff
20005760:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
20005762:	2300      	movs	r3, #0
20005764:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005766:	f24c 3050 	movw	r0, #50000	@ 0xc350
2000576a:	f7ff fbef 	bl	20004f4c <FLASH_WaitForLastOperation>
2000576e:	4603      	mov	r3, r0
20005770:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
20005772:	7bbb      	ldrb	r3, [r7, #14]
20005774:	2b00      	cmp	r3, #0
20005776:	d111      	bne.n	2000579c <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
20005778:	4b0b      	ldr	r3, [pc, #44]	@ (200057a8 <FLASH_OB_UserConfig+0x5c>)
2000577a:	781b      	ldrb	r3, [r3, #0]
2000577c:	b2db      	uxtb	r3, r3
2000577e:	f003 031f 	and.w	r3, r3, #31
20005782:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
20005784:	79ba      	ldrb	r2, [r7, #6]
20005786:	7bfb      	ldrb	r3, [r7, #15]
20005788:	4313      	orrs	r3, r2
2000578a:	b2da      	uxtb	r2, r3
2000578c:	797b      	ldrb	r3, [r7, #5]
2000578e:	4313      	orrs	r3, r2
20005790:	b2da      	uxtb	r2, r3
20005792:	4905      	ldr	r1, [pc, #20]	@ (200057a8 <FLASH_OB_UserConfig+0x5c>)
20005794:	79fb      	ldrb	r3, [r7, #7]
20005796:	4313      	orrs	r3, r2
20005798:	b2db      	uxtb	r3, r3
2000579a:	700b      	strb	r3, [r1, #0]
  }

  return status;
2000579c:	7bbb      	ldrb	r3, [r7, #14]
}
2000579e:	4618      	mov	r0, r3
200057a0:	3710      	adds	r7, #16
200057a2:	46bd      	mov	sp, r7
200057a4:	bd80      	pop	{r7, pc}
200057a6:	bf00      	nop
200057a8:	40023c14 	.word	0x40023c14

200057ac <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
200057ac:	b480      	push	{r7}
200057ae:	b083      	sub	sp, #12
200057b0:	af00      	add	r7, sp, #0
200057b2:	4603      	mov	r3, r0
200057b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
200057b6:	4b0b      	ldr	r3, [pc, #44]	@ (200057e4 <FLASH_OB_BOR_LevelConfig+0x38>)
200057b8:	781b      	ldrb	r3, [r3, #0]
200057ba:	b2db      	uxtb	r3, r3
200057bc:	4a09      	ldr	r2, [pc, #36]	@ (200057e4 <FLASH_OB_BOR_LevelConfig+0x38>)
200057be:	f023 030c 	bic.w	r3, r3, #12
200057c2:	b2db      	uxtb	r3, r3
200057c4:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
200057c6:	4b07      	ldr	r3, [pc, #28]	@ (200057e4 <FLASH_OB_BOR_LevelConfig+0x38>)
200057c8:	781b      	ldrb	r3, [r3, #0]
200057ca:	b2da      	uxtb	r2, r3
200057cc:	4905      	ldr	r1, [pc, #20]	@ (200057e4 <FLASH_OB_BOR_LevelConfig+0x38>)
200057ce:	79fb      	ldrb	r3, [r7, #7]
200057d0:	4313      	orrs	r3, r2
200057d2:	b2db      	uxtb	r3, r3
200057d4:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
200057d6:	2300      	movs	r3, #0

}
200057d8:	4618      	mov	r0, r3
200057da:	370c      	adds	r7, #12
200057dc:	46bd      	mov	sp, r7
200057de:	f85d 7b04 	ldr.w	r7, [sp], #4
200057e2:	4770      	bx	lr
200057e4:	40023c14 	.word	0x40023c14

200057e8 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
200057e8:	b480      	push	{r7}
200057ea:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
200057ec:	4b05      	ldr	r3, [pc, #20]	@ (20005804 <FLASH_OB_GetUser+0x1c>)
200057ee:	695b      	ldr	r3, [r3, #20]
200057f0:	b2db      	uxtb	r3, r3
200057f2:	f023 031f 	bic.w	r3, r3, #31
200057f6:	b2db      	uxtb	r3, r3
}
200057f8:	4618      	mov	r0, r3
200057fa:	46bd      	mov	sp, r7
200057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20005800:	4770      	bx	lr
20005802:	bf00      	nop
20005804:	40023c00 	.word	0x40023c00

20005808 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
20005808:	b480      	push	{r7}
2000580a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
2000580c:	4b03      	ldr	r3, [pc, #12]	@ (2000581c <FLASH_OB_GetWRP+0x14>)
2000580e:	881b      	ldrh	r3, [r3, #0]
20005810:	b29b      	uxth	r3, r3
}
20005812:	4618      	mov	r0, r3
20005814:	46bd      	mov	sp, r7
20005816:	f85d 7b04 	ldr.w	r7, [sp], #4
2000581a:	4770      	bx	lr
2000581c:	40023c16 	.word	0x40023c16

20005820 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
20005820:	b480      	push	{r7}
20005822:	b083      	sub	sp, #12
20005824:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
20005826:	23aa      	movs	r3, #170	@ 0xaa
20005828:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
2000582a:	4b0c      	ldr	r3, [pc, #48]	@ (2000585c <FLASH_OB_GetRDP+0x3c>)
2000582c:	781b      	ldrb	r3, [r3, #0]
2000582e:	b2db      	uxtb	r3, r3
20005830:	2bcc      	cmp	r3, #204	@ 0xcc
20005832:	d102      	bne.n	2000583a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
20005834:	23cc      	movs	r3, #204	@ 0xcc
20005836:	71fb      	strb	r3, [r7, #7]
20005838:	e009      	b.n	2000584e <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
2000583a:	4b08      	ldr	r3, [pc, #32]	@ (2000585c <FLASH_OB_GetRDP+0x3c>)
2000583c:	781b      	ldrb	r3, [r3, #0]
2000583e:	b2db      	uxtb	r3, r3
20005840:	2baa      	cmp	r3, #170	@ 0xaa
20005842:	d102      	bne.n	2000584a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
20005844:	23aa      	movs	r3, #170	@ 0xaa
20005846:	71fb      	strb	r3, [r7, #7]
20005848:	e001      	b.n	2000584e <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
2000584a:	2355      	movs	r3, #85	@ 0x55
2000584c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
2000584e:	79fb      	ldrb	r3, [r7, #7]
}
20005850:	4618      	mov	r0, r3
20005852:	370c      	adds	r7, #12
20005854:	46bd      	mov	sp, r7
20005856:	f85d 7b04 	ldr.w	r7, [sp], #4
2000585a:	4770      	bx	lr
2000585c:	40023c15 	.word	0x40023c15

20005860 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
20005860:	b480      	push	{r7}
20005862:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
20005864:	4b05      	ldr	r3, [pc, #20]	@ (2000587c <FLASH_OB_GetBOR+0x1c>)
20005866:	781b      	ldrb	r3, [r3, #0]
20005868:	b2db      	uxtb	r3, r3
2000586a:	f003 030c 	and.w	r3, r3, #12
2000586e:	b2db      	uxtb	r3, r3
}
20005870:	4618      	mov	r0, r3
20005872:	46bd      	mov	sp, r7
20005874:	f85d 7b04 	ldr.w	r7, [sp], #4
20005878:	4770      	bx	lr
2000587a:	bf00      	nop
2000587c:	40023c14 	.word	0x40023c14

20005880 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
20005880:	b480      	push	{r7}
20005882:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
20005884:	4b20      	ldr	r3, [pc, #128]	@ (20005908 <FLASH_FlushCaches+0x88>)
20005886:	681b      	ldr	r3, [r3, #0]
20005888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
2000588c:	2b00      	cmp	r3, #0
2000588e:	d017      	beq.n	200058c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
20005890:	4b1d      	ldr	r3, [pc, #116]	@ (20005908 <FLASH_FlushCaches+0x88>)
20005892:	681b      	ldr	r3, [r3, #0]
20005894:	4a1c      	ldr	r2, [pc, #112]	@ (20005908 <FLASH_FlushCaches+0x88>)
20005896:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
2000589a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
2000589c:	4b1a      	ldr	r3, [pc, #104]	@ (20005908 <FLASH_FlushCaches+0x88>)
2000589e:	681b      	ldr	r3, [r3, #0]
200058a0:	4a19      	ldr	r2, [pc, #100]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
200058a6:	6013      	str	r3, [r2, #0]
200058a8:	4b17      	ldr	r3, [pc, #92]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058aa:	681b      	ldr	r3, [r3, #0]
200058ac:	4a16      	ldr	r2, [pc, #88]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
200058b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
200058b4:	4b14      	ldr	r3, [pc, #80]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058b6:	681b      	ldr	r3, [r3, #0]
200058b8:	4a13      	ldr	r2, [pc, #76]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
200058be:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
200058c0:	4b11      	ldr	r3, [pc, #68]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058c2:	681b      	ldr	r3, [r3, #0]
200058c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
200058c8:	2b00      	cmp	r3, #0
200058ca:	d017      	beq.n	200058fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
200058cc:	4b0e      	ldr	r3, [pc, #56]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058ce:	681b      	ldr	r3, [r3, #0]
200058d0:	4a0d      	ldr	r2, [pc, #52]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
200058d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
200058d8:	4b0b      	ldr	r3, [pc, #44]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058da:	681b      	ldr	r3, [r3, #0]
200058dc:	4a0a      	ldr	r2, [pc, #40]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
200058e2:	6013      	str	r3, [r2, #0]
200058e4:	4b08      	ldr	r3, [pc, #32]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058e6:	681b      	ldr	r3, [r3, #0]
200058e8:	4a07      	ldr	r2, [pc, #28]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
200058ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
200058f0:	4b05      	ldr	r3, [pc, #20]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058f2:	681b      	ldr	r3, [r3, #0]
200058f4:	4a04      	ldr	r2, [pc, #16]	@ (20005908 <FLASH_FlushCaches+0x88>)
200058f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
200058fa:	6013      	str	r3, [r2, #0]
  }
}
200058fc:	bf00      	nop
200058fe:	46bd      	mov	sp, r7
20005900:	f85d 7b04 	ldr.w	r7, [sp], #4
20005904:	4770      	bx	lr
20005906:	bf00      	nop
20005908:	40023c00 	.word	0x40023c00

2000590c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000590c:	b480      	push	{r7}
2000590e:	b089      	sub	sp, #36	@ 0x24
20005910:	af00      	add	r7, sp, #0
20005912:	6078      	str	r0, [r7, #4]
20005914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
20005916:	2300      	movs	r3, #0
20005918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
2000591a:	2300      	movs	r3, #0
2000591c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
2000591e:	2300      	movs	r3, #0
20005920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
20005922:	2300      	movs	r3, #0
20005924:	61fb      	str	r3, [r7, #28]
20005926:	e159      	b.n	20005bdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
20005928:	2201      	movs	r2, #1
2000592a:	69fb      	ldr	r3, [r7, #28]
2000592c:	fa02 f303 	lsl.w	r3, r2, r3
20005930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
20005932:	683b      	ldr	r3, [r7, #0]
20005934:	681b      	ldr	r3, [r3, #0]
20005936:	697a      	ldr	r2, [r7, #20]
20005938:	4013      	ands	r3, r2
2000593a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
2000593c:	693a      	ldr	r2, [r7, #16]
2000593e:	697b      	ldr	r3, [r7, #20]
20005940:	429a      	cmp	r2, r3
20005942:	f040 8148 	bne.w	20005bd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20005946:	683b      	ldr	r3, [r7, #0]
20005948:	685b      	ldr	r3, [r3, #4]
2000594a:	f003 0303 	and.w	r3, r3, #3
2000594e:	2b01      	cmp	r3, #1
20005950:	d005      	beq.n	2000595e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20005952:	683b      	ldr	r3, [r7, #0]
20005954:	685b      	ldr	r3, [r3, #4]
20005956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
2000595a:	2b02      	cmp	r3, #2
2000595c:	d130      	bne.n	200059c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
2000595e:	687b      	ldr	r3, [r7, #4]
20005960:	689b      	ldr	r3, [r3, #8]
20005962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20005964:	69fb      	ldr	r3, [r7, #28]
20005966:	005b      	lsls	r3, r3, #1
20005968:	2203      	movs	r2, #3
2000596a:	fa02 f303 	lsl.w	r3, r2, r3
2000596e:	43db      	mvns	r3, r3
20005970:	69ba      	ldr	r2, [r7, #24]
20005972:	4013      	ands	r3, r2
20005974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
20005976:	683b      	ldr	r3, [r7, #0]
20005978:	68da      	ldr	r2, [r3, #12]
2000597a:	69fb      	ldr	r3, [r7, #28]
2000597c:	005b      	lsls	r3, r3, #1
2000597e:	fa02 f303 	lsl.w	r3, r2, r3
20005982:	69ba      	ldr	r2, [r7, #24]
20005984:	4313      	orrs	r3, r2
20005986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20005988:	687b      	ldr	r3, [r7, #4]
2000598a:	69ba      	ldr	r2, [r7, #24]
2000598c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000598e:	687b      	ldr	r3, [r7, #4]
20005990:	685b      	ldr	r3, [r3, #4]
20005992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20005994:	2201      	movs	r2, #1
20005996:	69fb      	ldr	r3, [r7, #28]
20005998:	fa02 f303 	lsl.w	r3, r2, r3
2000599c:	43db      	mvns	r3, r3
2000599e:	69ba      	ldr	r2, [r7, #24]
200059a0:	4013      	ands	r3, r2
200059a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
200059a4:	683b      	ldr	r3, [r7, #0]
200059a6:	685b      	ldr	r3, [r3, #4]
200059a8:	091b      	lsrs	r3, r3, #4
200059aa:	f003 0201 	and.w	r2, r3, #1
200059ae:	69fb      	ldr	r3, [r7, #28]
200059b0:	fa02 f303 	lsl.w	r3, r2, r3
200059b4:	69ba      	ldr	r2, [r7, #24]
200059b6:	4313      	orrs	r3, r2
200059b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
200059ba:	687b      	ldr	r3, [r7, #4]
200059bc:	69ba      	ldr	r2, [r7, #24]
200059be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
200059c0:	683b      	ldr	r3, [r7, #0]
200059c2:	685b      	ldr	r3, [r3, #4]
200059c4:	f003 0303 	and.w	r3, r3, #3
200059c8:	2b03      	cmp	r3, #3
200059ca:	d017      	beq.n	200059fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
200059cc:	687b      	ldr	r3, [r7, #4]
200059ce:	68db      	ldr	r3, [r3, #12]
200059d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
200059d2:	69fb      	ldr	r3, [r7, #28]
200059d4:	005b      	lsls	r3, r3, #1
200059d6:	2203      	movs	r2, #3
200059d8:	fa02 f303 	lsl.w	r3, r2, r3
200059dc:	43db      	mvns	r3, r3
200059de:	69ba      	ldr	r2, [r7, #24]
200059e0:	4013      	ands	r3, r2
200059e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
200059e4:	683b      	ldr	r3, [r7, #0]
200059e6:	689a      	ldr	r2, [r3, #8]
200059e8:	69fb      	ldr	r3, [r7, #28]
200059ea:	005b      	lsls	r3, r3, #1
200059ec:	fa02 f303 	lsl.w	r3, r2, r3
200059f0:	69ba      	ldr	r2, [r7, #24]
200059f2:	4313      	orrs	r3, r2
200059f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
200059f6:	687b      	ldr	r3, [r7, #4]
200059f8:	69ba      	ldr	r2, [r7, #24]
200059fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
200059fc:	683b      	ldr	r3, [r7, #0]
200059fe:	685b      	ldr	r3, [r3, #4]
20005a00:	f003 0303 	and.w	r3, r3, #3
20005a04:	2b02      	cmp	r3, #2
20005a06:	d123      	bne.n	20005a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
20005a08:	69fb      	ldr	r3, [r7, #28]
20005a0a:	08da      	lsrs	r2, r3, #3
20005a0c:	687b      	ldr	r3, [r7, #4]
20005a0e:	3208      	adds	r2, #8
20005a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20005a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20005a16:	69fb      	ldr	r3, [r7, #28]
20005a18:	f003 0307 	and.w	r3, r3, #7
20005a1c:	009b      	lsls	r3, r3, #2
20005a1e:	220f      	movs	r2, #15
20005a20:	fa02 f303 	lsl.w	r3, r2, r3
20005a24:	43db      	mvns	r3, r3
20005a26:	69ba      	ldr	r2, [r7, #24]
20005a28:	4013      	ands	r3, r2
20005a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
20005a2c:	683b      	ldr	r3, [r7, #0]
20005a2e:	691a      	ldr	r2, [r3, #16]
20005a30:	69fb      	ldr	r3, [r7, #28]
20005a32:	f003 0307 	and.w	r3, r3, #7
20005a36:	009b      	lsls	r3, r3, #2
20005a38:	fa02 f303 	lsl.w	r3, r2, r3
20005a3c:	69ba      	ldr	r2, [r7, #24]
20005a3e:	4313      	orrs	r3, r2
20005a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
20005a42:	69fb      	ldr	r3, [r7, #28]
20005a44:	08da      	lsrs	r2, r3, #3
20005a46:	687b      	ldr	r3, [r7, #4]
20005a48:	3208      	adds	r2, #8
20005a4a:	69b9      	ldr	r1, [r7, #24]
20005a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
20005a50:	687b      	ldr	r3, [r7, #4]
20005a52:	681b      	ldr	r3, [r3, #0]
20005a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
20005a56:	69fb      	ldr	r3, [r7, #28]
20005a58:	005b      	lsls	r3, r3, #1
20005a5a:	2203      	movs	r2, #3
20005a5c:	fa02 f303 	lsl.w	r3, r2, r3
20005a60:	43db      	mvns	r3, r3
20005a62:	69ba      	ldr	r2, [r7, #24]
20005a64:	4013      	ands	r3, r2
20005a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20005a68:	683b      	ldr	r3, [r7, #0]
20005a6a:	685b      	ldr	r3, [r3, #4]
20005a6c:	f003 0203 	and.w	r2, r3, #3
20005a70:	69fb      	ldr	r3, [r7, #28]
20005a72:	005b      	lsls	r3, r3, #1
20005a74:	fa02 f303 	lsl.w	r3, r2, r3
20005a78:	69ba      	ldr	r2, [r7, #24]
20005a7a:	4313      	orrs	r3, r2
20005a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
20005a7e:	687b      	ldr	r3, [r7, #4]
20005a80:	69ba      	ldr	r2, [r7, #24]
20005a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20005a84:	683b      	ldr	r3, [r7, #0]
20005a86:	685b      	ldr	r3, [r3, #4]
20005a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
20005a8c:	2b00      	cmp	r3, #0
20005a8e:	f000 80a2 	beq.w	20005bd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20005a92:	2300      	movs	r3, #0
20005a94:	60fb      	str	r3, [r7, #12]
20005a96:	4b57      	ldr	r3, [pc, #348]	@ (20005bf4 <HAL_GPIO_Init+0x2e8>)
20005a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20005a9a:	4a56      	ldr	r2, [pc, #344]	@ (20005bf4 <HAL_GPIO_Init+0x2e8>)
20005a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20005aa0:	6453      	str	r3, [r2, #68]	@ 0x44
20005aa2:	4b54      	ldr	r3, [pc, #336]	@ (20005bf4 <HAL_GPIO_Init+0x2e8>)
20005aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20005aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
20005aaa:	60fb      	str	r3, [r7, #12]
20005aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
20005aae:	4a52      	ldr	r2, [pc, #328]	@ (20005bf8 <HAL_GPIO_Init+0x2ec>)
20005ab0:	69fb      	ldr	r3, [r7, #28]
20005ab2:	089b      	lsrs	r3, r3, #2
20005ab4:	3302      	adds	r3, #2
20005ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20005aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20005abc:	69fb      	ldr	r3, [r7, #28]
20005abe:	f003 0303 	and.w	r3, r3, #3
20005ac2:	009b      	lsls	r3, r3, #2
20005ac4:	220f      	movs	r2, #15
20005ac6:	fa02 f303 	lsl.w	r3, r2, r3
20005aca:	43db      	mvns	r3, r3
20005acc:	69ba      	ldr	r2, [r7, #24]
20005ace:	4013      	ands	r3, r2
20005ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20005ad2:	687b      	ldr	r3, [r7, #4]
20005ad4:	4a49      	ldr	r2, [pc, #292]	@ (20005bfc <HAL_GPIO_Init+0x2f0>)
20005ad6:	4293      	cmp	r3, r2
20005ad8:	d019      	beq.n	20005b0e <HAL_GPIO_Init+0x202>
20005ada:	687b      	ldr	r3, [r7, #4]
20005adc:	4a48      	ldr	r2, [pc, #288]	@ (20005c00 <HAL_GPIO_Init+0x2f4>)
20005ade:	4293      	cmp	r3, r2
20005ae0:	d013      	beq.n	20005b0a <HAL_GPIO_Init+0x1fe>
20005ae2:	687b      	ldr	r3, [r7, #4]
20005ae4:	4a47      	ldr	r2, [pc, #284]	@ (20005c04 <HAL_GPIO_Init+0x2f8>)
20005ae6:	4293      	cmp	r3, r2
20005ae8:	d00d      	beq.n	20005b06 <HAL_GPIO_Init+0x1fa>
20005aea:	687b      	ldr	r3, [r7, #4]
20005aec:	4a46      	ldr	r2, [pc, #280]	@ (20005c08 <HAL_GPIO_Init+0x2fc>)
20005aee:	4293      	cmp	r3, r2
20005af0:	d007      	beq.n	20005b02 <HAL_GPIO_Init+0x1f6>
20005af2:	687b      	ldr	r3, [r7, #4]
20005af4:	4a45      	ldr	r2, [pc, #276]	@ (20005c0c <HAL_GPIO_Init+0x300>)
20005af6:	4293      	cmp	r3, r2
20005af8:	d101      	bne.n	20005afe <HAL_GPIO_Init+0x1f2>
20005afa:	2304      	movs	r3, #4
20005afc:	e008      	b.n	20005b10 <HAL_GPIO_Init+0x204>
20005afe:	2307      	movs	r3, #7
20005b00:	e006      	b.n	20005b10 <HAL_GPIO_Init+0x204>
20005b02:	2303      	movs	r3, #3
20005b04:	e004      	b.n	20005b10 <HAL_GPIO_Init+0x204>
20005b06:	2302      	movs	r3, #2
20005b08:	e002      	b.n	20005b10 <HAL_GPIO_Init+0x204>
20005b0a:	2301      	movs	r3, #1
20005b0c:	e000      	b.n	20005b10 <HAL_GPIO_Init+0x204>
20005b0e:	2300      	movs	r3, #0
20005b10:	69fa      	ldr	r2, [r7, #28]
20005b12:	f002 0203 	and.w	r2, r2, #3
20005b16:	0092      	lsls	r2, r2, #2
20005b18:	4093      	lsls	r3, r2
20005b1a:	69ba      	ldr	r2, [r7, #24]
20005b1c:	4313      	orrs	r3, r2
20005b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
20005b20:	4935      	ldr	r1, [pc, #212]	@ (20005bf8 <HAL_GPIO_Init+0x2ec>)
20005b22:	69fb      	ldr	r3, [r7, #28]
20005b24:	089b      	lsrs	r3, r3, #2
20005b26:	3302      	adds	r3, #2
20005b28:	69ba      	ldr	r2, [r7, #24]
20005b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20005b2e:	4b38      	ldr	r3, [pc, #224]	@ (20005c10 <HAL_GPIO_Init+0x304>)
20005b30:	689b      	ldr	r3, [r3, #8]
20005b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005b34:	693b      	ldr	r3, [r7, #16]
20005b36:	43db      	mvns	r3, r3
20005b38:	69ba      	ldr	r2, [r7, #24]
20005b3a:	4013      	ands	r3, r2
20005b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
20005b3e:	683b      	ldr	r3, [r7, #0]
20005b40:	685b      	ldr	r3, [r3, #4]
20005b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
20005b46:	2b00      	cmp	r3, #0
20005b48:	d003      	beq.n	20005b52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
20005b4a:	69ba      	ldr	r2, [r7, #24]
20005b4c:	693b      	ldr	r3, [r7, #16]
20005b4e:	4313      	orrs	r3, r2
20005b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20005b52:	4a2f      	ldr	r2, [pc, #188]	@ (20005c10 <HAL_GPIO_Init+0x304>)
20005b54:	69bb      	ldr	r3, [r7, #24]
20005b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20005b58:	4b2d      	ldr	r3, [pc, #180]	@ (20005c10 <HAL_GPIO_Init+0x304>)
20005b5a:	68db      	ldr	r3, [r3, #12]
20005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005b5e:	693b      	ldr	r3, [r7, #16]
20005b60:	43db      	mvns	r3, r3
20005b62:	69ba      	ldr	r2, [r7, #24]
20005b64:	4013      	ands	r3, r2
20005b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
20005b68:	683b      	ldr	r3, [r7, #0]
20005b6a:	685b      	ldr	r3, [r3, #4]
20005b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
20005b70:	2b00      	cmp	r3, #0
20005b72:	d003      	beq.n	20005b7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
20005b74:	69ba      	ldr	r2, [r7, #24]
20005b76:	693b      	ldr	r3, [r7, #16]
20005b78:	4313      	orrs	r3, r2
20005b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20005b7c:	4a24      	ldr	r2, [pc, #144]	@ (20005c10 <HAL_GPIO_Init+0x304>)
20005b7e:	69bb      	ldr	r3, [r7, #24]
20005b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
20005b82:	4b23      	ldr	r3, [pc, #140]	@ (20005c10 <HAL_GPIO_Init+0x304>)
20005b84:	685b      	ldr	r3, [r3, #4]
20005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005b88:	693b      	ldr	r3, [r7, #16]
20005b8a:	43db      	mvns	r3, r3
20005b8c:	69ba      	ldr	r2, [r7, #24]
20005b8e:	4013      	ands	r3, r2
20005b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
20005b92:	683b      	ldr	r3, [r7, #0]
20005b94:	685b      	ldr	r3, [r3, #4]
20005b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20005b9a:	2b00      	cmp	r3, #0
20005b9c:	d003      	beq.n	20005ba6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
20005b9e:	69ba      	ldr	r2, [r7, #24]
20005ba0:	693b      	ldr	r3, [r7, #16]
20005ba2:	4313      	orrs	r3, r2
20005ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20005ba6:	4a1a      	ldr	r2, [pc, #104]	@ (20005c10 <HAL_GPIO_Init+0x304>)
20005ba8:	69bb      	ldr	r3, [r7, #24]
20005baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20005bac:	4b18      	ldr	r3, [pc, #96]	@ (20005c10 <HAL_GPIO_Init+0x304>)
20005bae:	681b      	ldr	r3, [r3, #0]
20005bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005bb2:	693b      	ldr	r3, [r7, #16]
20005bb4:	43db      	mvns	r3, r3
20005bb6:	69ba      	ldr	r2, [r7, #24]
20005bb8:	4013      	ands	r3, r2
20005bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20005bbc:	683b      	ldr	r3, [r7, #0]
20005bbe:	685b      	ldr	r3, [r3, #4]
20005bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20005bc4:	2b00      	cmp	r3, #0
20005bc6:	d003      	beq.n	20005bd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
20005bc8:	69ba      	ldr	r2, [r7, #24]
20005bca:	693b      	ldr	r3, [r7, #16]
20005bcc:	4313      	orrs	r3, r2
20005bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20005bd0:	4a0f      	ldr	r2, [pc, #60]	@ (20005c10 <HAL_GPIO_Init+0x304>)
20005bd2:	69bb      	ldr	r3, [r7, #24]
20005bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
20005bd6:	69fb      	ldr	r3, [r7, #28]
20005bd8:	3301      	adds	r3, #1
20005bda:	61fb      	str	r3, [r7, #28]
20005bdc:	69fb      	ldr	r3, [r7, #28]
20005bde:	2b0f      	cmp	r3, #15
20005be0:	f67f aea2 	bls.w	20005928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
20005be4:	bf00      	nop
20005be6:	bf00      	nop
20005be8:	3724      	adds	r7, #36	@ 0x24
20005bea:	46bd      	mov	sp, r7
20005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
20005bf0:	4770      	bx	lr
20005bf2:	bf00      	nop
20005bf4:	40023800 	.word	0x40023800
20005bf8:	40013800 	.word	0x40013800
20005bfc:	40020000 	.word	0x40020000
20005c00:	40020400 	.word	0x40020400
20005c04:	40020800 	.word	0x40020800
20005c08:	40020c00 	.word	0x40020c00
20005c0c:	40021000 	.word	0x40021000
20005c10:	40013c00 	.word	0x40013c00

20005c14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
20005c14:	b480      	push	{r7}
20005c16:	b087      	sub	sp, #28
20005c18:	af00      	add	r7, sp, #0
20005c1a:	6078      	str	r0, [r7, #4]
20005c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
20005c1e:	2300      	movs	r3, #0
20005c20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
20005c22:	2300      	movs	r3, #0
20005c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
20005c26:	2300      	movs	r3, #0
20005c28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
20005c2a:	2300      	movs	r3, #0
20005c2c:	617b      	str	r3, [r7, #20]
20005c2e:	e0bb      	b.n	20005da8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
20005c30:	2201      	movs	r2, #1
20005c32:	697b      	ldr	r3, [r7, #20]
20005c34:	fa02 f303 	lsl.w	r3, r2, r3
20005c38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
20005c3a:	683a      	ldr	r2, [r7, #0]
20005c3c:	693b      	ldr	r3, [r7, #16]
20005c3e:	4013      	ands	r3, r2
20005c40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
20005c42:	68fa      	ldr	r2, [r7, #12]
20005c44:	693b      	ldr	r3, [r7, #16]
20005c46:	429a      	cmp	r2, r3
20005c48:	f040 80ab 	bne.w	20005da2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
20005c4c:	4a5c      	ldr	r2, [pc, #368]	@ (20005dc0 <HAL_GPIO_DeInit+0x1ac>)
20005c4e:	697b      	ldr	r3, [r7, #20]
20005c50:	089b      	lsrs	r3, r3, #2
20005c52:	3302      	adds	r3, #2
20005c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20005c58:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
20005c5a:	697b      	ldr	r3, [r7, #20]
20005c5c:	f003 0303 	and.w	r3, r3, #3
20005c60:	009b      	lsls	r3, r3, #2
20005c62:	220f      	movs	r2, #15
20005c64:	fa02 f303 	lsl.w	r3, r2, r3
20005c68:	68ba      	ldr	r2, [r7, #8]
20005c6a:	4013      	ands	r3, r2
20005c6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
20005c6e:	687b      	ldr	r3, [r7, #4]
20005c70:	4a54      	ldr	r2, [pc, #336]	@ (20005dc4 <HAL_GPIO_DeInit+0x1b0>)
20005c72:	4293      	cmp	r3, r2
20005c74:	d019      	beq.n	20005caa <HAL_GPIO_DeInit+0x96>
20005c76:	687b      	ldr	r3, [r7, #4]
20005c78:	4a53      	ldr	r2, [pc, #332]	@ (20005dc8 <HAL_GPIO_DeInit+0x1b4>)
20005c7a:	4293      	cmp	r3, r2
20005c7c:	d013      	beq.n	20005ca6 <HAL_GPIO_DeInit+0x92>
20005c7e:	687b      	ldr	r3, [r7, #4]
20005c80:	4a52      	ldr	r2, [pc, #328]	@ (20005dcc <HAL_GPIO_DeInit+0x1b8>)
20005c82:	4293      	cmp	r3, r2
20005c84:	d00d      	beq.n	20005ca2 <HAL_GPIO_DeInit+0x8e>
20005c86:	687b      	ldr	r3, [r7, #4]
20005c88:	4a51      	ldr	r2, [pc, #324]	@ (20005dd0 <HAL_GPIO_DeInit+0x1bc>)
20005c8a:	4293      	cmp	r3, r2
20005c8c:	d007      	beq.n	20005c9e <HAL_GPIO_DeInit+0x8a>
20005c8e:	687b      	ldr	r3, [r7, #4]
20005c90:	4a50      	ldr	r2, [pc, #320]	@ (20005dd4 <HAL_GPIO_DeInit+0x1c0>)
20005c92:	4293      	cmp	r3, r2
20005c94:	d101      	bne.n	20005c9a <HAL_GPIO_DeInit+0x86>
20005c96:	2304      	movs	r3, #4
20005c98:	e008      	b.n	20005cac <HAL_GPIO_DeInit+0x98>
20005c9a:	2307      	movs	r3, #7
20005c9c:	e006      	b.n	20005cac <HAL_GPIO_DeInit+0x98>
20005c9e:	2303      	movs	r3, #3
20005ca0:	e004      	b.n	20005cac <HAL_GPIO_DeInit+0x98>
20005ca2:	2302      	movs	r3, #2
20005ca4:	e002      	b.n	20005cac <HAL_GPIO_DeInit+0x98>
20005ca6:	2301      	movs	r3, #1
20005ca8:	e000      	b.n	20005cac <HAL_GPIO_DeInit+0x98>
20005caa:	2300      	movs	r3, #0
20005cac:	697a      	ldr	r2, [r7, #20]
20005cae:	f002 0203 	and.w	r2, r2, #3
20005cb2:	0092      	lsls	r2, r2, #2
20005cb4:	4093      	lsls	r3, r2
20005cb6:	68ba      	ldr	r2, [r7, #8]
20005cb8:	429a      	cmp	r2, r3
20005cba:	d132      	bne.n	20005d22 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
20005cbc:	4b46      	ldr	r3, [pc, #280]	@ (20005dd8 <HAL_GPIO_DeInit+0x1c4>)
20005cbe:	681a      	ldr	r2, [r3, #0]
20005cc0:	68fb      	ldr	r3, [r7, #12]
20005cc2:	43db      	mvns	r3, r3
20005cc4:	4944      	ldr	r1, [pc, #272]	@ (20005dd8 <HAL_GPIO_DeInit+0x1c4>)
20005cc6:	4013      	ands	r3, r2
20005cc8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
20005cca:	4b43      	ldr	r3, [pc, #268]	@ (20005dd8 <HAL_GPIO_DeInit+0x1c4>)
20005ccc:	685a      	ldr	r2, [r3, #4]
20005cce:	68fb      	ldr	r3, [r7, #12]
20005cd0:	43db      	mvns	r3, r3
20005cd2:	4941      	ldr	r1, [pc, #260]	@ (20005dd8 <HAL_GPIO_DeInit+0x1c4>)
20005cd4:	4013      	ands	r3, r2
20005cd6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
20005cd8:	4b3f      	ldr	r3, [pc, #252]	@ (20005dd8 <HAL_GPIO_DeInit+0x1c4>)
20005cda:	68da      	ldr	r2, [r3, #12]
20005cdc:	68fb      	ldr	r3, [r7, #12]
20005cde:	43db      	mvns	r3, r3
20005ce0:	493d      	ldr	r1, [pc, #244]	@ (20005dd8 <HAL_GPIO_DeInit+0x1c4>)
20005ce2:	4013      	ands	r3, r2
20005ce4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
20005ce6:	4b3c      	ldr	r3, [pc, #240]	@ (20005dd8 <HAL_GPIO_DeInit+0x1c4>)
20005ce8:	689a      	ldr	r2, [r3, #8]
20005cea:	68fb      	ldr	r3, [r7, #12]
20005cec:	43db      	mvns	r3, r3
20005cee:	493a      	ldr	r1, [pc, #232]	@ (20005dd8 <HAL_GPIO_DeInit+0x1c4>)
20005cf0:	4013      	ands	r3, r2
20005cf2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
20005cf4:	697b      	ldr	r3, [r7, #20]
20005cf6:	f003 0303 	and.w	r3, r3, #3
20005cfa:	009b      	lsls	r3, r3, #2
20005cfc:	220f      	movs	r2, #15
20005cfe:	fa02 f303 	lsl.w	r3, r2, r3
20005d02:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
20005d04:	4a2e      	ldr	r2, [pc, #184]	@ (20005dc0 <HAL_GPIO_DeInit+0x1ac>)
20005d06:	697b      	ldr	r3, [r7, #20]
20005d08:	089b      	lsrs	r3, r3, #2
20005d0a:	3302      	adds	r3, #2
20005d0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
20005d10:	68bb      	ldr	r3, [r7, #8]
20005d12:	43da      	mvns	r2, r3
20005d14:	482a      	ldr	r0, [pc, #168]	@ (20005dc0 <HAL_GPIO_DeInit+0x1ac>)
20005d16:	697b      	ldr	r3, [r7, #20]
20005d18:	089b      	lsrs	r3, r3, #2
20005d1a:	400a      	ands	r2, r1
20005d1c:	3302      	adds	r3, #2
20005d1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
20005d22:	687b      	ldr	r3, [r7, #4]
20005d24:	681a      	ldr	r2, [r3, #0]
20005d26:	697b      	ldr	r3, [r7, #20]
20005d28:	005b      	lsls	r3, r3, #1
20005d2a:	2103      	movs	r1, #3
20005d2c:	fa01 f303 	lsl.w	r3, r1, r3
20005d30:	43db      	mvns	r3, r3
20005d32:	401a      	ands	r2, r3
20005d34:	687b      	ldr	r3, [r7, #4]
20005d36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20005d38:	697b      	ldr	r3, [r7, #20]
20005d3a:	08da      	lsrs	r2, r3, #3
20005d3c:	687b      	ldr	r3, [r7, #4]
20005d3e:	3208      	adds	r2, #8
20005d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
20005d44:	697b      	ldr	r3, [r7, #20]
20005d46:	f003 0307 	and.w	r3, r3, #7
20005d4a:	009b      	lsls	r3, r3, #2
20005d4c:	220f      	movs	r2, #15
20005d4e:	fa02 f303 	lsl.w	r3, r2, r3
20005d52:	43db      	mvns	r3, r3
20005d54:	697a      	ldr	r2, [r7, #20]
20005d56:	08d2      	lsrs	r2, r2, #3
20005d58:	4019      	ands	r1, r3
20005d5a:	687b      	ldr	r3, [r7, #4]
20005d5c:	3208      	adds	r2, #8
20005d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
20005d62:	687b      	ldr	r3, [r7, #4]
20005d64:	68da      	ldr	r2, [r3, #12]
20005d66:	697b      	ldr	r3, [r7, #20]
20005d68:	005b      	lsls	r3, r3, #1
20005d6a:	2103      	movs	r1, #3
20005d6c:	fa01 f303 	lsl.w	r3, r1, r3
20005d70:	43db      	mvns	r3, r3
20005d72:	401a      	ands	r2, r3
20005d74:	687b      	ldr	r3, [r7, #4]
20005d76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
20005d78:	687b      	ldr	r3, [r7, #4]
20005d7a:	685a      	ldr	r2, [r3, #4]
20005d7c:	2101      	movs	r1, #1
20005d7e:	697b      	ldr	r3, [r7, #20]
20005d80:	fa01 f303 	lsl.w	r3, r1, r3
20005d84:	43db      	mvns	r3, r3
20005d86:	401a      	ands	r2, r3
20005d88:	687b      	ldr	r3, [r7, #4]
20005d8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20005d8c:	687b      	ldr	r3, [r7, #4]
20005d8e:	689a      	ldr	r2, [r3, #8]
20005d90:	697b      	ldr	r3, [r7, #20]
20005d92:	005b      	lsls	r3, r3, #1
20005d94:	2103      	movs	r1, #3
20005d96:	fa01 f303 	lsl.w	r3, r1, r3
20005d9a:	43db      	mvns	r3, r3
20005d9c:	401a      	ands	r2, r3
20005d9e:	687b      	ldr	r3, [r7, #4]
20005da0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
20005da2:	697b      	ldr	r3, [r7, #20]
20005da4:	3301      	adds	r3, #1
20005da6:	617b      	str	r3, [r7, #20]
20005da8:	697b      	ldr	r3, [r7, #20]
20005daa:	2b0f      	cmp	r3, #15
20005dac:	f67f af40 	bls.w	20005c30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
20005db0:	bf00      	nop
20005db2:	bf00      	nop
20005db4:	371c      	adds	r7, #28
20005db6:	46bd      	mov	sp, r7
20005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
20005dbc:	4770      	bx	lr
20005dbe:	bf00      	nop
20005dc0:	40013800 	.word	0x40013800
20005dc4:	40020000 	.word	0x40020000
20005dc8:	40020400 	.word	0x40020400
20005dcc:	40020800 	.word	0x40020800
20005dd0:	40020c00 	.word	0x40020c00
20005dd4:	40021000 	.word	0x40021000
20005dd8:	40013c00 	.word	0x40013c00

20005ddc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005ddc:	b480      	push	{r7}
20005dde:	b085      	sub	sp, #20
20005de0:	af00      	add	r7, sp, #0
20005de2:	6078      	str	r0, [r7, #4]
20005de4:	460b      	mov	r3, r1
20005de6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
20005de8:	687b      	ldr	r3, [r7, #4]
20005dea:	691a      	ldr	r2, [r3, #16]
20005dec:	887b      	ldrh	r3, [r7, #2]
20005dee:	4013      	ands	r3, r2
20005df0:	2b00      	cmp	r3, #0
20005df2:	d002      	beq.n	20005dfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
20005df4:	2301      	movs	r3, #1
20005df6:	73fb      	strb	r3, [r7, #15]
20005df8:	e001      	b.n	20005dfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
20005dfa:	2300      	movs	r3, #0
20005dfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
20005dfe:	7bfb      	ldrb	r3, [r7, #15]
}
20005e00:	4618      	mov	r0, r3
20005e02:	3714      	adds	r7, #20
20005e04:	46bd      	mov	sp, r7
20005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e0a:	4770      	bx	lr

20005e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20005e0c:	b480      	push	{r7}
20005e0e:	b083      	sub	sp, #12
20005e10:	af00      	add	r7, sp, #0
20005e12:	6078      	str	r0, [r7, #4]
20005e14:	460b      	mov	r3, r1
20005e16:	807b      	strh	r3, [r7, #2]
20005e18:	4613      	mov	r3, r2
20005e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20005e1c:	787b      	ldrb	r3, [r7, #1]
20005e1e:	2b00      	cmp	r3, #0
20005e20:	d003      	beq.n	20005e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20005e22:	887a      	ldrh	r2, [r7, #2]
20005e24:	687b      	ldr	r3, [r7, #4]
20005e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
20005e28:	e003      	b.n	20005e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20005e2a:	887b      	ldrh	r3, [r7, #2]
20005e2c:	041a      	lsls	r2, r3, #16
20005e2e:	687b      	ldr	r3, [r7, #4]
20005e30:	619a      	str	r2, [r3, #24]
}
20005e32:	bf00      	nop
20005e34:	370c      	adds	r7, #12
20005e36:	46bd      	mov	sp, r7
20005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e3c:	4770      	bx	lr

20005e3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005e3e:	b480      	push	{r7}
20005e40:	b085      	sub	sp, #20
20005e42:	af00      	add	r7, sp, #0
20005e44:	6078      	str	r0, [r7, #4]
20005e46:	460b      	mov	r3, r1
20005e48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
20005e4a:	687b      	ldr	r3, [r7, #4]
20005e4c:	695b      	ldr	r3, [r3, #20]
20005e4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
20005e50:	887a      	ldrh	r2, [r7, #2]
20005e52:	68fb      	ldr	r3, [r7, #12]
20005e54:	4013      	ands	r3, r2
20005e56:	041a      	lsls	r2, r3, #16
20005e58:	68fb      	ldr	r3, [r7, #12]
20005e5a:	43d9      	mvns	r1, r3
20005e5c:	887b      	ldrh	r3, [r7, #2]
20005e5e:	400b      	ands	r3, r1
20005e60:	431a      	orrs	r2, r3
20005e62:	687b      	ldr	r3, [r7, #4]
20005e64:	619a      	str	r2, [r3, #24]
}
20005e66:	bf00      	nop
20005e68:	3714      	adds	r7, #20
20005e6a:	46bd      	mov	sp, r7
20005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e70:	4770      	bx	lr

20005e72 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005e72:	b480      	push	{r7}
20005e74:	b085      	sub	sp, #20
20005e76:	af00      	add	r7, sp, #0
20005e78:	6078      	str	r0, [r7, #4]
20005e7a:	460b      	mov	r3, r1
20005e7c:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
20005e7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
20005e82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
20005e84:	887a      	ldrh	r2, [r7, #2]
20005e86:	68fb      	ldr	r3, [r7, #12]
20005e88:	4313      	orrs	r3, r2
20005e8a:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20005e8c:	68fa      	ldr	r2, [r7, #12]
20005e8e:	687b      	ldr	r3, [r7, #4]
20005e90:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
20005e92:	887a      	ldrh	r2, [r7, #2]
20005e94:	687b      	ldr	r3, [r7, #4]
20005e96:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20005e98:	68fa      	ldr	r2, [r7, #12]
20005e9a:	687b      	ldr	r3, [r7, #4]
20005e9c:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
20005e9e:	687b      	ldr	r3, [r7, #4]
20005ea0:	69db      	ldr	r3, [r3, #28]
20005ea2:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
20005ea4:	687b      	ldr	r3, [r7, #4]
20005ea6:	69db      	ldr	r3, [r3, #28]
20005ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20005eac:	2b00      	cmp	r3, #0
20005eae:	d001      	beq.n	20005eb4 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
20005eb0:	2300      	movs	r3, #0
20005eb2:	e000      	b.n	20005eb6 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
20005eb4:	2301      	movs	r3, #1
  }
}
20005eb6:	4618      	mov	r0, r3
20005eb8:	3714      	adds	r7, #20
20005eba:	46bd      	mov	sp, r7
20005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ec0:	4770      	bx	lr
	...

20005ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
20005ec4:	b580      	push	{r7, lr}
20005ec6:	b082      	sub	sp, #8
20005ec8:	af00      	add	r7, sp, #0
20005eca:	4603      	mov	r3, r0
20005ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
20005ece:	4b08      	ldr	r3, [pc, #32]	@ (20005ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
20005ed0:	695a      	ldr	r2, [r3, #20]
20005ed2:	88fb      	ldrh	r3, [r7, #6]
20005ed4:	4013      	ands	r3, r2
20005ed6:	2b00      	cmp	r3, #0
20005ed8:	d006      	beq.n	20005ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
20005eda:	4a05      	ldr	r2, [pc, #20]	@ (20005ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
20005edc:	88fb      	ldrh	r3, [r7, #6]
20005ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
20005ee0:	88fb      	ldrh	r3, [r7, #6]
20005ee2:	4618      	mov	r0, r3
20005ee4:	f000 f806 	bl	20005ef4 <HAL_GPIO_EXTI_Callback>
  }
}
20005ee8:	bf00      	nop
20005eea:	3708      	adds	r7, #8
20005eec:	46bd      	mov	sp, r7
20005eee:	bd80      	pop	{r7, pc}
20005ef0:	40013c00 	.word	0x40013c00

20005ef4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
20005ef4:	b480      	push	{r7}
20005ef6:	b083      	sub	sp, #12
20005ef8:	af00      	add	r7, sp, #0
20005efa:	4603      	mov	r3, r0
20005efc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
20005efe:	bf00      	nop
20005f00:	370c      	adds	r7, #12
20005f02:	46bd      	mov	sp, r7
20005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f08:	4770      	bx	lr
	...

20005f0c <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
20005f0c:	b480      	push	{r7}
20005f0e:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
20005f10:	4b08      	ldr	r3, [pc, #32]	@ (20005f34 <HAL_PWR_DeInit+0x28>)
20005f12:	6a1b      	ldr	r3, [r3, #32]
20005f14:	4a07      	ldr	r2, [pc, #28]	@ (20005f34 <HAL_PWR_DeInit+0x28>)
20005f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20005f1a:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
20005f1c:	4b05      	ldr	r3, [pc, #20]	@ (20005f34 <HAL_PWR_DeInit+0x28>)
20005f1e:	6a1b      	ldr	r3, [r3, #32]
20005f20:	4a04      	ldr	r2, [pc, #16]	@ (20005f34 <HAL_PWR_DeInit+0x28>)
20005f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
20005f26:	6213      	str	r3, [r2, #32]
}
20005f28:	bf00      	nop
20005f2a:	46bd      	mov	sp, r7
20005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f30:	4770      	bx	lr
20005f32:	bf00      	nop
20005f34:	40023800 	.word	0x40023800

20005f38 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
20005f38:	b480      	push	{r7}
20005f3a:	b083      	sub	sp, #12
20005f3c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
20005f3e:	4b06      	ldr	r3, [pc, #24]	@ (20005f58 <HAL_PWR_EnableBkUpAccess+0x20>)
20005f40:	2201      	movs	r2, #1
20005f42:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
20005f44:	4b05      	ldr	r3, [pc, #20]	@ (20005f5c <HAL_PWR_EnableBkUpAccess+0x24>)
20005f46:	681b      	ldr	r3, [r3, #0]
20005f48:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
20005f4a:	687b      	ldr	r3, [r7, #4]
}
20005f4c:	bf00      	nop
20005f4e:	370c      	adds	r7, #12
20005f50:	46bd      	mov	sp, r7
20005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f56:	4770      	bx	lr
20005f58:	420e0020 	.word	0x420e0020
20005f5c:	40007000 	.word	0x40007000

20005f60 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
20005f60:	b480      	push	{r7}
20005f62:	b083      	sub	sp, #12
20005f64:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
20005f66:	4b06      	ldr	r3, [pc, #24]	@ (20005f80 <HAL_PWR_DisableBkUpAccess+0x20>)
20005f68:	2200      	movs	r2, #0
20005f6a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
20005f6c:	4b05      	ldr	r3, [pc, #20]	@ (20005f84 <HAL_PWR_DisableBkUpAccess+0x24>)
20005f6e:	681b      	ldr	r3, [r3, #0]
20005f70:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
20005f72:	687b      	ldr	r3, [r7, #4]
}
20005f74:	bf00      	nop
20005f76:	370c      	adds	r7, #12
20005f78:	46bd      	mov	sp, r7
20005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f7e:	4770      	bx	lr
20005f80:	420e0020 	.word	0x420e0020
20005f84:	40007000 	.word	0x40007000

20005f88 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
20005f88:	b480      	push	{r7}
20005f8a:	b083      	sub	sp, #12
20005f8c:	af00      	add	r7, sp, #0
20005f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
20005f90:	4b2b      	ldr	r3, [pc, #172]	@ (20006040 <HAL_PWR_ConfigPVD+0xb8>)
20005f92:	681b      	ldr	r3, [r3, #0]
20005f94:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
20005f98:	687b      	ldr	r3, [r7, #4]
20005f9a:	681b      	ldr	r3, [r3, #0]
20005f9c:	4928      	ldr	r1, [pc, #160]	@ (20006040 <HAL_PWR_ConfigPVD+0xb8>)
20005f9e:	4313      	orrs	r3, r2
20005fa0:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
20005fa2:	4b28      	ldr	r3, [pc, #160]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005fa4:	685b      	ldr	r3, [r3, #4]
20005fa6:	4a27      	ldr	r2, [pc, #156]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20005fac:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
20005fae:	4b25      	ldr	r3, [pc, #148]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005fb0:	681b      	ldr	r3, [r3, #0]
20005fb2:	4a24      	ldr	r2, [pc, #144]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005fb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20005fb8:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
20005fba:	4b22      	ldr	r3, [pc, #136]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005fbc:	689b      	ldr	r3, [r3, #8]
20005fbe:	4a21      	ldr	r2, [pc, #132]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20005fc4:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
20005fc6:	4b1f      	ldr	r3, [pc, #124]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005fc8:	68db      	ldr	r3, [r3, #12]
20005fca:	4a1e      	ldr	r2, [pc, #120]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20005fd0:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
20005fd2:	687b      	ldr	r3, [r7, #4]
20005fd4:	685b      	ldr	r3, [r3, #4]
20005fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20005fda:	2b00      	cmp	r3, #0
20005fdc:	d005      	beq.n	20005fea <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
20005fde:	4b19      	ldr	r3, [pc, #100]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005fe0:	681b      	ldr	r3, [r3, #0]
20005fe2:	4a18      	ldr	r2, [pc, #96]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20005fe8:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
20005fea:	687b      	ldr	r3, [r7, #4]
20005fec:	685b      	ldr	r3, [r3, #4]
20005fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20005ff2:	2b00      	cmp	r3, #0
20005ff4:	d005      	beq.n	20006002 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
20005ff6:	4b13      	ldr	r3, [pc, #76]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005ff8:	685b      	ldr	r3, [r3, #4]
20005ffa:	4a12      	ldr	r2, [pc, #72]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20005ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20006000:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
20006002:	687b      	ldr	r3, [r7, #4]
20006004:	685b      	ldr	r3, [r3, #4]
20006006:	f003 0301 	and.w	r3, r3, #1
2000600a:	2b00      	cmp	r3, #0
2000600c:	d005      	beq.n	2000601a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
2000600e:	4b0d      	ldr	r3, [pc, #52]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20006010:	689b      	ldr	r3, [r3, #8]
20006012:	4a0c      	ldr	r2, [pc, #48]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20006014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20006018:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
2000601a:	687b      	ldr	r3, [r7, #4]
2000601c:	685b      	ldr	r3, [r3, #4]
2000601e:	f003 0302 	and.w	r3, r3, #2
20006022:	2b00      	cmp	r3, #0
20006024:	d005      	beq.n	20006032 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
20006026:	4b07      	ldr	r3, [pc, #28]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
20006028:	68db      	ldr	r3, [r3, #12]
2000602a:	4a06      	ldr	r2, [pc, #24]	@ (20006044 <HAL_PWR_ConfigPVD+0xbc>)
2000602c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20006030:	60d3      	str	r3, [r2, #12]
  }
}
20006032:	bf00      	nop
20006034:	370c      	adds	r7, #12
20006036:	46bd      	mov	sp, r7
20006038:	f85d 7b04 	ldr.w	r7, [sp], #4
2000603c:	4770      	bx	lr
2000603e:	bf00      	nop
20006040:	40007000 	.word	0x40007000
20006044:	40013c00 	.word	0x40013c00

20006048 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
20006048:	b480      	push	{r7}
2000604a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
2000604c:	4b03      	ldr	r3, [pc, #12]	@ (2000605c <HAL_PWR_EnablePVD+0x14>)
2000604e:	2201      	movs	r2, #1
20006050:	601a      	str	r2, [r3, #0]
}
20006052:	bf00      	nop
20006054:	46bd      	mov	sp, r7
20006056:	f85d 7b04 	ldr.w	r7, [sp], #4
2000605a:	4770      	bx	lr
2000605c:	420e0010 	.word	0x420e0010

20006060 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
20006060:	b480      	push	{r7}
20006062:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
20006064:	4b03      	ldr	r3, [pc, #12]	@ (20006074 <HAL_PWR_DisablePVD+0x14>)
20006066:	2200      	movs	r2, #0
20006068:	601a      	str	r2, [r3, #0]
}
2000606a:	bf00      	nop
2000606c:	46bd      	mov	sp, r7
2000606e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006072:	4770      	bx	lr
20006074:	420e0010 	.word	0x420e0010

20006078 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
20006078:	b480      	push	{r7}
2000607a:	b083      	sub	sp, #12
2000607c:	af00      	add	r7, sp, #0
2000607e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
20006080:	4b05      	ldr	r3, [pc, #20]	@ (20006098 <HAL_PWR_EnableWakeUpPin+0x20>)
20006082:	685a      	ldr	r2, [r3, #4]
20006084:	4904      	ldr	r1, [pc, #16]	@ (20006098 <HAL_PWR_EnableWakeUpPin+0x20>)
20006086:	687b      	ldr	r3, [r7, #4]
20006088:	4313      	orrs	r3, r2
2000608a:	604b      	str	r3, [r1, #4]
}
2000608c:	bf00      	nop
2000608e:	370c      	adds	r7, #12
20006090:	46bd      	mov	sp, r7
20006092:	f85d 7b04 	ldr.w	r7, [sp], #4
20006096:	4770      	bx	lr
20006098:	40007000 	.word	0x40007000

2000609c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
2000609c:	b480      	push	{r7}
2000609e:	b083      	sub	sp, #12
200060a0:	af00      	add	r7, sp, #0
200060a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
200060a4:	4b06      	ldr	r3, [pc, #24]	@ (200060c0 <HAL_PWR_DisableWakeUpPin+0x24>)
200060a6:	685a      	ldr	r2, [r3, #4]
200060a8:	687b      	ldr	r3, [r7, #4]
200060aa:	43db      	mvns	r3, r3
200060ac:	4904      	ldr	r1, [pc, #16]	@ (200060c0 <HAL_PWR_DisableWakeUpPin+0x24>)
200060ae:	4013      	ands	r3, r2
200060b0:	604b      	str	r3, [r1, #4]
}
200060b2:	bf00      	nop
200060b4:	370c      	adds	r7, #12
200060b6:	46bd      	mov	sp, r7
200060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200060bc:	4770      	bx	lr
200060be:	bf00      	nop
200060c0:	40007000 	.word	0x40007000

200060c4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
200060c4:	b480      	push	{r7}
200060c6:	b083      	sub	sp, #12
200060c8:	af00      	add	r7, sp, #0
200060ca:	6078      	str	r0, [r7, #4]
200060cc:	460b      	mov	r3, r1
200060ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
200060d0:	4b0b      	ldr	r3, [pc, #44]	@ (20006100 <HAL_PWR_EnterSLEEPMode+0x3c>)
200060d2:	691b      	ldr	r3, [r3, #16]
200060d4:	4a0a      	ldr	r2, [pc, #40]	@ (20006100 <HAL_PWR_EnterSLEEPMode+0x3c>)
200060d6:	f023 0304 	bic.w	r3, r3, #4
200060da:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
200060dc:	78fb      	ldrb	r3, [r7, #3]
200060de:	2b01      	cmp	r3, #1
200060e0:	d101      	bne.n	200060e6 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
200060e2:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
200060e4:	e005      	b.n	200060f2 <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
200060e6:	78fb      	ldrb	r3, [r7, #3]
200060e8:	2b03      	cmp	r3, #3
200060ea:	d001      	beq.n	200060f0 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
200060ec:	bf40      	sev
      __WFE();
200060ee:	bf20      	wfe
    __WFE();
200060f0:	bf20      	wfe
}
200060f2:	bf00      	nop
200060f4:	370c      	adds	r7, #12
200060f6:	46bd      	mov	sp, r7
200060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
200060fc:	4770      	bx	lr
200060fe:	bf00      	nop
20006100:	e000ed00 	.word	0xe000ed00

20006104 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
20006104:	b480      	push	{r7}
20006106:	b083      	sub	sp, #12
20006108:	af00      	add	r7, sp, #0
2000610a:	6078      	str	r0, [r7, #4]
2000610c:	460b      	mov	r3, r1
2000610e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
20006110:	4b12      	ldr	r3, [pc, #72]	@ (2000615c <HAL_PWR_EnterSTOPMode+0x58>)
20006112:	681b      	ldr	r3, [r3, #0]
20006114:	f023 0203 	bic.w	r2, r3, #3
20006118:	4910      	ldr	r1, [pc, #64]	@ (2000615c <HAL_PWR_EnterSTOPMode+0x58>)
2000611a:	687b      	ldr	r3, [r7, #4]
2000611c:	4313      	orrs	r3, r2
2000611e:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
20006120:	4b0f      	ldr	r3, [pc, #60]	@ (20006160 <HAL_PWR_EnterSTOPMode+0x5c>)
20006122:	691b      	ldr	r3, [r3, #16]
20006124:	4a0e      	ldr	r2, [pc, #56]	@ (20006160 <HAL_PWR_EnterSTOPMode+0x5c>)
20006126:	f043 0304 	orr.w	r3, r3, #4
2000612a:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
2000612c:	78fb      	ldrb	r3, [r7, #3]
2000612e:	2b01      	cmp	r3, #1
20006130:	d101      	bne.n	20006136 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
20006132:	bf30      	wfi
20006134:	e005      	b.n	20006142 <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
20006136:	78fb      	ldrb	r3, [r7, #3]
20006138:	2b03      	cmp	r3, #3
2000613a:	d001      	beq.n	20006140 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
2000613c:	bf40      	sev
      __WFE();
2000613e:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
20006140:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
20006142:	4b07      	ldr	r3, [pc, #28]	@ (20006160 <HAL_PWR_EnterSTOPMode+0x5c>)
20006144:	691b      	ldr	r3, [r3, #16]
20006146:	4a06      	ldr	r2, [pc, #24]	@ (20006160 <HAL_PWR_EnterSTOPMode+0x5c>)
20006148:	f023 0304 	bic.w	r3, r3, #4
2000614c:	6113      	str	r3, [r2, #16]
}
2000614e:	bf00      	nop
20006150:	370c      	adds	r7, #12
20006152:	46bd      	mov	sp, r7
20006154:	f85d 7b04 	ldr.w	r7, [sp], #4
20006158:	4770      	bx	lr
2000615a:	bf00      	nop
2000615c:	40007000 	.word	0x40007000
20006160:	e000ed00 	.word	0xe000ed00

20006164 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
20006164:	b480      	push	{r7}
20006166:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
20006168:	4b08      	ldr	r3, [pc, #32]	@ (2000618c <HAL_PWR_EnterSTANDBYMode+0x28>)
2000616a:	681b      	ldr	r3, [r3, #0]
2000616c:	4a07      	ldr	r2, [pc, #28]	@ (2000618c <HAL_PWR_EnterSTANDBYMode+0x28>)
2000616e:	f043 0302 	orr.w	r3, r3, #2
20006172:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
20006174:	4b06      	ldr	r3, [pc, #24]	@ (20006190 <HAL_PWR_EnterSTANDBYMode+0x2c>)
20006176:	691b      	ldr	r3, [r3, #16]
20006178:	4a05      	ldr	r2, [pc, #20]	@ (20006190 <HAL_PWR_EnterSTANDBYMode+0x2c>)
2000617a:	f043 0304 	orr.w	r3, r3, #4
2000617e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
20006180:	bf30      	wfi
}
20006182:	bf00      	nop
20006184:	46bd      	mov	sp, r7
20006186:	f85d 7b04 	ldr.w	r7, [sp], #4
2000618a:	4770      	bx	lr
2000618c:	40007000 	.word	0x40007000
20006190:	e000ed00 	.word	0xe000ed00

20006194 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
20006194:	b580      	push	{r7, lr}
20006196:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
20006198:	4b06      	ldr	r3, [pc, #24]	@ (200061b4 <HAL_PWR_PVD_IRQHandler+0x20>)
2000619a:	695b      	ldr	r3, [r3, #20]
2000619c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
200061a0:	2b00      	cmp	r3, #0
200061a2:	d005      	beq.n	200061b0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
200061a4:	f000 f808 	bl	200061b8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
200061a8:	4b02      	ldr	r3, [pc, #8]	@ (200061b4 <HAL_PWR_PVD_IRQHandler+0x20>)
200061aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
200061ae:	615a      	str	r2, [r3, #20]
  }
}
200061b0:	bf00      	nop
200061b2:	bd80      	pop	{r7, pc}
200061b4:	40013c00 	.word	0x40013c00

200061b8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
200061b8:	b480      	push	{r7}
200061ba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
200061bc:	bf00      	nop
200061be:	46bd      	mov	sp, r7
200061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200061c4:	4770      	bx	lr
	...

200061c8 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
200061c8:	b480      	push	{r7}
200061ca:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
200061cc:	4b05      	ldr	r3, [pc, #20]	@ (200061e4 <HAL_PWR_EnableSleepOnExit+0x1c>)
200061ce:	691b      	ldr	r3, [r3, #16]
200061d0:	4a04      	ldr	r2, [pc, #16]	@ (200061e4 <HAL_PWR_EnableSleepOnExit+0x1c>)
200061d2:	f043 0302 	orr.w	r3, r3, #2
200061d6:	6113      	str	r3, [r2, #16]
}
200061d8:	bf00      	nop
200061da:	46bd      	mov	sp, r7
200061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200061e0:	4770      	bx	lr
200061e2:	bf00      	nop
200061e4:	e000ed00 	.word	0xe000ed00

200061e8 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
200061e8:	b480      	push	{r7}
200061ea:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
200061ec:	4b05      	ldr	r3, [pc, #20]	@ (20006204 <HAL_PWR_DisableSleepOnExit+0x1c>)
200061ee:	691b      	ldr	r3, [r3, #16]
200061f0:	4a04      	ldr	r2, [pc, #16]	@ (20006204 <HAL_PWR_DisableSleepOnExit+0x1c>)
200061f2:	f023 0302 	bic.w	r3, r3, #2
200061f6:	6113      	str	r3, [r2, #16]
}
200061f8:	bf00      	nop
200061fa:	46bd      	mov	sp, r7
200061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20006200:	4770      	bx	lr
20006202:	bf00      	nop
20006204:	e000ed00 	.word	0xe000ed00

20006208 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
20006208:	b480      	push	{r7}
2000620a:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
2000620c:	4b05      	ldr	r3, [pc, #20]	@ (20006224 <HAL_PWR_EnableSEVOnPend+0x1c>)
2000620e:	691b      	ldr	r3, [r3, #16]
20006210:	4a04      	ldr	r2, [pc, #16]	@ (20006224 <HAL_PWR_EnableSEVOnPend+0x1c>)
20006212:	f043 0310 	orr.w	r3, r3, #16
20006216:	6113      	str	r3, [r2, #16]
}
20006218:	bf00      	nop
2000621a:	46bd      	mov	sp, r7
2000621c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006220:	4770      	bx	lr
20006222:	bf00      	nop
20006224:	e000ed00 	.word	0xe000ed00

20006228 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
20006228:	b480      	push	{r7}
2000622a:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
2000622c:	4b05      	ldr	r3, [pc, #20]	@ (20006244 <HAL_PWR_DisableSEVOnPend+0x1c>)
2000622e:	691b      	ldr	r3, [r3, #16]
20006230:	4a04      	ldr	r2, [pc, #16]	@ (20006244 <HAL_PWR_DisableSEVOnPend+0x1c>)
20006232:	f023 0310 	bic.w	r3, r3, #16
20006236:	6113      	str	r3, [r2, #16]
}
20006238:	bf00      	nop
2000623a:	46bd      	mov	sp, r7
2000623c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006240:	4770      	bx	lr
20006242:	bf00      	nop
20006244:	e000ed00 	.word	0xe000ed00

20006248 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
20006248:	b580      	push	{r7, lr}
2000624a:	b082      	sub	sp, #8
2000624c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
2000624e:	2300      	movs	r3, #0
20006250:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
20006252:	4b0e      	ldr	r3, [pc, #56]	@ (2000628c <HAL_PWREx_EnableBkUpReg+0x44>)
20006254:	2201      	movs	r2, #1
20006256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20006258:	f7fa fbdd 	bl	20000a16 <HAL_GetTick>
2000625c:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
2000625e:	e009      	b.n	20006274 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
20006260:	f7fa fbd9 	bl	20000a16 <HAL_GetTick>
20006264:	4602      	mov	r2, r0
20006266:	687b      	ldr	r3, [r7, #4]
20006268:	1ad3      	subs	r3, r2, r3
2000626a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
2000626e:	d901      	bls.n	20006274 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
20006270:	2303      	movs	r3, #3
20006272:	e006      	b.n	20006282 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
20006274:	4b06      	ldr	r3, [pc, #24]	@ (20006290 <HAL_PWREx_EnableBkUpReg+0x48>)
20006276:	685b      	ldr	r3, [r3, #4]
20006278:	f003 0308 	and.w	r3, r3, #8
2000627c:	2b08      	cmp	r3, #8
2000627e:	d1ef      	bne.n	20006260 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
20006280:	2300      	movs	r3, #0
}
20006282:	4618      	mov	r0, r3
20006284:	3708      	adds	r7, #8
20006286:	46bd      	mov	sp, r7
20006288:	bd80      	pop	{r7, pc}
2000628a:	bf00      	nop
2000628c:	420e00a4 	.word	0x420e00a4
20006290:	40007000 	.word	0x40007000

20006294 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
20006294:	b580      	push	{r7, lr}
20006296:	b082      	sub	sp, #8
20006298:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
2000629a:	2300      	movs	r3, #0
2000629c:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
2000629e:	4b0e      	ldr	r3, [pc, #56]	@ (200062d8 <HAL_PWREx_DisableBkUpReg+0x44>)
200062a0:	2200      	movs	r2, #0
200062a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200062a4:	f7fa fbb7 	bl	20000a16 <HAL_GetTick>
200062a8:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
200062aa:	e009      	b.n	200062c0 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
200062ac:	f7fa fbb3 	bl	20000a16 <HAL_GetTick>
200062b0:	4602      	mov	r2, r0
200062b2:	687b      	ldr	r3, [r7, #4]
200062b4:	1ad3      	subs	r3, r2, r3
200062b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
200062ba:	d901      	bls.n	200062c0 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
200062bc:	2303      	movs	r3, #3
200062be:	e006      	b.n	200062ce <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
200062c0:	4b06      	ldr	r3, [pc, #24]	@ (200062dc <HAL_PWREx_DisableBkUpReg+0x48>)
200062c2:	685b      	ldr	r3, [r3, #4]
200062c4:	f003 0308 	and.w	r3, r3, #8
200062c8:	2b08      	cmp	r3, #8
200062ca:	d0ef      	beq.n	200062ac <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
200062cc:	2300      	movs	r3, #0
}
200062ce:	4618      	mov	r0, r3
200062d0:	3708      	adds	r7, #8
200062d2:	46bd      	mov	sp, r7
200062d4:	bd80      	pop	{r7, pc}
200062d6:	bf00      	nop
200062d8:	420e00a4 	.word	0x420e00a4
200062dc:	40007000 	.word	0x40007000

200062e0 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
200062e0:	b480      	push	{r7}
200062e2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
200062e4:	4b03      	ldr	r3, [pc, #12]	@ (200062f4 <HAL_PWREx_EnableFlashPowerDown+0x14>)
200062e6:	2201      	movs	r2, #1
200062e8:	601a      	str	r2, [r3, #0]
}
200062ea:	bf00      	nop
200062ec:	46bd      	mov	sp, r7
200062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200062f2:	4770      	bx	lr
200062f4:	420e0024 	.word	0x420e0024

200062f8 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
200062f8:	b480      	push	{r7}
200062fa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
200062fc:	4b03      	ldr	r3, [pc, #12]	@ (2000630c <HAL_PWREx_DisableFlashPowerDown+0x14>)
200062fe:	2200      	movs	r2, #0
20006300:	601a      	str	r2, [r3, #0]
}
20006302:	bf00      	nop
20006304:	46bd      	mov	sp, r7
20006306:	f85d 7b04 	ldr.w	r7, [sp], #4
2000630a:	4770      	bx	lr
2000630c:	420e0024 	.word	0x420e0024

20006310 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
20006310:	b480      	push	{r7}
20006312:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
20006314:	4b04      	ldr	r3, [pc, #16]	@ (20006328 <HAL_PWREx_GetVoltageRange+0x18>)
20006316:	681b      	ldr	r3, [r3, #0]
20006318:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
2000631c:	4618      	mov	r0, r3
2000631e:	46bd      	mov	sp, r7
20006320:	f85d 7b04 	ldr.w	r7, [sp], #4
20006324:	4770      	bx	lr
20006326:	bf00      	nop
20006328:	40007000 	.word	0x40007000

2000632c <HAL_PWREx_ControlVoltageScaling>:
  * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 1 or 2.
  * @note The new voltage scale is active only when the PLL is ON.  
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
2000632c:	b580      	push	{r7, lr}
2000632e:	b086      	sub	sp, #24
20006330:	af00      	add	r7, sp, #0
20006332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20006334:	2300      	movs	r3, #0
20006336:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
20006338:	2300      	movs	r3, #0
2000633a:	613b      	str	r3, [r7, #16]
2000633c:	4b35      	ldr	r3, [pc, #212]	@ (20006414 <HAL_PWREx_ControlVoltageScaling+0xe8>)
2000633e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20006340:	4a34      	ldr	r2, [pc, #208]	@ (20006414 <HAL_PWREx_ControlVoltageScaling+0xe8>)
20006342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20006346:	6413      	str	r3, [r2, #64]	@ 0x40
20006348:	4b32      	ldr	r3, [pc, #200]	@ (20006414 <HAL_PWREx_ControlVoltageScaling+0xe8>)
2000634a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000634c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20006350:	613b      	str	r3, [r7, #16]
20006352:	693b      	ldr	r3, [r7, #16]
  
  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20006354:	4b2f      	ldr	r3, [pc, #188]	@ (20006414 <HAL_PWREx_ControlVoltageScaling+0xe8>)
20006356:	689b      	ldr	r3, [r3, #8]
20006358:	f003 030c 	and.w	r3, r3, #12
2000635c:	2b08      	cmp	r3, #8
2000635e:	d051      	beq.n	20006404 <HAL_PWREx_ControlVoltageScaling+0xd8>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
20006360:	4b2d      	ldr	r3, [pc, #180]	@ (20006418 <HAL_PWREx_ControlVoltageScaling+0xec>)
20006362:	2200      	movs	r2, #0
20006364:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
20006366:	f7fa fb56 	bl	20000a16 <HAL_GetTick>
2000636a:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000636c:	e008      	b.n	20006380 <HAL_PWREx_ControlVoltageScaling+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000636e:	f7fa fb52 	bl	20000a16 <HAL_GetTick>
20006372:	4602      	mov	r2, r0
20006374:	697b      	ldr	r3, [r7, #20]
20006376:	1ad3      	subs	r3, r2, r3
20006378:	2b02      	cmp	r3, #2
2000637a:	d901      	bls.n	20006380 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        return HAL_TIMEOUT;
2000637c:	2303      	movs	r3, #3
2000637e:	e044      	b.n	2000640a <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006380:	4b24      	ldr	r3, [pc, #144]	@ (20006414 <HAL_PWREx_ControlVoltageScaling+0xe8>)
20006382:	681b      	ldr	r3, [r3, #0]
20006384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20006388:	2b00      	cmp	r3, #0
2000638a:	d1f0      	bne.n	2000636e <HAL_PWREx_ControlVoltageScaling+0x42>
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
2000638c:	2300      	movs	r3, #0
2000638e:	60fb      	str	r3, [r7, #12]
20006390:	4b22      	ldr	r3, [pc, #136]	@ (2000641c <HAL_PWREx_ControlVoltageScaling+0xf0>)
20006392:	681b      	ldr	r3, [r3, #0]
20006394:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
20006398:	4920      	ldr	r1, [pc, #128]	@ (2000641c <HAL_PWREx_ControlVoltageScaling+0xf0>)
2000639a:	687b      	ldr	r3, [r7, #4]
2000639c:	4313      	orrs	r3, r2
2000639e:	600b      	str	r3, [r1, #0]
200063a0:	4b1e      	ldr	r3, [pc, #120]	@ (2000641c <HAL_PWREx_ControlVoltageScaling+0xf0>)
200063a2:	681b      	ldr	r3, [r3, #0]
200063a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
200063a8:	60fb      	str	r3, [r7, #12]
200063aa:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
200063ac:	4b1a      	ldr	r3, [pc, #104]	@ (20006418 <HAL_PWREx_ControlVoltageScaling+0xec>)
200063ae:	2201      	movs	r2, #1
200063b0:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
200063b2:	f7fa fb30 	bl	20000a16 <HAL_GetTick>
200063b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200063b8:	e008      	b.n	200063cc <HAL_PWREx_ControlVoltageScaling+0xa0>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200063ba:	f7fa fb2c 	bl	20000a16 <HAL_GetTick>
200063be:	4602      	mov	r2, r0
200063c0:	697b      	ldr	r3, [r7, #20]
200063c2:	1ad3      	subs	r3, r2, r3
200063c4:	2b02      	cmp	r3, #2
200063c6:	d901      	bls.n	200063cc <HAL_PWREx_ControlVoltageScaling+0xa0>
      {
        return HAL_TIMEOUT;
200063c8:	2303      	movs	r3, #3
200063ca:	e01e      	b.n	2000640a <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200063cc:	4b11      	ldr	r3, [pc, #68]	@ (20006414 <HAL_PWREx_ControlVoltageScaling+0xe8>)
200063ce:	681b      	ldr	r3, [r3, #0]
200063d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200063d4:	2b00      	cmp	r3, #0
200063d6:	d0f0      	beq.n	200063ba <HAL_PWREx_ControlVoltageScaling+0x8e>
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
200063d8:	f7fa fb1d 	bl	20000a16 <HAL_GetTick>
200063dc:	6178      	str	r0, [r7, #20]
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
200063de:	e009      	b.n	200063f4 <HAL_PWREx_ControlVoltageScaling+0xc8>
    {
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
200063e0:	f7fa fb19 	bl	20000a16 <HAL_GetTick>
200063e4:	4602      	mov	r2, r0
200063e6:	697b      	ldr	r3, [r7, #20]
200063e8:	1ad3      	subs	r3, r2, r3
200063ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
200063ee:	d901      	bls.n	200063f4 <HAL_PWREx_ControlVoltageScaling+0xc8>
      {
        return HAL_TIMEOUT;
200063f0:	2303      	movs	r3, #3
200063f2:	e00a      	b.n	2000640a <HAL_PWREx_ControlVoltageScaling+0xde>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
200063f4:	4b09      	ldr	r3, [pc, #36]	@ (2000641c <HAL_PWREx_ControlVoltageScaling+0xf0>)
200063f6:	685b      	ldr	r3, [r3, #4]
200063f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
200063fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
20006400:	d1ee      	bne.n	200063e0 <HAL_PWREx_ControlVoltageScaling+0xb4>
20006402:	e001      	b.n	20006408 <HAL_PWREx_ControlVoltageScaling+0xdc>
      } 
    }
  }
  else
  {
    return HAL_ERROR;
20006404:	2301      	movs	r3, #1
20006406:	e000      	b.n	2000640a <HAL_PWREx_ControlVoltageScaling+0xde>
  }

  return HAL_OK;
20006408:	2300      	movs	r3, #0
}
2000640a:	4618      	mov	r0, r3
2000640c:	3718      	adds	r7, #24
2000640e:	46bd      	mov	sp, r7
20006410:	bd80      	pop	{r7, pc}
20006412:	bf00      	nop
20006414:	40023800 	.word	0x40023800
20006418:	42470060 	.word	0x42470060
2000641c:	40007000 	.word	0x40007000

20006420 <HAL_PWREx_EnableMainRegulatorLowVoltage>:
  * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412Zx/STM32F412Rx/STM32F412Vx/STM32F412Cx/
  *        STM32F413xx/STM32F423xx devices.   
  * @retval None
  */
void HAL_PWREx_EnableMainRegulatorLowVoltage(void)
{
20006420:	b480      	push	{r7}
20006422:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)ENABLE;
20006424:	4b03      	ldr	r3, [pc, #12]	@ (20006434 <HAL_PWREx_EnableMainRegulatorLowVoltage+0x14>)
20006426:	2201      	movs	r2, #1
20006428:	601a      	str	r2, [r3, #0]
}
2000642a:	bf00      	nop
2000642c:	46bd      	mov	sp, r7
2000642e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006432:	4770      	bx	lr
20006434:	420e002c 	.word	0x420e002c

20006438 <HAL_PWREx_DisableMainRegulatorLowVoltage>:
  * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412Zx/STM32F412Rx/STM32F412Vx/STM32F412Cx/
  *        STM32F413xx/STM32F423xxdevices. 
  * @retval None
  */
void HAL_PWREx_DisableMainRegulatorLowVoltage(void)
{
20006438:	b480      	push	{r7}
2000643a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)DISABLE;
2000643c:	4b03      	ldr	r3, [pc, #12]	@ (2000644c <HAL_PWREx_DisableMainRegulatorLowVoltage+0x14>)
2000643e:	2200      	movs	r2, #0
20006440:	601a      	str	r2, [r3, #0]
}
20006442:	bf00      	nop
20006444:	46bd      	mov	sp, r7
20006446:	f85d 7b04 	ldr.w	r7, [sp], #4
2000644a:	4770      	bx	lr
2000644c:	420e002c 	.word	0x420e002c

20006450 <HAL_PWREx_EnableLowRegulatorLowVoltage>:
  * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412Zx/STM32F412Rx/STM32F412Vx/STM32F412Cx/
  *        STM32F413xx/STM32F423xx devices.   
  * @retval None
  */
void HAL_PWREx_EnableLowRegulatorLowVoltage(void)
{
20006450:	b480      	push	{r7}
20006452:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)ENABLE;
20006454:	4b03      	ldr	r3, [pc, #12]	@ (20006464 <HAL_PWREx_EnableLowRegulatorLowVoltage+0x14>)
20006456:	2201      	movs	r2, #1
20006458:	601a      	str	r2, [r3, #0]
}
2000645a:	bf00      	nop
2000645c:	46bd      	mov	sp, r7
2000645e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006462:	4770      	bx	lr
20006464:	420e0028 	.word	0x420e0028

20006468 <HAL_PWREx_DisableLowRegulatorLowVoltage>:
  * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412Zx/STM32F412Rx/STM32F412Vx/STM32F412Cx/
  *        STM32F413xx/STM32F423xx  devices.   
  * @retval None
  */
void HAL_PWREx_DisableLowRegulatorLowVoltage(void)
{
20006468:	b480      	push	{r7}
2000646a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)DISABLE;
2000646c:	4b03      	ldr	r3, [pc, #12]	@ (2000647c <HAL_PWREx_DisableLowRegulatorLowVoltage+0x14>)
2000646e:	2200      	movs	r2, #0
20006470:	601a      	str	r2, [r3, #0]
}
20006472:	bf00      	nop
20006474:	46bd      	mov	sp, r7
20006476:	f85d 7b04 	ldr.w	r7, [sp], #4
2000647a:	4770      	bx	lr
2000647c:	420e0028 	.word	0x420e0028
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
20006480:	b480      	push	{r7}
20006482:	af00      	add	r7, sp, #0
  return HAL_OK;
20006484:	2300      	movs	r3, #0
}
20006486:	4618      	mov	r0, r3
20006488:	46bd      	mov	sp, r7
2000648a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000648e:	4770      	bx	lr

20006490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20006490:	b580      	push	{r7, lr}
20006492:	b086      	sub	sp, #24
20006494:	af00      	add	r7, sp, #0
20006496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
20006498:	687b      	ldr	r3, [r7, #4]
2000649a:	2b00      	cmp	r3, #0
2000649c:	d101      	bne.n	200064a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
2000649e:	2301      	movs	r3, #1
200064a0:	e267      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
200064a2:	687b      	ldr	r3, [r7, #4]
200064a4:	681b      	ldr	r3, [r3, #0]
200064a6:	f003 0301 	and.w	r3, r3, #1
200064aa:	2b00      	cmp	r3, #0
200064ac:	d075      	beq.n	2000659a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
200064ae:	4b88      	ldr	r3, [pc, #544]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200064b0:	689b      	ldr	r3, [r3, #8]
200064b2:	f003 030c 	and.w	r3, r3, #12
200064b6:	2b04      	cmp	r3, #4
200064b8:	d00c      	beq.n	200064d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200064ba:	4b85      	ldr	r3, [pc, #532]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200064bc:	689b      	ldr	r3, [r3, #8]
200064be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
200064c2:	2b08      	cmp	r3, #8
200064c4:	d112      	bne.n	200064ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
200064c6:	4b82      	ldr	r3, [pc, #520]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200064c8:	685b      	ldr	r3, [r3, #4]
200064ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200064ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
200064d2:	d10b      	bne.n	200064ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
200064d4:	4b7e      	ldr	r3, [pc, #504]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200064d6:	681b      	ldr	r3, [r3, #0]
200064d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200064dc:	2b00      	cmp	r3, #0
200064de:	d05b      	beq.n	20006598 <HAL_RCC_OscConfig+0x108>
200064e0:	687b      	ldr	r3, [r7, #4]
200064e2:	685b      	ldr	r3, [r3, #4]
200064e4:	2b00      	cmp	r3, #0
200064e6:	d157      	bne.n	20006598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
200064e8:	2301      	movs	r3, #1
200064ea:	e242      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
200064ec:	687b      	ldr	r3, [r7, #4]
200064ee:	685b      	ldr	r3, [r3, #4]
200064f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
200064f4:	d106      	bne.n	20006504 <HAL_RCC_OscConfig+0x74>
200064f6:	4b76      	ldr	r3, [pc, #472]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200064f8:	681b      	ldr	r3, [r3, #0]
200064fa:	4a75      	ldr	r2, [pc, #468]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200064fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20006500:	6013      	str	r3, [r2, #0]
20006502:	e01d      	b.n	20006540 <HAL_RCC_OscConfig+0xb0>
20006504:	687b      	ldr	r3, [r7, #4]
20006506:	685b      	ldr	r3, [r3, #4]
20006508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
2000650c:	d10c      	bne.n	20006528 <HAL_RCC_OscConfig+0x98>
2000650e:	4b70      	ldr	r3, [pc, #448]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
20006510:	681b      	ldr	r3, [r3, #0]
20006512:	4a6f      	ldr	r2, [pc, #444]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
20006514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
20006518:	6013      	str	r3, [r2, #0]
2000651a:	4b6d      	ldr	r3, [pc, #436]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
2000651c:	681b      	ldr	r3, [r3, #0]
2000651e:	4a6c      	ldr	r2, [pc, #432]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
20006520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
20006524:	6013      	str	r3, [r2, #0]
20006526:	e00b      	b.n	20006540 <HAL_RCC_OscConfig+0xb0>
20006528:	4b69      	ldr	r3, [pc, #420]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
2000652a:	681b      	ldr	r3, [r3, #0]
2000652c:	4a68      	ldr	r2, [pc, #416]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
2000652e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
20006532:	6013      	str	r3, [r2, #0]
20006534:	4b66      	ldr	r3, [pc, #408]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
20006536:	681b      	ldr	r3, [r3, #0]
20006538:	4a65      	ldr	r2, [pc, #404]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
2000653a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
2000653e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20006540:	687b      	ldr	r3, [r7, #4]
20006542:	685b      	ldr	r3, [r3, #4]
20006544:	2b00      	cmp	r3, #0
20006546:	d013      	beq.n	20006570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20006548:	f7fa fa65 	bl	20000a16 <HAL_GetTick>
2000654c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000654e:	e008      	b.n	20006562 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20006550:	f7fa fa61 	bl	20000a16 <HAL_GetTick>
20006554:	4602      	mov	r2, r0
20006556:	693b      	ldr	r3, [r7, #16]
20006558:	1ad3      	subs	r3, r2, r3
2000655a:	2b64      	cmp	r3, #100	@ 0x64
2000655c:	d901      	bls.n	20006562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
2000655e:	2303      	movs	r3, #3
20006560:	e207      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20006562:	4b5b      	ldr	r3, [pc, #364]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
20006564:	681b      	ldr	r3, [r3, #0]
20006566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2000656a:	2b00      	cmp	r3, #0
2000656c:	d0f0      	beq.n	20006550 <HAL_RCC_OscConfig+0xc0>
2000656e:	e014      	b.n	2000659a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20006570:	f7fa fa51 	bl	20000a16 <HAL_GetTick>
20006574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20006576:	e008      	b.n	2000658a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20006578:	f7fa fa4d 	bl	20000a16 <HAL_GetTick>
2000657c:	4602      	mov	r2, r0
2000657e:	693b      	ldr	r3, [r7, #16]
20006580:	1ad3      	subs	r3, r2, r3
20006582:	2b64      	cmp	r3, #100	@ 0x64
20006584:	d901      	bls.n	2000658a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
20006586:	2303      	movs	r3, #3
20006588:	e1f3      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000658a:	4b51      	ldr	r3, [pc, #324]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
2000658c:	681b      	ldr	r3, [r3, #0]
2000658e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20006592:	2b00      	cmp	r3, #0
20006594:	d1f0      	bne.n	20006578 <HAL_RCC_OscConfig+0xe8>
20006596:	e000      	b.n	2000659a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20006598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000659a:	687b      	ldr	r3, [r7, #4]
2000659c:	681b      	ldr	r3, [r3, #0]
2000659e:	f003 0302 	and.w	r3, r3, #2
200065a2:	2b00      	cmp	r3, #0
200065a4:	d063      	beq.n	2000666e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
200065a6:	4b4a      	ldr	r3, [pc, #296]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200065a8:	689b      	ldr	r3, [r3, #8]
200065aa:	f003 030c 	and.w	r3, r3, #12
200065ae:	2b00      	cmp	r3, #0
200065b0:	d00b      	beq.n	200065ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200065b2:	4b47      	ldr	r3, [pc, #284]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200065b4:	689b      	ldr	r3, [r3, #8]
200065b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
200065ba:	2b08      	cmp	r3, #8
200065bc:	d11c      	bne.n	200065f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
200065be:	4b44      	ldr	r3, [pc, #272]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200065c0:	685b      	ldr	r3, [r3, #4]
200065c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200065c6:	2b00      	cmp	r3, #0
200065c8:	d116      	bne.n	200065f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200065ca:	4b41      	ldr	r3, [pc, #260]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200065cc:	681b      	ldr	r3, [r3, #0]
200065ce:	f003 0302 	and.w	r3, r3, #2
200065d2:	2b00      	cmp	r3, #0
200065d4:	d005      	beq.n	200065e2 <HAL_RCC_OscConfig+0x152>
200065d6:	687b      	ldr	r3, [r7, #4]
200065d8:	68db      	ldr	r3, [r3, #12]
200065da:	2b01      	cmp	r3, #1
200065dc:	d001      	beq.n	200065e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
200065de:	2301      	movs	r3, #1
200065e0:	e1c7      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200065e2:	4b3b      	ldr	r3, [pc, #236]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200065e4:	681b      	ldr	r3, [r3, #0]
200065e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
200065ea:	687b      	ldr	r3, [r7, #4]
200065ec:	691b      	ldr	r3, [r3, #16]
200065ee:	00db      	lsls	r3, r3, #3
200065f0:	4937      	ldr	r1, [pc, #220]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200065f2:	4313      	orrs	r3, r2
200065f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
200065f6:	e03a      	b.n	2000666e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
200065f8:	687b      	ldr	r3, [r7, #4]
200065fa:	68db      	ldr	r3, [r3, #12]
200065fc:	2b00      	cmp	r3, #0
200065fe:	d020      	beq.n	20006642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20006600:	4b34      	ldr	r3, [pc, #208]	@ (200066d4 <HAL_RCC_OscConfig+0x244>)
20006602:	2201      	movs	r2, #1
20006604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006606:	f7fa fa06 	bl	20000a16 <HAL_GetTick>
2000660a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000660c:	e008      	b.n	20006620 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2000660e:	f7fa fa02 	bl	20000a16 <HAL_GetTick>
20006612:	4602      	mov	r2, r0
20006614:	693b      	ldr	r3, [r7, #16]
20006616:	1ad3      	subs	r3, r2, r3
20006618:	2b02      	cmp	r3, #2
2000661a:	d901      	bls.n	20006620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
2000661c:	2303      	movs	r3, #3
2000661e:	e1a8      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20006620:	4b2b      	ldr	r3, [pc, #172]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
20006622:	681b      	ldr	r3, [r3, #0]
20006624:	f003 0302 	and.w	r3, r3, #2
20006628:	2b00      	cmp	r3, #0
2000662a:	d0f0      	beq.n	2000660e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000662c:	4b28      	ldr	r3, [pc, #160]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
2000662e:	681b      	ldr	r3, [r3, #0]
20006630:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
20006634:	687b      	ldr	r3, [r7, #4]
20006636:	691b      	ldr	r3, [r3, #16]
20006638:	00db      	lsls	r3, r3, #3
2000663a:	4925      	ldr	r1, [pc, #148]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
2000663c:	4313      	orrs	r3, r2
2000663e:	600b      	str	r3, [r1, #0]
20006640:	e015      	b.n	2000666e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20006642:	4b24      	ldr	r3, [pc, #144]	@ (200066d4 <HAL_RCC_OscConfig+0x244>)
20006644:	2200      	movs	r2, #0
20006646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20006648:	f7fa f9e5 	bl	20000a16 <HAL_GetTick>
2000664c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000664e:	e008      	b.n	20006662 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20006650:	f7fa f9e1 	bl	20000a16 <HAL_GetTick>
20006654:	4602      	mov	r2, r0
20006656:	693b      	ldr	r3, [r7, #16]
20006658:	1ad3      	subs	r3, r2, r3
2000665a:	2b02      	cmp	r3, #2
2000665c:	d901      	bls.n	20006662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
2000665e:	2303      	movs	r3, #3
20006660:	e187      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20006662:	4b1b      	ldr	r3, [pc, #108]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
20006664:	681b      	ldr	r3, [r3, #0]
20006666:	f003 0302 	and.w	r3, r3, #2
2000666a:	2b00      	cmp	r3, #0
2000666c:	d1f0      	bne.n	20006650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000666e:	687b      	ldr	r3, [r7, #4]
20006670:	681b      	ldr	r3, [r3, #0]
20006672:	f003 0308 	and.w	r3, r3, #8
20006676:	2b00      	cmp	r3, #0
20006678:	d036      	beq.n	200066e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
2000667a:	687b      	ldr	r3, [r7, #4]
2000667c:	695b      	ldr	r3, [r3, #20]
2000667e:	2b00      	cmp	r3, #0
20006680:	d016      	beq.n	200066b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
20006682:	4b15      	ldr	r3, [pc, #84]	@ (200066d8 <HAL_RCC_OscConfig+0x248>)
20006684:	2201      	movs	r2, #1
20006686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20006688:	f7fa f9c5 	bl	20000a16 <HAL_GetTick>
2000668c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000668e:	e008      	b.n	200066a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20006690:	f7fa f9c1 	bl	20000a16 <HAL_GetTick>
20006694:	4602      	mov	r2, r0
20006696:	693b      	ldr	r3, [r7, #16]
20006698:	1ad3      	subs	r3, r2, r3
2000669a:	2b02      	cmp	r3, #2
2000669c:	d901      	bls.n	200066a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
2000669e:	2303      	movs	r3, #3
200066a0:	e167      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
200066a2:	4b0b      	ldr	r3, [pc, #44]	@ (200066d0 <HAL_RCC_OscConfig+0x240>)
200066a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
200066a6:	f003 0302 	and.w	r3, r3, #2
200066aa:	2b00      	cmp	r3, #0
200066ac:	d0f0      	beq.n	20006690 <HAL_RCC_OscConfig+0x200>
200066ae:	e01b      	b.n	200066e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
200066b0:	4b09      	ldr	r3, [pc, #36]	@ (200066d8 <HAL_RCC_OscConfig+0x248>)
200066b2:	2200      	movs	r2, #0
200066b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
200066b6:	f7fa f9ae 	bl	20000a16 <HAL_GetTick>
200066ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200066bc:	e00e      	b.n	200066dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
200066be:	f7fa f9aa 	bl	20000a16 <HAL_GetTick>
200066c2:	4602      	mov	r2, r0
200066c4:	693b      	ldr	r3, [r7, #16]
200066c6:	1ad3      	subs	r3, r2, r3
200066c8:	2b02      	cmp	r3, #2
200066ca:	d907      	bls.n	200066dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
200066cc:	2303      	movs	r3, #3
200066ce:	e150      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
200066d0:	40023800 	.word	0x40023800
200066d4:	42470000 	.word	0x42470000
200066d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
200066dc:	4b88      	ldr	r3, [pc, #544]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
200066de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
200066e0:	f003 0302 	and.w	r3, r3, #2
200066e4:	2b00      	cmp	r3, #0
200066e6:	d1ea      	bne.n	200066be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
200066e8:	687b      	ldr	r3, [r7, #4]
200066ea:	681b      	ldr	r3, [r3, #0]
200066ec:	f003 0304 	and.w	r3, r3, #4
200066f0:	2b00      	cmp	r3, #0
200066f2:	f000 8097 	beq.w	20006824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
200066f6:	2300      	movs	r3, #0
200066f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
200066fa:	4b81      	ldr	r3, [pc, #516]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
200066fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200066fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
20006702:	2b00      	cmp	r3, #0
20006704:	d10f      	bne.n	20006726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
20006706:	2300      	movs	r3, #0
20006708:	60bb      	str	r3, [r7, #8]
2000670a:	4b7d      	ldr	r3, [pc, #500]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
2000670c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000670e:	4a7c      	ldr	r2, [pc, #496]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
20006710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
20006714:	6413      	str	r3, [r2, #64]	@ 0x40
20006716:	4b7a      	ldr	r3, [pc, #488]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
20006718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000671a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2000671e:	60bb      	str	r3, [r7, #8]
20006720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20006722:	2301      	movs	r3, #1
20006724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20006726:	4b77      	ldr	r3, [pc, #476]	@ (20006904 <HAL_RCC_OscConfig+0x474>)
20006728:	681b      	ldr	r3, [r3, #0]
2000672a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2000672e:	2b00      	cmp	r3, #0
20006730:	d118      	bne.n	20006764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
20006732:	4b74      	ldr	r3, [pc, #464]	@ (20006904 <HAL_RCC_OscConfig+0x474>)
20006734:	681b      	ldr	r3, [r3, #0]
20006736:	4a73      	ldr	r2, [pc, #460]	@ (20006904 <HAL_RCC_OscConfig+0x474>)
20006738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
2000673c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000673e:	f7fa f96a 	bl	20000a16 <HAL_GetTick>
20006742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20006744:	e008      	b.n	20006758 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20006746:	f7fa f966 	bl	20000a16 <HAL_GetTick>
2000674a:	4602      	mov	r2, r0
2000674c:	693b      	ldr	r3, [r7, #16]
2000674e:	1ad3      	subs	r3, r2, r3
20006750:	2b02      	cmp	r3, #2
20006752:	d901      	bls.n	20006758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
20006754:	2303      	movs	r3, #3
20006756:	e10c      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20006758:	4b6a      	ldr	r3, [pc, #424]	@ (20006904 <HAL_RCC_OscConfig+0x474>)
2000675a:	681b      	ldr	r3, [r3, #0]
2000675c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20006760:	2b00      	cmp	r3, #0
20006762:	d0f0      	beq.n	20006746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20006764:	687b      	ldr	r3, [r7, #4]
20006766:	689b      	ldr	r3, [r3, #8]
20006768:	2b01      	cmp	r3, #1
2000676a:	d106      	bne.n	2000677a <HAL_RCC_OscConfig+0x2ea>
2000676c:	4b64      	ldr	r3, [pc, #400]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
2000676e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006770:	4a63      	ldr	r2, [pc, #396]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
20006772:	f043 0301 	orr.w	r3, r3, #1
20006776:	6713      	str	r3, [r2, #112]	@ 0x70
20006778:	e01c      	b.n	200067b4 <HAL_RCC_OscConfig+0x324>
2000677a:	687b      	ldr	r3, [r7, #4]
2000677c:	689b      	ldr	r3, [r3, #8]
2000677e:	2b05      	cmp	r3, #5
20006780:	d10c      	bne.n	2000679c <HAL_RCC_OscConfig+0x30c>
20006782:	4b5f      	ldr	r3, [pc, #380]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
20006784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006786:	4a5e      	ldr	r2, [pc, #376]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
20006788:	f043 0304 	orr.w	r3, r3, #4
2000678c:	6713      	str	r3, [r2, #112]	@ 0x70
2000678e:	4b5c      	ldr	r3, [pc, #368]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
20006790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006792:	4a5b      	ldr	r2, [pc, #364]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
20006794:	f043 0301 	orr.w	r3, r3, #1
20006798:	6713      	str	r3, [r2, #112]	@ 0x70
2000679a:	e00b      	b.n	200067b4 <HAL_RCC_OscConfig+0x324>
2000679c:	4b58      	ldr	r3, [pc, #352]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
2000679e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200067a0:	4a57      	ldr	r2, [pc, #348]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
200067a2:	f023 0301 	bic.w	r3, r3, #1
200067a6:	6713      	str	r3, [r2, #112]	@ 0x70
200067a8:	4b55      	ldr	r3, [pc, #340]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
200067aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200067ac:	4a54      	ldr	r2, [pc, #336]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
200067ae:	f023 0304 	bic.w	r3, r3, #4
200067b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
200067b4:	687b      	ldr	r3, [r7, #4]
200067b6:	689b      	ldr	r3, [r3, #8]
200067b8:	2b00      	cmp	r3, #0
200067ba:	d015      	beq.n	200067e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200067bc:	f7fa f92b 	bl	20000a16 <HAL_GetTick>
200067c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200067c2:	e00a      	b.n	200067da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
200067c4:	f7fa f927 	bl	20000a16 <HAL_GetTick>
200067c8:	4602      	mov	r2, r0
200067ca:	693b      	ldr	r3, [r7, #16]
200067cc:	1ad3      	subs	r3, r2, r3
200067ce:	f241 3288 	movw	r2, #5000	@ 0x1388
200067d2:	4293      	cmp	r3, r2
200067d4:	d901      	bls.n	200067da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
200067d6:	2303      	movs	r3, #3
200067d8:	e0cb      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200067da:	4b49      	ldr	r3, [pc, #292]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
200067dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200067de:	f003 0302 	and.w	r3, r3, #2
200067e2:	2b00      	cmp	r3, #0
200067e4:	d0ee      	beq.n	200067c4 <HAL_RCC_OscConfig+0x334>
200067e6:	e014      	b.n	20006812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
200067e8:	f7fa f915 	bl	20000a16 <HAL_GetTick>
200067ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
200067ee:	e00a      	b.n	20006806 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
200067f0:	f7fa f911 	bl	20000a16 <HAL_GetTick>
200067f4:	4602      	mov	r2, r0
200067f6:	693b      	ldr	r3, [r7, #16]
200067f8:	1ad3      	subs	r3, r2, r3
200067fa:	f241 3288 	movw	r2, #5000	@ 0x1388
200067fe:	4293      	cmp	r3, r2
20006800:	d901      	bls.n	20006806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
20006802:	2303      	movs	r3, #3
20006804:	e0b5      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20006806:	4b3e      	ldr	r3, [pc, #248]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
20006808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000680a:	f003 0302 	and.w	r3, r3, #2
2000680e:	2b00      	cmp	r3, #0
20006810:	d1ee      	bne.n	200067f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
20006812:	7dfb      	ldrb	r3, [r7, #23]
20006814:	2b01      	cmp	r3, #1
20006816:	d105      	bne.n	20006824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20006818:	4b39      	ldr	r3, [pc, #228]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
2000681a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000681c:	4a38      	ldr	r2, [pc, #224]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
2000681e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
20006822:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20006824:	687b      	ldr	r3, [r7, #4]
20006826:	699b      	ldr	r3, [r3, #24]
20006828:	2b00      	cmp	r3, #0
2000682a:	f000 80a1 	beq.w	20006970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000682e:	4b34      	ldr	r3, [pc, #208]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
20006830:	689b      	ldr	r3, [r3, #8]
20006832:	f003 030c 	and.w	r3, r3, #12
20006836:	2b08      	cmp	r3, #8
20006838:	d05c      	beq.n	200068f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000683a:	687b      	ldr	r3, [r7, #4]
2000683c:	699b      	ldr	r3, [r3, #24]
2000683e:	2b02      	cmp	r3, #2
20006840:	d141      	bne.n	200068c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20006842:	4b31      	ldr	r3, [pc, #196]	@ (20006908 <HAL_RCC_OscConfig+0x478>)
20006844:	2200      	movs	r2, #0
20006846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20006848:	f7fa f8e5 	bl	20000a16 <HAL_GetTick>
2000684c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000684e:	e008      	b.n	20006862 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20006850:	f7fa f8e1 	bl	20000a16 <HAL_GetTick>
20006854:	4602      	mov	r2, r0
20006856:	693b      	ldr	r3, [r7, #16]
20006858:	1ad3      	subs	r3, r2, r3
2000685a:	2b02      	cmp	r3, #2
2000685c:	d901      	bls.n	20006862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
2000685e:	2303      	movs	r3, #3
20006860:	e087      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006862:	4b27      	ldr	r3, [pc, #156]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
20006864:	681b      	ldr	r3, [r3, #0]
20006866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000686a:	2b00      	cmp	r3, #0
2000686c:	d1f0      	bne.n	20006850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000686e:	687b      	ldr	r3, [r7, #4]
20006870:	69da      	ldr	r2, [r3, #28]
20006872:	687b      	ldr	r3, [r7, #4]
20006874:	6a1b      	ldr	r3, [r3, #32]
20006876:	431a      	orrs	r2, r3
20006878:	687b      	ldr	r3, [r7, #4]
2000687a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2000687c:	019b      	lsls	r3, r3, #6
2000687e:	431a      	orrs	r2, r3
20006880:	687b      	ldr	r3, [r7, #4]
20006882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20006884:	085b      	lsrs	r3, r3, #1
20006886:	3b01      	subs	r3, #1
20006888:	041b      	lsls	r3, r3, #16
2000688a:	431a      	orrs	r2, r3
2000688c:	687b      	ldr	r3, [r7, #4]
2000688e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20006890:	061b      	lsls	r3, r3, #24
20006892:	491b      	ldr	r1, [pc, #108]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
20006894:	4313      	orrs	r3, r2
20006896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20006898:	4b1b      	ldr	r3, [pc, #108]	@ (20006908 <HAL_RCC_OscConfig+0x478>)
2000689a:	2201      	movs	r2, #1
2000689c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000689e:	f7fa f8ba 	bl	20000a16 <HAL_GetTick>
200068a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200068a4:	e008      	b.n	200068b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
200068a6:	f7fa f8b6 	bl	20000a16 <HAL_GetTick>
200068aa:	4602      	mov	r2, r0
200068ac:	693b      	ldr	r3, [r7, #16]
200068ae:	1ad3      	subs	r3, r2, r3
200068b0:	2b02      	cmp	r3, #2
200068b2:	d901      	bls.n	200068b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
200068b4:	2303      	movs	r3, #3
200068b6:	e05c      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200068b8:	4b11      	ldr	r3, [pc, #68]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
200068ba:	681b      	ldr	r3, [r3, #0]
200068bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200068c0:	2b00      	cmp	r3, #0
200068c2:	d0f0      	beq.n	200068a6 <HAL_RCC_OscConfig+0x416>
200068c4:	e054      	b.n	20006970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
200068c6:	4b10      	ldr	r3, [pc, #64]	@ (20006908 <HAL_RCC_OscConfig+0x478>)
200068c8:	2200      	movs	r2, #0
200068ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200068cc:	f7fa f8a3 	bl	20000a16 <HAL_GetTick>
200068d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200068d2:	e008      	b.n	200068e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
200068d4:	f7fa f89f 	bl	20000a16 <HAL_GetTick>
200068d8:	4602      	mov	r2, r0
200068da:	693b      	ldr	r3, [r7, #16]
200068dc:	1ad3      	subs	r3, r2, r3
200068de:	2b02      	cmp	r3, #2
200068e0:	d901      	bls.n	200068e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
200068e2:	2303      	movs	r3, #3
200068e4:	e045      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200068e6:	4b06      	ldr	r3, [pc, #24]	@ (20006900 <HAL_RCC_OscConfig+0x470>)
200068e8:	681b      	ldr	r3, [r3, #0]
200068ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
200068ee:	2b00      	cmp	r3, #0
200068f0:	d1f0      	bne.n	200068d4 <HAL_RCC_OscConfig+0x444>
200068f2:	e03d      	b.n	20006970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
200068f4:	687b      	ldr	r3, [r7, #4]
200068f6:	699b      	ldr	r3, [r3, #24]
200068f8:	2b01      	cmp	r3, #1
200068fa:	d107      	bne.n	2000690c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
200068fc:	2301      	movs	r3, #1
200068fe:	e038      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
20006900:	40023800 	.word	0x40023800
20006904:	40007000 	.word	0x40007000
20006908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
2000690c:	4b1b      	ldr	r3, [pc, #108]	@ (2000697c <HAL_RCC_OscConfig+0x4ec>)
2000690e:	685b      	ldr	r3, [r3, #4]
20006910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20006912:	687b      	ldr	r3, [r7, #4]
20006914:	699b      	ldr	r3, [r3, #24]
20006916:	2b01      	cmp	r3, #1
20006918:	d028      	beq.n	2000696c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000691a:	68fb      	ldr	r3, [r7, #12]
2000691c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
20006920:	687b      	ldr	r3, [r7, #4]
20006922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20006924:	429a      	cmp	r2, r3
20006926:	d121      	bne.n	2000696c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20006928:	68fb      	ldr	r3, [r7, #12]
2000692a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
2000692e:	687b      	ldr	r3, [r7, #4]
20006930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20006932:	429a      	cmp	r2, r3
20006934:	d11a      	bne.n	2000696c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20006936:	68fa      	ldr	r2, [r7, #12]
20006938:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
2000693c:	4013      	ands	r3, r2
2000693e:	687a      	ldr	r2, [r7, #4]
20006940:	6a52      	ldr	r2, [r2, #36]	@ 0x24
20006942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
20006944:	4293      	cmp	r3, r2
20006946:	d111      	bne.n	2000696c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20006948:	68fb      	ldr	r3, [r7, #12]
2000694a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
2000694e:	687b      	ldr	r3, [r7, #4]
20006950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20006952:	085b      	lsrs	r3, r3, #1
20006954:	3b01      	subs	r3, #1
20006956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
20006958:	429a      	cmp	r2, r3
2000695a:	d107      	bne.n	2000696c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
2000695c:	68fb      	ldr	r3, [r7, #12]
2000695e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
20006962:	687b      	ldr	r3, [r7, #4]
20006964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
20006966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20006968:	429a      	cmp	r2, r3
2000696a:	d001      	beq.n	20006970 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
2000696c:	2301      	movs	r3, #1
2000696e:	e000      	b.n	20006972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
20006970:	2300      	movs	r3, #0
}
20006972:	4618      	mov	r0, r3
20006974:	3718      	adds	r7, #24
20006976:	46bd      	mov	sp, r7
20006978:	bd80      	pop	{r7, pc}
2000697a:	bf00      	nop
2000697c:	40023800 	.word	0x40023800

20006980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20006980:	b580      	push	{r7, lr}
20006982:	b084      	sub	sp, #16
20006984:	af00      	add	r7, sp, #0
20006986:	6078      	str	r0, [r7, #4]
20006988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
2000698a:	687b      	ldr	r3, [r7, #4]
2000698c:	2b00      	cmp	r3, #0
2000698e:	d101      	bne.n	20006994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
20006990:	2301      	movs	r3, #1
20006992:	e0cc      	b.n	20006b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
20006994:	4b68      	ldr	r3, [pc, #416]	@ (20006b38 <HAL_RCC_ClockConfig+0x1b8>)
20006996:	681b      	ldr	r3, [r3, #0]
20006998:	f003 0307 	and.w	r3, r3, #7
2000699c:	683a      	ldr	r2, [r7, #0]
2000699e:	429a      	cmp	r2, r3
200069a0:	d90c      	bls.n	200069bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200069a2:	4b65      	ldr	r3, [pc, #404]	@ (20006b38 <HAL_RCC_ClockConfig+0x1b8>)
200069a4:	683a      	ldr	r2, [r7, #0]
200069a6:	b2d2      	uxtb	r2, r2
200069a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
200069aa:	4b63      	ldr	r3, [pc, #396]	@ (20006b38 <HAL_RCC_ClockConfig+0x1b8>)
200069ac:	681b      	ldr	r3, [r3, #0]
200069ae:	f003 0307 	and.w	r3, r3, #7
200069b2:	683a      	ldr	r2, [r7, #0]
200069b4:	429a      	cmp	r2, r3
200069b6:	d001      	beq.n	200069bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
200069b8:	2301      	movs	r3, #1
200069ba:	e0b8      	b.n	20006b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
200069bc:	687b      	ldr	r3, [r7, #4]
200069be:	681b      	ldr	r3, [r3, #0]
200069c0:	f003 0302 	and.w	r3, r3, #2
200069c4:	2b00      	cmp	r3, #0
200069c6:	d020      	beq.n	20006a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
200069c8:	687b      	ldr	r3, [r7, #4]
200069ca:	681b      	ldr	r3, [r3, #0]
200069cc:	f003 0304 	and.w	r3, r3, #4
200069d0:	2b00      	cmp	r3, #0
200069d2:	d005      	beq.n	200069e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
200069d4:	4b59      	ldr	r3, [pc, #356]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
200069d6:	689b      	ldr	r3, [r3, #8]
200069d8:	4a58      	ldr	r2, [pc, #352]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
200069da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
200069de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
200069e0:	687b      	ldr	r3, [r7, #4]
200069e2:	681b      	ldr	r3, [r3, #0]
200069e4:	f003 0308 	and.w	r3, r3, #8
200069e8:	2b00      	cmp	r3, #0
200069ea:	d005      	beq.n	200069f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
200069ec:	4b53      	ldr	r3, [pc, #332]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
200069ee:	689b      	ldr	r3, [r3, #8]
200069f0:	4a52      	ldr	r2, [pc, #328]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
200069f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
200069f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
200069f8:	4b50      	ldr	r3, [pc, #320]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
200069fa:	689b      	ldr	r3, [r3, #8]
200069fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
20006a00:	687b      	ldr	r3, [r7, #4]
20006a02:	689b      	ldr	r3, [r3, #8]
20006a04:	494d      	ldr	r1, [pc, #308]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006a06:	4313      	orrs	r3, r2
20006a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20006a0a:	687b      	ldr	r3, [r7, #4]
20006a0c:	681b      	ldr	r3, [r3, #0]
20006a0e:	f003 0301 	and.w	r3, r3, #1
20006a12:	2b00      	cmp	r3, #0
20006a14:	d044      	beq.n	20006aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20006a16:	687b      	ldr	r3, [r7, #4]
20006a18:	685b      	ldr	r3, [r3, #4]
20006a1a:	2b01      	cmp	r3, #1
20006a1c:	d107      	bne.n	20006a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20006a1e:	4b47      	ldr	r3, [pc, #284]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006a20:	681b      	ldr	r3, [r3, #0]
20006a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20006a26:	2b00      	cmp	r3, #0
20006a28:	d119      	bne.n	20006a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20006a2a:	2301      	movs	r3, #1
20006a2c:	e07f      	b.n	20006b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20006a2e:	687b      	ldr	r3, [r7, #4]
20006a30:	685b      	ldr	r3, [r3, #4]
20006a32:	2b02      	cmp	r3, #2
20006a34:	d003      	beq.n	20006a3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
20006a36:	687b      	ldr	r3, [r7, #4]
20006a38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20006a3a:	2b03      	cmp	r3, #3
20006a3c:	d107      	bne.n	20006a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20006a3e:	4b3f      	ldr	r3, [pc, #252]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006a40:	681b      	ldr	r3, [r3, #0]
20006a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
20006a46:	2b00      	cmp	r3, #0
20006a48:	d109      	bne.n	20006a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20006a4a:	2301      	movs	r3, #1
20006a4c:	e06f      	b.n	20006b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20006a4e:	4b3b      	ldr	r3, [pc, #236]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006a50:	681b      	ldr	r3, [r3, #0]
20006a52:	f003 0302 	and.w	r3, r3, #2
20006a56:	2b00      	cmp	r3, #0
20006a58:	d101      	bne.n	20006a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20006a5a:	2301      	movs	r3, #1
20006a5c:	e067      	b.n	20006b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
20006a5e:	4b37      	ldr	r3, [pc, #220]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006a60:	689b      	ldr	r3, [r3, #8]
20006a62:	f023 0203 	bic.w	r2, r3, #3
20006a66:	687b      	ldr	r3, [r7, #4]
20006a68:	685b      	ldr	r3, [r3, #4]
20006a6a:	4934      	ldr	r1, [pc, #208]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006a6c:	4313      	orrs	r3, r2
20006a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
20006a70:	f7f9 ffd1 	bl	20000a16 <HAL_GetTick>
20006a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20006a76:	e00a      	b.n	20006a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20006a78:	f7f9 ffcd 	bl	20000a16 <HAL_GetTick>
20006a7c:	4602      	mov	r2, r0
20006a7e:	68fb      	ldr	r3, [r7, #12]
20006a80:	1ad3      	subs	r3, r2, r3
20006a82:	f241 3288 	movw	r2, #5000	@ 0x1388
20006a86:	4293      	cmp	r3, r2
20006a88:	d901      	bls.n	20006a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
20006a8a:	2303      	movs	r3, #3
20006a8c:	e04f      	b.n	20006b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20006a8e:	4b2b      	ldr	r3, [pc, #172]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006a90:	689b      	ldr	r3, [r3, #8]
20006a92:	f003 020c 	and.w	r2, r3, #12
20006a96:	687b      	ldr	r3, [r7, #4]
20006a98:	685b      	ldr	r3, [r3, #4]
20006a9a:	009b      	lsls	r3, r3, #2
20006a9c:	429a      	cmp	r2, r3
20006a9e:	d1eb      	bne.n	20006a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
20006aa0:	4b25      	ldr	r3, [pc, #148]	@ (20006b38 <HAL_RCC_ClockConfig+0x1b8>)
20006aa2:	681b      	ldr	r3, [r3, #0]
20006aa4:	f003 0307 	and.w	r3, r3, #7
20006aa8:	683a      	ldr	r2, [r7, #0]
20006aaa:	429a      	cmp	r2, r3
20006aac:	d20c      	bcs.n	20006ac8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20006aae:	4b22      	ldr	r3, [pc, #136]	@ (20006b38 <HAL_RCC_ClockConfig+0x1b8>)
20006ab0:	683a      	ldr	r2, [r7, #0]
20006ab2:	b2d2      	uxtb	r2, r2
20006ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20006ab6:	4b20      	ldr	r3, [pc, #128]	@ (20006b38 <HAL_RCC_ClockConfig+0x1b8>)
20006ab8:	681b      	ldr	r3, [r3, #0]
20006aba:	f003 0307 	and.w	r3, r3, #7
20006abe:	683a      	ldr	r2, [r7, #0]
20006ac0:	429a      	cmp	r2, r3
20006ac2:	d001      	beq.n	20006ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20006ac4:	2301      	movs	r3, #1
20006ac6:	e032      	b.n	20006b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20006ac8:	687b      	ldr	r3, [r7, #4]
20006aca:	681b      	ldr	r3, [r3, #0]
20006acc:	f003 0304 	and.w	r3, r3, #4
20006ad0:	2b00      	cmp	r3, #0
20006ad2:	d008      	beq.n	20006ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20006ad4:	4b19      	ldr	r3, [pc, #100]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006ad6:	689b      	ldr	r3, [r3, #8]
20006ad8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
20006adc:	687b      	ldr	r3, [r7, #4]
20006ade:	68db      	ldr	r3, [r3, #12]
20006ae0:	4916      	ldr	r1, [pc, #88]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006ae2:	4313      	orrs	r3, r2
20006ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20006ae6:	687b      	ldr	r3, [r7, #4]
20006ae8:	681b      	ldr	r3, [r3, #0]
20006aea:	f003 0308 	and.w	r3, r3, #8
20006aee:	2b00      	cmp	r3, #0
20006af0:	d009      	beq.n	20006b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20006af2:	4b12      	ldr	r3, [pc, #72]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006af4:	689b      	ldr	r3, [r3, #8]
20006af6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
20006afa:	687b      	ldr	r3, [r7, #4]
20006afc:	691b      	ldr	r3, [r3, #16]
20006afe:	00db      	lsls	r3, r3, #3
20006b00:	490e      	ldr	r1, [pc, #56]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006b02:	4313      	orrs	r3, r2
20006b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
20006b06:	f000 f8a1 	bl	20006c4c <HAL_RCC_GetSysClockFreq>
20006b0a:	4602      	mov	r2, r0
20006b0c:	4b0b      	ldr	r3, [pc, #44]	@ (20006b3c <HAL_RCC_ClockConfig+0x1bc>)
20006b0e:	689b      	ldr	r3, [r3, #8]
20006b10:	091b      	lsrs	r3, r3, #4
20006b12:	f003 030f 	and.w	r3, r3, #15
20006b16:	490a      	ldr	r1, [pc, #40]	@ (20006b40 <HAL_RCC_ClockConfig+0x1c0>)
20006b18:	5ccb      	ldrb	r3, [r1, r3]
20006b1a:	fa22 f303 	lsr.w	r3, r2, r3
20006b1e:	4a09      	ldr	r2, [pc, #36]	@ (20006b44 <HAL_RCC_ClockConfig+0x1c4>)
20006b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
20006b22:	4b09      	ldr	r3, [pc, #36]	@ (20006b48 <HAL_RCC_ClockConfig+0x1c8>)
20006b24:	681b      	ldr	r3, [r3, #0]
20006b26:	4618      	mov	r0, r3
20006b28:	f7f9 ff88 	bl	20000a3c <HAL_InitTick>

  return HAL_OK;
20006b2c:	2300      	movs	r3, #0
}
20006b2e:	4618      	mov	r0, r3
20006b30:	3710      	adds	r7, #16
20006b32:	46bd      	mov	sp, r7
20006b34:	bd80      	pop	{r7, pc}
20006b36:	bf00      	nop
20006b38:	40023c00 	.word	0x40023c00
20006b3c:	40023800 	.word	0x40023800
20006b40:	2000a638 	.word	0x2000a638
20006b44:	200003b0 	.word	0x200003b0
20006b48:	200003b4 	.word	0x200003b4

20006b4c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
20006b4c:	b580      	push	{r7, lr}
20006b4e:	b08c      	sub	sp, #48	@ 0x30
20006b50:	af00      	add	r7, sp, #0
20006b52:	60f8      	str	r0, [r7, #12]
20006b54:	60b9      	str	r1, [r7, #8]
20006b56:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
20006b58:	68fb      	ldr	r3, [r7, #12]
20006b5a:	2b00      	cmp	r3, #0
20006b5c:	d129      	bne.n	20006bb2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
20006b5e:	2300      	movs	r3, #0
20006b60:	61bb      	str	r3, [r7, #24]
20006b62:	4b2b      	ldr	r3, [pc, #172]	@ (20006c10 <HAL_RCC_MCOConfig+0xc4>)
20006b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20006b66:	4a2a      	ldr	r2, [pc, #168]	@ (20006c10 <HAL_RCC_MCOConfig+0xc4>)
20006b68:	f043 0301 	orr.w	r3, r3, #1
20006b6c:	6313      	str	r3, [r2, #48]	@ 0x30
20006b6e:	4b28      	ldr	r3, [pc, #160]	@ (20006c10 <HAL_RCC_MCOConfig+0xc4>)
20006b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20006b72:	f003 0301 	and.w	r3, r3, #1
20006b76:	61bb      	str	r3, [r7, #24]
20006b78:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
20006b7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
20006b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20006b80:	2302      	movs	r3, #2
20006b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20006b84:	2303      	movs	r3, #3
20006b86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20006b88:	2300      	movs	r3, #0
20006b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
20006b8c:	2300      	movs	r3, #0
20006b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
20006b90:	f107 031c 	add.w	r3, r7, #28
20006b94:	4619      	mov	r1, r3
20006b96:	481f      	ldr	r0, [pc, #124]	@ (20006c14 <HAL_RCC_MCOConfig+0xc8>)
20006b98:	f7fe feb8 	bl	2000590c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
20006b9c:	4b1c      	ldr	r3, [pc, #112]	@ (20006c10 <HAL_RCC_MCOConfig+0xc4>)
20006b9e:	689b      	ldr	r3, [r3, #8]
20006ba0:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
20006ba4:	68b9      	ldr	r1, [r7, #8]
20006ba6:	687b      	ldr	r3, [r7, #4]
20006ba8:	430b      	orrs	r3, r1
20006baa:	4919      	ldr	r1, [pc, #100]	@ (20006c10 <HAL_RCC_MCOConfig+0xc4>)
20006bac:	4313      	orrs	r3, r2
20006bae:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
20006bb0:	e029      	b.n	20006c06 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
20006bb2:	2300      	movs	r3, #0
20006bb4:	617b      	str	r3, [r7, #20]
20006bb6:	4b16      	ldr	r3, [pc, #88]	@ (20006c10 <HAL_RCC_MCOConfig+0xc4>)
20006bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20006bba:	4a15      	ldr	r2, [pc, #84]	@ (20006c10 <HAL_RCC_MCOConfig+0xc4>)
20006bbc:	f043 0304 	orr.w	r3, r3, #4
20006bc0:	6313      	str	r3, [r2, #48]	@ 0x30
20006bc2:	4b13      	ldr	r3, [pc, #76]	@ (20006c10 <HAL_RCC_MCOConfig+0xc4>)
20006bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20006bc6:	f003 0304 	and.w	r3, r3, #4
20006bca:	617b      	str	r3, [r7, #20]
20006bcc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
20006bce:	f44f 7300 	mov.w	r3, #512	@ 0x200
20006bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20006bd4:	2302      	movs	r3, #2
20006bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20006bd8:	2303      	movs	r3, #3
20006bda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20006bdc:	2300      	movs	r3, #0
20006bde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
20006be0:	2300      	movs	r3, #0
20006be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
20006be4:	f107 031c 	add.w	r3, r7, #28
20006be8:	4619      	mov	r1, r3
20006bea:	480b      	ldr	r0, [pc, #44]	@ (20006c18 <HAL_RCC_MCOConfig+0xcc>)
20006bec:	f7fe fe8e 	bl	2000590c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
20006bf0:	4b07      	ldr	r3, [pc, #28]	@ (20006c10 <HAL_RCC_MCOConfig+0xc4>)
20006bf2:	689b      	ldr	r3, [r3, #8]
20006bf4:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
20006bf8:	687b      	ldr	r3, [r7, #4]
20006bfa:	00d9      	lsls	r1, r3, #3
20006bfc:	68bb      	ldr	r3, [r7, #8]
20006bfe:	430b      	orrs	r3, r1
20006c00:	4903      	ldr	r1, [pc, #12]	@ (20006c10 <HAL_RCC_MCOConfig+0xc4>)
20006c02:	4313      	orrs	r3, r2
20006c04:	608b      	str	r3, [r1, #8]
}
20006c06:	bf00      	nop
20006c08:	3730      	adds	r7, #48	@ 0x30
20006c0a:	46bd      	mov	sp, r7
20006c0c:	bd80      	pop	{r7, pc}
20006c0e:	bf00      	nop
20006c10:	40023800 	.word	0x40023800
20006c14:	40020000 	.word	0x40020000
20006c18:	40020800 	.word	0x40020800

20006c1c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
20006c1c:	b480      	push	{r7}
20006c1e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
20006c20:	4b03      	ldr	r3, [pc, #12]	@ (20006c30 <HAL_RCC_EnableCSS+0x14>)
20006c22:	2201      	movs	r2, #1
20006c24:	601a      	str	r2, [r3, #0]
}
20006c26:	bf00      	nop
20006c28:	46bd      	mov	sp, r7
20006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
20006c2e:	4770      	bx	lr
20006c30:	4247004c 	.word	0x4247004c

20006c34 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
20006c34:	b480      	push	{r7}
20006c36:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
20006c38:	4b03      	ldr	r3, [pc, #12]	@ (20006c48 <HAL_RCC_DisableCSS+0x14>)
20006c3a:	2200      	movs	r2, #0
20006c3c:	601a      	str	r2, [r3, #0]
}
20006c3e:	bf00      	nop
20006c40:	46bd      	mov	sp, r7
20006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
20006c46:	4770      	bx	lr
20006c48:	4247004c 	.word	0x4247004c

20006c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
20006c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20006c50:	b090      	sub	sp, #64	@ 0x40
20006c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
20006c54:	2300      	movs	r3, #0
20006c56:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
20006c58:	2300      	movs	r3, #0
20006c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
20006c5c:	2300      	movs	r3, #0
20006c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
20006c60:	2300      	movs	r3, #0
20006c62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20006c64:	4b59      	ldr	r3, [pc, #356]	@ (20006dcc <HAL_RCC_GetSysClockFreq+0x180>)
20006c66:	689b      	ldr	r3, [r3, #8]
20006c68:	f003 030c 	and.w	r3, r3, #12
20006c6c:	2b08      	cmp	r3, #8
20006c6e:	d00d      	beq.n	20006c8c <HAL_RCC_GetSysClockFreq+0x40>
20006c70:	2b08      	cmp	r3, #8
20006c72:	f200 80a1 	bhi.w	20006db8 <HAL_RCC_GetSysClockFreq+0x16c>
20006c76:	2b00      	cmp	r3, #0
20006c78:	d002      	beq.n	20006c80 <HAL_RCC_GetSysClockFreq+0x34>
20006c7a:	2b04      	cmp	r3, #4
20006c7c:	d003      	beq.n	20006c86 <HAL_RCC_GetSysClockFreq+0x3a>
20006c7e:	e09b      	b.n	20006db8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20006c80:	4b53      	ldr	r3, [pc, #332]	@ (20006dd0 <HAL_RCC_GetSysClockFreq+0x184>)
20006c82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
20006c84:	e09b      	b.n	20006dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20006c86:	4b53      	ldr	r3, [pc, #332]	@ (20006dd4 <HAL_RCC_GetSysClockFreq+0x188>)
20006c88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
20006c8a:	e098      	b.n	20006dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20006c8c:	4b4f      	ldr	r3, [pc, #316]	@ (20006dcc <HAL_RCC_GetSysClockFreq+0x180>)
20006c8e:	685b      	ldr	r3, [r3, #4]
20006c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
20006c94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20006c96:	4b4d      	ldr	r3, [pc, #308]	@ (20006dcc <HAL_RCC_GetSysClockFreq+0x180>)
20006c98:	685b      	ldr	r3, [r3, #4]
20006c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
20006c9e:	2b00      	cmp	r3, #0
20006ca0:	d028      	beq.n	20006cf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20006ca2:	4b4a      	ldr	r3, [pc, #296]	@ (20006dcc <HAL_RCC_GetSysClockFreq+0x180>)
20006ca4:	685b      	ldr	r3, [r3, #4]
20006ca6:	099b      	lsrs	r3, r3, #6
20006ca8:	2200      	movs	r2, #0
20006caa:	623b      	str	r3, [r7, #32]
20006cac:	627a      	str	r2, [r7, #36]	@ 0x24
20006cae:	6a3b      	ldr	r3, [r7, #32]
20006cb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
20006cb4:	2100      	movs	r1, #0
20006cb6:	4b47      	ldr	r3, [pc, #284]	@ (20006dd4 <HAL_RCC_GetSysClockFreq+0x188>)
20006cb8:	fb03 f201 	mul.w	r2, r3, r1
20006cbc:	2300      	movs	r3, #0
20006cbe:	fb00 f303 	mul.w	r3, r0, r3
20006cc2:	4413      	add	r3, r2
20006cc4:	4a43      	ldr	r2, [pc, #268]	@ (20006dd4 <HAL_RCC_GetSysClockFreq+0x188>)
20006cc6:	fba0 1202 	umull	r1, r2, r0, r2
20006cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
20006ccc:	460a      	mov	r2, r1
20006cce:	62ba      	str	r2, [r7, #40]	@ 0x28
20006cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20006cd2:	4413      	add	r3, r2
20006cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
20006cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20006cd8:	2200      	movs	r2, #0
20006cda:	61bb      	str	r3, [r7, #24]
20006cdc:	61fa      	str	r2, [r7, #28]
20006cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20006ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
20006ce6:	f7f9 fcf7 	bl	200006d8 <__aeabi_uldivmod>
20006cea:	4602      	mov	r2, r0
20006cec:	460b      	mov	r3, r1
20006cee:	4613      	mov	r3, r2
20006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
20006cf2:	e053      	b.n	20006d9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20006cf4:	4b35      	ldr	r3, [pc, #212]	@ (20006dcc <HAL_RCC_GetSysClockFreq+0x180>)
20006cf6:	685b      	ldr	r3, [r3, #4]
20006cf8:	099b      	lsrs	r3, r3, #6
20006cfa:	2200      	movs	r2, #0
20006cfc:	613b      	str	r3, [r7, #16]
20006cfe:	617a      	str	r2, [r7, #20]
20006d00:	693b      	ldr	r3, [r7, #16]
20006d02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
20006d06:	f04f 0b00 	mov.w	fp, #0
20006d0a:	4652      	mov	r2, sl
20006d0c:	465b      	mov	r3, fp
20006d0e:	f04f 0000 	mov.w	r0, #0
20006d12:	f04f 0100 	mov.w	r1, #0
20006d16:	0159      	lsls	r1, r3, #5
20006d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20006d1c:	0150      	lsls	r0, r2, #5
20006d1e:	4602      	mov	r2, r0
20006d20:	460b      	mov	r3, r1
20006d22:	ebb2 080a 	subs.w	r8, r2, sl
20006d26:	eb63 090b 	sbc.w	r9, r3, fp
20006d2a:	f04f 0200 	mov.w	r2, #0
20006d2e:	f04f 0300 	mov.w	r3, #0
20006d32:	ea4f 1389 	mov.w	r3, r9, lsl #6
20006d36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
20006d3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
20006d3e:	ebb2 0408 	subs.w	r4, r2, r8
20006d42:	eb63 0509 	sbc.w	r5, r3, r9
20006d46:	f04f 0200 	mov.w	r2, #0
20006d4a:	f04f 0300 	mov.w	r3, #0
20006d4e:	00eb      	lsls	r3, r5, #3
20006d50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20006d54:	00e2      	lsls	r2, r4, #3
20006d56:	4614      	mov	r4, r2
20006d58:	461d      	mov	r5, r3
20006d5a:	eb14 030a 	adds.w	r3, r4, sl
20006d5e:	603b      	str	r3, [r7, #0]
20006d60:	eb45 030b 	adc.w	r3, r5, fp
20006d64:	607b      	str	r3, [r7, #4]
20006d66:	f04f 0200 	mov.w	r2, #0
20006d6a:	f04f 0300 	mov.w	r3, #0
20006d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
20006d72:	4629      	mov	r1, r5
20006d74:	028b      	lsls	r3, r1, #10
20006d76:	4621      	mov	r1, r4
20006d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20006d7c:	4621      	mov	r1, r4
20006d7e:	028a      	lsls	r2, r1, #10
20006d80:	4610      	mov	r0, r2
20006d82:	4619      	mov	r1, r3
20006d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20006d86:	2200      	movs	r2, #0
20006d88:	60bb      	str	r3, [r7, #8]
20006d8a:	60fa      	str	r2, [r7, #12]
20006d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20006d90:	f7f9 fca2 	bl	200006d8 <__aeabi_uldivmod>
20006d94:	4602      	mov	r2, r0
20006d96:	460b      	mov	r3, r1
20006d98:	4613      	mov	r3, r2
20006d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
20006d9c:	4b0b      	ldr	r3, [pc, #44]	@ (20006dcc <HAL_RCC_GetSysClockFreq+0x180>)
20006d9e:	685b      	ldr	r3, [r3, #4]
20006da0:	0c1b      	lsrs	r3, r3, #16
20006da2:	f003 0303 	and.w	r3, r3, #3
20006da6:	3301      	adds	r3, #1
20006da8:	005b      	lsls	r3, r3, #1
20006daa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
20006dac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
20006dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20006db0:	fbb2 f3f3 	udiv	r3, r2, r3
20006db4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
20006db6:	e002      	b.n	20006dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20006db8:	4b05      	ldr	r3, [pc, #20]	@ (20006dd0 <HAL_RCC_GetSysClockFreq+0x184>)
20006dba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
20006dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
20006dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
20006dc0:	4618      	mov	r0, r3
20006dc2:	3740      	adds	r7, #64	@ 0x40
20006dc4:	46bd      	mov	sp, r7
20006dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20006dca:	bf00      	nop
20006dcc:	40023800 	.word	0x40023800
20006dd0:	00f42400 	.word	0x00f42400
20006dd4:	017d7840 	.word	0x017d7840

20006dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20006dd8:	b480      	push	{r7}
20006dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20006ddc:	4b03      	ldr	r3, [pc, #12]	@ (20006dec <HAL_RCC_GetHCLKFreq+0x14>)
20006dde:	681b      	ldr	r3, [r3, #0]
}
20006de0:	4618      	mov	r0, r3
20006de2:	46bd      	mov	sp, r7
20006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
20006de8:	4770      	bx	lr
20006dea:	bf00      	nop
20006dec:	200003b0 	.word	0x200003b0

20006df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20006df0:	b580      	push	{r7, lr}
20006df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
20006df4:	f7ff fff0 	bl	20006dd8 <HAL_RCC_GetHCLKFreq>
20006df8:	4602      	mov	r2, r0
20006dfa:	4b05      	ldr	r3, [pc, #20]	@ (20006e10 <HAL_RCC_GetPCLK1Freq+0x20>)
20006dfc:	689b      	ldr	r3, [r3, #8]
20006dfe:	0a9b      	lsrs	r3, r3, #10
20006e00:	f003 0307 	and.w	r3, r3, #7
20006e04:	4903      	ldr	r1, [pc, #12]	@ (20006e14 <HAL_RCC_GetPCLK1Freq+0x24>)
20006e06:	5ccb      	ldrb	r3, [r1, r3]
20006e08:	fa22 f303 	lsr.w	r3, r2, r3
}
20006e0c:	4618      	mov	r0, r3
20006e0e:	bd80      	pop	{r7, pc}
20006e10:	40023800 	.word	0x40023800
20006e14:	2000a648 	.word	0x2000a648

20006e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
20006e18:	b580      	push	{r7, lr}
20006e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
20006e1c:	f7ff ffdc 	bl	20006dd8 <HAL_RCC_GetHCLKFreq>
20006e20:	4602      	mov	r2, r0
20006e22:	4b05      	ldr	r3, [pc, #20]	@ (20006e38 <HAL_RCC_GetPCLK2Freq+0x20>)
20006e24:	689b      	ldr	r3, [r3, #8]
20006e26:	0b5b      	lsrs	r3, r3, #13
20006e28:	f003 0307 	and.w	r3, r3, #7
20006e2c:	4903      	ldr	r1, [pc, #12]	@ (20006e3c <HAL_RCC_GetPCLK2Freq+0x24>)
20006e2e:	5ccb      	ldrb	r3, [r1, r3]
20006e30:	fa22 f303 	lsr.w	r3, r2, r3
}
20006e34:	4618      	mov	r0, r3
20006e36:	bd80      	pop	{r7, pc}
20006e38:	40023800 	.word	0x40023800
20006e3c:	2000a648 	.word	0x2000a648

20006e40 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20006e40:	b480      	push	{r7}
20006e42:	b083      	sub	sp, #12
20006e44:	af00      	add	r7, sp, #0
20006e46:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
20006e48:	687b      	ldr	r3, [r7, #4]
20006e4a:	220f      	movs	r2, #15
20006e4c:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
20006e4e:	4b45      	ldr	r3, [pc, #276]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006e50:	681b      	ldr	r3, [r3, #0]
20006e52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
20006e56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
20006e5a:	d104      	bne.n	20006e66 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
20006e5c:	687b      	ldr	r3, [r7, #4]
20006e5e:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
20006e62:	605a      	str	r2, [r3, #4]
20006e64:	e00e      	b.n	20006e84 <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
20006e66:	4b3f      	ldr	r3, [pc, #252]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006e68:	681b      	ldr	r3, [r3, #0]
20006e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
20006e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
20006e72:	d104      	bne.n	20006e7e <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
20006e74:	687b      	ldr	r3, [r7, #4]
20006e76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
20006e7a:	605a      	str	r2, [r3, #4]
20006e7c:	e002      	b.n	20006e84 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
20006e7e:	687b      	ldr	r3, [r7, #4]
20006e80:	2200      	movs	r2, #0
20006e82:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
20006e84:	4b37      	ldr	r3, [pc, #220]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006e86:	681b      	ldr	r3, [r3, #0]
20006e88:	f003 0301 	and.w	r3, r3, #1
20006e8c:	2b01      	cmp	r3, #1
20006e8e:	d103      	bne.n	20006e98 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
20006e90:	687b      	ldr	r3, [r7, #4]
20006e92:	2201      	movs	r2, #1
20006e94:	60da      	str	r2, [r3, #12]
20006e96:	e002      	b.n	20006e9e <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
20006e98:	687b      	ldr	r3, [r7, #4]
20006e9a:	2200      	movs	r2, #0
20006e9c:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
20006e9e:	4b31      	ldr	r3, [pc, #196]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006ea0:	681b      	ldr	r3, [r3, #0]
20006ea2:	08db      	lsrs	r3, r3, #3
20006ea4:	f003 021f 	and.w	r2, r3, #31
20006ea8:	687b      	ldr	r3, [r7, #4]
20006eaa:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
20006eac:	4b2d      	ldr	r3, [pc, #180]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006eb0:	f003 0304 	and.w	r3, r3, #4
20006eb4:	2b04      	cmp	r3, #4
20006eb6:	d103      	bne.n	20006ec0 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
20006eb8:	687b      	ldr	r3, [r7, #4]
20006eba:	2205      	movs	r2, #5
20006ebc:	609a      	str	r2, [r3, #8]
20006ebe:	e00c      	b.n	20006eda <HAL_RCC_GetOscConfig+0x9a>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
20006ec0:	4b28      	ldr	r3, [pc, #160]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20006ec4:	f003 0301 	and.w	r3, r3, #1
20006ec8:	2b01      	cmp	r3, #1
20006eca:	d103      	bne.n	20006ed4 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
20006ecc:	687b      	ldr	r3, [r7, #4]
20006ece:	2201      	movs	r2, #1
20006ed0:	609a      	str	r2, [r3, #8]
20006ed2:	e002      	b.n	20006eda <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
20006ed4:	687b      	ldr	r3, [r7, #4]
20006ed6:	2200      	movs	r2, #0
20006ed8:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
20006eda:	4b22      	ldr	r3, [pc, #136]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20006ede:	f003 0301 	and.w	r3, r3, #1
20006ee2:	2b01      	cmp	r3, #1
20006ee4:	d103      	bne.n	20006eee <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
20006ee6:	687b      	ldr	r3, [r7, #4]
20006ee8:	2201      	movs	r2, #1
20006eea:	615a      	str	r2, [r3, #20]
20006eec:	e002      	b.n	20006ef4 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
20006eee:	687b      	ldr	r3, [r7, #4]
20006ef0:	2200      	movs	r2, #0
20006ef2:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
20006ef4:	4b1b      	ldr	r3, [pc, #108]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006ef6:	681b      	ldr	r3, [r3, #0]
20006ef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20006efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
20006f00:	d103      	bne.n	20006f0a <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
20006f02:	687b      	ldr	r3, [r7, #4]
20006f04:	2202      	movs	r2, #2
20006f06:	619a      	str	r2, [r3, #24]
20006f08:	e002      	b.n	20006f10 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
20006f0a:	687b      	ldr	r3, [r7, #4]
20006f0c:	2201      	movs	r2, #1
20006f0e:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
20006f10:	4b14      	ldr	r3, [pc, #80]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006f12:	685b      	ldr	r3, [r3, #4]
20006f14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
20006f18:	687b      	ldr	r3, [r7, #4]
20006f1a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
20006f1c:	4b11      	ldr	r3, [pc, #68]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006f1e:	685b      	ldr	r3, [r3, #4]
20006f20:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
20006f24:	687b      	ldr	r3, [r7, #4]
20006f26:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
20006f28:	4b0e      	ldr	r3, [pc, #56]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006f2a:	685b      	ldr	r3, [r3, #4]
20006f2c:	099b      	lsrs	r3, r3, #6
20006f2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
20006f32:	687b      	ldr	r3, [r7, #4]
20006f34:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
20006f36:	4b0b      	ldr	r3, [pc, #44]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006f38:	685b      	ldr	r3, [r3, #4]
20006f3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
20006f3e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
20006f42:	005b      	lsls	r3, r3, #1
20006f44:	0c1a      	lsrs	r2, r3, #16
20006f46:	687b      	ldr	r3, [r7, #4]
20006f48:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
20006f4a:	4b06      	ldr	r3, [pc, #24]	@ (20006f64 <HAL_RCC_GetOscConfig+0x124>)
20006f4c:	685b      	ldr	r3, [r3, #4]
20006f4e:	0e1b      	lsrs	r3, r3, #24
20006f50:	f003 020f 	and.w	r2, r3, #15
20006f54:	687b      	ldr	r3, [r7, #4]
20006f56:	62da      	str	r2, [r3, #44]	@ 0x2c
}
20006f58:	bf00      	nop
20006f5a:	370c      	adds	r7, #12
20006f5c:	46bd      	mov	sp, r7
20006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006f62:	4770      	bx	lr
20006f64:	40023800 	.word	0x40023800

20006f68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
20006f68:	b480      	push	{r7}
20006f6a:	b083      	sub	sp, #12
20006f6c:	af00      	add	r7, sp, #0
20006f6e:	6078      	str	r0, [r7, #4]
20006f70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
20006f72:	687b      	ldr	r3, [r7, #4]
20006f74:	220f      	movs	r2, #15
20006f76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
20006f78:	4b12      	ldr	r3, [pc, #72]	@ (20006fc4 <HAL_RCC_GetClockConfig+0x5c>)
20006f7a:	689b      	ldr	r3, [r3, #8]
20006f7c:	f003 0203 	and.w	r2, r3, #3
20006f80:	687b      	ldr	r3, [r7, #4]
20006f82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
20006f84:	4b0f      	ldr	r3, [pc, #60]	@ (20006fc4 <HAL_RCC_GetClockConfig+0x5c>)
20006f86:	689b      	ldr	r3, [r3, #8]
20006f88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
20006f8c:	687b      	ldr	r3, [r7, #4]
20006f8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
20006f90:	4b0c      	ldr	r3, [pc, #48]	@ (20006fc4 <HAL_RCC_GetClockConfig+0x5c>)
20006f92:	689b      	ldr	r3, [r3, #8]
20006f94:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
20006f98:	687b      	ldr	r3, [r7, #4]
20006f9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
20006f9c:	4b09      	ldr	r3, [pc, #36]	@ (20006fc4 <HAL_RCC_GetClockConfig+0x5c>)
20006f9e:	689b      	ldr	r3, [r3, #8]
20006fa0:	08db      	lsrs	r3, r3, #3
20006fa2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
20006fa6:	687b      	ldr	r3, [r7, #4]
20006fa8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
20006faa:	4b07      	ldr	r3, [pc, #28]	@ (20006fc8 <HAL_RCC_GetClockConfig+0x60>)
20006fac:	681b      	ldr	r3, [r3, #0]
20006fae:	f003 0207 	and.w	r2, r3, #7
20006fb2:	683b      	ldr	r3, [r7, #0]
20006fb4:	601a      	str	r2, [r3, #0]
}
20006fb6:	bf00      	nop
20006fb8:	370c      	adds	r7, #12
20006fba:	46bd      	mov	sp, r7
20006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
20006fc0:	4770      	bx	lr
20006fc2:	bf00      	nop
20006fc4:	40023800 	.word	0x40023800
20006fc8:	40023c00 	.word	0x40023c00

20006fcc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
20006fcc:	b580      	push	{r7, lr}
20006fce:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
20006fd0:	4b06      	ldr	r3, [pc, #24]	@ (20006fec <HAL_RCC_NMI_IRQHandler+0x20>)
20006fd2:	68db      	ldr	r3, [r3, #12]
20006fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20006fd8:	2b80      	cmp	r3, #128	@ 0x80
20006fda:	d104      	bne.n	20006fe6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
20006fdc:	f000 f80a 	bl	20006ff4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
20006fe0:	4b03      	ldr	r3, [pc, #12]	@ (20006ff0 <HAL_RCC_NMI_IRQHandler+0x24>)
20006fe2:	2280      	movs	r2, #128	@ 0x80
20006fe4:	701a      	strb	r2, [r3, #0]
  }
}
20006fe6:	bf00      	nop
20006fe8:	bd80      	pop	{r7, pc}
20006fea:	bf00      	nop
20006fec:	40023800 	.word	0x40023800
20006ff0:	4002380e 	.word	0x4002380e

20006ff4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
20006ff4:	b480      	push	{r7}
20006ff6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
20006ff8:	bf00      	nop
20006ffa:	46bd      	mov	sp, r7
20006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
20007000:	4770      	bx	lr
	...

20007004 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
20007004:	b580      	push	{r7, lr}
20007006:	b086      	sub	sp, #24
20007008:	af00      	add	r7, sp, #0
2000700a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
2000700c:	2300      	movs	r3, #0
2000700e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
20007010:	2300      	movs	r3, #0
20007012:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
20007014:	687b      	ldr	r3, [r7, #4]
20007016:	681b      	ldr	r3, [r3, #0]
20007018:	f003 0301 	and.w	r3, r3, #1
2000701c:	2b00      	cmp	r3, #0
2000701e:	d105      	bne.n	2000702c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
20007020:	687b      	ldr	r3, [r7, #4]
20007022:	681b      	ldr	r3, [r3, #0]
20007024:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
20007028:	2b00      	cmp	r3, #0
2000702a:	d038      	beq.n	2000709e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
2000702c:	4b68      	ldr	r3, [pc, #416]	@ (200071d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
2000702e:	2200      	movs	r2, #0
20007030:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
20007032:	f7f9 fcf0 	bl	20000a16 <HAL_GetTick>
20007036:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20007038:	e008      	b.n	2000704c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2000703a:	f7f9 fcec 	bl	20000a16 <HAL_GetTick>
2000703e:	4602      	mov	r2, r0
20007040:	697b      	ldr	r3, [r7, #20]
20007042:	1ad3      	subs	r3, r2, r3
20007044:	2b02      	cmp	r3, #2
20007046:	d901      	bls.n	2000704c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20007048:	2303      	movs	r3, #3
2000704a:	e0bd      	b.n	200071c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
2000704c:	4b61      	ldr	r3, [pc, #388]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000704e:	681b      	ldr	r3, [r3, #0]
20007050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20007054:	2b00      	cmp	r3, #0
20007056:	d1f0      	bne.n	2000703a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
20007058:	687b      	ldr	r3, [r7, #4]
2000705a:	685a      	ldr	r2, [r3, #4]
2000705c:	687b      	ldr	r3, [r7, #4]
2000705e:	689b      	ldr	r3, [r3, #8]
20007060:	019b      	lsls	r3, r3, #6
20007062:	431a      	orrs	r2, r3
20007064:	687b      	ldr	r3, [r7, #4]
20007066:	68db      	ldr	r3, [r3, #12]
20007068:	071b      	lsls	r3, r3, #28
2000706a:	495a      	ldr	r1, [pc, #360]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000706c:	4313      	orrs	r3, r2
2000706e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
20007072:	4b57      	ldr	r3, [pc, #348]	@ (200071d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
20007074:	2201      	movs	r2, #1
20007076:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
20007078:	f7f9 fccd 	bl	20000a16 <HAL_GetTick>
2000707c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2000707e:	e008      	b.n	20007092 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20007080:	f7f9 fcc9 	bl	20000a16 <HAL_GetTick>
20007084:	4602      	mov	r2, r0
20007086:	697b      	ldr	r3, [r7, #20]
20007088:	1ad3      	subs	r3, r2, r3
2000708a:	2b02      	cmp	r3, #2
2000708c:	d901      	bls.n	20007092 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
2000708e:	2303      	movs	r3, #3
20007090:	e09a      	b.n	200071c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20007092:	4b50      	ldr	r3, [pc, #320]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007094:	681b      	ldr	r3, [r3, #0]
20007096:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
2000709a:	2b00      	cmp	r3, #0
2000709c:	d0f0      	beq.n	20007080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
2000709e:	687b      	ldr	r3, [r7, #4]
200070a0:	681b      	ldr	r3, [r3, #0]
200070a2:	f003 0302 	and.w	r3, r3, #2
200070a6:	2b00      	cmp	r3, #0
200070a8:	f000 8083 	beq.w	200071b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
200070ac:	2300      	movs	r3, #0
200070ae:	60fb      	str	r3, [r7, #12]
200070b0:	4b48      	ldr	r3, [pc, #288]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200070b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200070b4:	4a47      	ldr	r2, [pc, #284]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200070b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
200070ba:	6413      	str	r3, [r2, #64]	@ 0x40
200070bc:	4b45      	ldr	r3, [pc, #276]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200070be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
200070c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
200070c4:	60fb      	str	r3, [r7, #12]
200070c6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
200070c8:	4b43      	ldr	r3, [pc, #268]	@ (200071d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
200070ca:	681b      	ldr	r3, [r3, #0]
200070cc:	4a42      	ldr	r2, [pc, #264]	@ (200071d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
200070ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
200070d2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
200070d4:	f7f9 fc9f 	bl	20000a16 <HAL_GetTick>
200070d8:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
200070da:	e008      	b.n	200070ee <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
200070dc:	f7f9 fc9b 	bl	20000a16 <HAL_GetTick>
200070e0:	4602      	mov	r2, r0
200070e2:	697b      	ldr	r3, [r7, #20]
200070e4:	1ad3      	subs	r3, r2, r3
200070e6:	2b02      	cmp	r3, #2
200070e8:	d901      	bls.n	200070ee <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
200070ea:	2303      	movs	r3, #3
200070ec:	e06c      	b.n	200071c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
200070ee:	4b3a      	ldr	r3, [pc, #232]	@ (200071d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
200070f0:	681b      	ldr	r3, [r3, #0]
200070f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200070f6:	2b00      	cmp	r3, #0
200070f8:	d0f0      	beq.n	200070dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
200070fa:	4b36      	ldr	r3, [pc, #216]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200070fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
200070fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20007102:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
20007104:	693b      	ldr	r3, [r7, #16]
20007106:	2b00      	cmp	r3, #0
20007108:	d02f      	beq.n	2000716a <HAL_RCCEx_PeriphCLKConfig+0x166>
2000710a:	687b      	ldr	r3, [r7, #4]
2000710c:	691b      	ldr	r3, [r3, #16]
2000710e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20007112:	693a      	ldr	r2, [r7, #16]
20007114:	429a      	cmp	r2, r3
20007116:	d028      	beq.n	2000716a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
20007118:	4b2e      	ldr	r3, [pc, #184]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000711a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000711c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
20007120:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
20007122:	4b2e      	ldr	r3, [pc, #184]	@ (200071dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
20007124:	2201      	movs	r2, #1
20007126:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
20007128:	4b2c      	ldr	r3, [pc, #176]	@ (200071dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
2000712a:	2200      	movs	r2, #0
2000712c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
2000712e:	4a29      	ldr	r2, [pc, #164]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007130:	693b      	ldr	r3, [r7, #16]
20007132:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
20007134:	4b27      	ldr	r3, [pc, #156]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007138:	f003 0301 	and.w	r3, r3, #1
2000713c:	2b01      	cmp	r3, #1
2000713e:	d114      	bne.n	2000716a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
20007140:	f7f9 fc69 	bl	20000a16 <HAL_GetTick>
20007144:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20007146:	e00a      	b.n	2000715e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20007148:	f7f9 fc65 	bl	20000a16 <HAL_GetTick>
2000714c:	4602      	mov	r2, r0
2000714e:	697b      	ldr	r3, [r7, #20]
20007150:	1ad3      	subs	r3, r2, r3
20007152:	f241 3288 	movw	r2, #5000	@ 0x1388
20007156:	4293      	cmp	r3, r2
20007158:	d901      	bls.n	2000715e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
2000715a:	2303      	movs	r3, #3
2000715c:	e034      	b.n	200071c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000715e:	4b1d      	ldr	r3, [pc, #116]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007162:	f003 0302 	and.w	r3, r3, #2
20007166:	2b00      	cmp	r3, #0
20007168:	d0ee      	beq.n	20007148 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2000716a:	687b      	ldr	r3, [r7, #4]
2000716c:	691b      	ldr	r3, [r3, #16]
2000716e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
20007172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
20007176:	d10d      	bne.n	20007194 <HAL_RCCEx_PeriphCLKConfig+0x190>
20007178:	4b16      	ldr	r3, [pc, #88]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000717a:	689b      	ldr	r3, [r3, #8]
2000717c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
20007180:	687b      	ldr	r3, [r7, #4]
20007182:	691b      	ldr	r3, [r3, #16]
20007184:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
20007188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
2000718c:	4911      	ldr	r1, [pc, #68]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000718e:	4313      	orrs	r3, r2
20007190:	608b      	str	r3, [r1, #8]
20007192:	e005      	b.n	200071a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
20007194:	4b0f      	ldr	r3, [pc, #60]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007196:	689b      	ldr	r3, [r3, #8]
20007198:	4a0e      	ldr	r2, [pc, #56]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000719a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
2000719e:	6093      	str	r3, [r2, #8]
200071a0:	4b0c      	ldr	r3, [pc, #48]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200071a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
200071a4:	687b      	ldr	r3, [r7, #4]
200071a6:	691b      	ldr	r3, [r3, #16]
200071a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
200071ac:	4909      	ldr	r1, [pc, #36]	@ (200071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200071ae:	4313      	orrs	r3, r2
200071b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
200071b2:	687b      	ldr	r3, [r7, #4]
200071b4:	681b      	ldr	r3, [r3, #0]
200071b6:	f003 0308 	and.w	r3, r3, #8
200071ba:	2b00      	cmp	r3, #0
200071bc:	d003      	beq.n	200071c6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
200071be:	687b      	ldr	r3, [r7, #4]
200071c0:	7d1a      	ldrb	r2, [r3, #20]
200071c2:	4b07      	ldr	r3, [pc, #28]	@ (200071e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
200071c4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
200071c6:	2300      	movs	r3, #0
}
200071c8:	4618      	mov	r0, r3
200071ca:	3718      	adds	r7, #24
200071cc:	46bd      	mov	sp, r7
200071ce:	bd80      	pop	{r7, pc}
200071d0:	42470068 	.word	0x42470068
200071d4:	40023800 	.word	0x40023800
200071d8:	40007000 	.word	0x40007000
200071dc:	42470e40 	.word	0x42470e40
200071e0:	424711e0 	.word	0x424711e0

200071e4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
200071e4:	b480      	push	{r7}
200071e6:	b085      	sub	sp, #20
200071e8:	af00      	add	r7, sp, #0
200071ea:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
200071ec:	687b      	ldr	r3, [r7, #4]
200071ee:	2203      	movs	r2, #3
200071f0:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
200071f2:	4b1c      	ldr	r3, [pc, #112]	@ (20007264 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
200071f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200071f8:	099b      	lsrs	r3, r3, #6
200071fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
200071fe:	687b      	ldr	r3, [r7, #4]
20007200:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20007202:	4b18      	ldr	r3, [pc, #96]	@ (20007264 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
20007204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20007208:	0f1b      	lsrs	r3, r3, #28
2000720a:	f003 0207 	and.w	r2, r3, #7
2000720e:	687b      	ldr	r3, [r7, #4]
20007210:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
20007212:	4b14      	ldr	r3, [pc, #80]	@ (20007264 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
20007214:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
20007218:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
2000721c:	687b      	ldr	r3, [r7, #4]
2000721e:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
20007220:	4b10      	ldr	r3, [pc, #64]	@ (20007264 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
20007222:	689b      	ldr	r3, [r3, #8]
20007224:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
20007228:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
2000722a:	4b0e      	ldr	r3, [pc, #56]	@ (20007264 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
2000722c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000722e:	f403 7240 	and.w	r2, r3, #768	@ 0x300
20007232:	68fb      	ldr	r3, [r7, #12]
20007234:	431a      	orrs	r2, r3
20007236:	687b      	ldr	r3, [r7, #4]
20007238:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
2000723a:	4b0a      	ldr	r3, [pc, #40]	@ (20007264 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
2000723c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
20007240:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
20007244:	2b00      	cmp	r3, #0
20007246:	d103      	bne.n	20007250 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
20007248:	687b      	ldr	r3, [r7, #4]
2000724a:	2200      	movs	r2, #0
2000724c:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
2000724e:	e002      	b.n	20007256 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
20007250:	687b      	ldr	r3, [r7, #4]
20007252:	2201      	movs	r2, #1
20007254:	751a      	strb	r2, [r3, #20]
}
20007256:	bf00      	nop
20007258:	3714      	adds	r7, #20
2000725a:	46bd      	mov	sp, r7
2000725c:	f85d 7b04 	ldr.w	r7, [sp], #4
20007260:	4770      	bx	lr
20007262:	bf00      	nop
20007264:	40023800 	.word	0x40023800

20007268 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
20007268:	b480      	push	{r7}
2000726a:	b087      	sub	sp, #28
2000726c:	af00      	add	r7, sp, #0
2000726e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
20007270:	2300      	movs	r3, #0
20007272:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
20007274:	2300      	movs	r3, #0
20007276:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
20007278:	2300      	movs	r3, #0
2000727a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
2000727c:	2300      	movs	r3, #0
2000727e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
20007280:	687b      	ldr	r3, [r7, #4]
20007282:	2b01      	cmp	r3, #1
20007284:	d141      	bne.n	2000730a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
20007286:	4b25      	ldr	r3, [pc, #148]	@ (2000731c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
20007288:	689b      	ldr	r3, [r3, #8]
2000728a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
2000728e:	60fb      	str	r3, [r7, #12]
20007290:	68fb      	ldr	r3, [r7, #12]
20007292:	2b00      	cmp	r3, #0
20007294:	d006      	beq.n	200072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
20007296:	68fb      	ldr	r3, [r7, #12]
20007298:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
2000729c:	d131      	bne.n	20007302 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
2000729e:	4b20      	ldr	r3, [pc, #128]	@ (20007320 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
200072a0:	617b      	str	r3, [r7, #20]
          break;
200072a2:	e031      	b.n	20007308 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
200072a4:	4b1d      	ldr	r3, [pc, #116]	@ (2000731c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
200072a6:	685b      	ldr	r3, [r3, #4]
200072a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
200072ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
200072b0:	d109      	bne.n	200072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
200072b2:	4b1a      	ldr	r3, [pc, #104]	@ (2000731c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
200072b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200072b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
200072bc:	4a19      	ldr	r2, [pc, #100]	@ (20007324 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
200072be:	fbb2 f3f3 	udiv	r3, r2, r3
200072c2:	613b      	str	r3, [r7, #16]
200072c4:	e008      	b.n	200072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
200072c6:	4b15      	ldr	r3, [pc, #84]	@ (2000731c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
200072c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200072cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
200072d0:	4a15      	ldr	r2, [pc, #84]	@ (20007328 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
200072d2:	fbb2 f3f3 	udiv	r3, r2, r3
200072d6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
200072d8:	4b10      	ldr	r3, [pc, #64]	@ (2000731c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
200072da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200072de:	099b      	lsrs	r3, r3, #6
200072e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
200072e4:	693b      	ldr	r3, [r7, #16]
200072e6:	fb02 f303 	mul.w	r3, r2, r3
200072ea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
200072ec:	4b0b      	ldr	r3, [pc, #44]	@ (2000731c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
200072ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
200072f2:	0f1b      	lsrs	r3, r3, #28
200072f4:	f003 0307 	and.w	r3, r3, #7
200072f8:	68ba      	ldr	r2, [r7, #8]
200072fa:	fbb2 f3f3 	udiv	r3, r2, r3
200072fe:	617b      	str	r3, [r7, #20]
          break;
20007300:	e002      	b.n	20007308 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
20007302:	2300      	movs	r3, #0
20007304:	617b      	str	r3, [r7, #20]
          break;
20007306:	bf00      	nop
        }
      }
      break;
20007308:	e000      	b.n	2000730c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
2000730a:	bf00      	nop
    }
  }
  return frequency;
2000730c:	697b      	ldr	r3, [r7, #20]
}
2000730e:	4618      	mov	r0, r3
20007310:	371c      	adds	r7, #28
20007312:	46bd      	mov	sp, r7
20007314:	f85d 7b04 	ldr.w	r7, [sp], #4
20007318:	4770      	bx	lr
2000731a:	bf00      	nop
2000731c:	40023800 	.word	0x40023800
20007320:	00bb8000 	.word	0x00bb8000
20007324:	017d7840 	.word	0x017d7840
20007328:	00f42400 	.word	0x00f42400

2000732c <HAL_RCCEx_SelectLSEMode>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode selection
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode selection
  * @retval None
  */
void HAL_RCCEx_SelectLSEMode(uint8_t Mode)
{
2000732c:	b480      	push	{r7}
2000732e:	b083      	sub	sp, #12
20007330:	af00      	add	r7, sp, #0
20007332:	4603      	mov	r3, r0
20007334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(Mode));
  if (Mode == RCC_LSE_HIGHDRIVE_MODE)
20007336:	79fb      	ldrb	r3, [r7, #7]
20007338:	2b01      	cmp	r3, #1
2000733a:	d106      	bne.n	2000734a <HAL_RCCEx_SelectLSEMode+0x1e>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2000733c:	4b09      	ldr	r3, [pc, #36]	@ (20007364 <HAL_RCCEx_SelectLSEMode+0x38>)
2000733e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
20007340:	4a08      	ldr	r2, [pc, #32]	@ (20007364 <HAL_RCCEx_SelectLSEMode+0x38>)
20007342:	f043 0308 	orr.w	r3, r3, #8
20007346:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
20007348:	e005      	b.n	20007356 <HAL_RCCEx_SelectLSEMode+0x2a>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2000734a:	4b06      	ldr	r3, [pc, #24]	@ (20007364 <HAL_RCCEx_SelectLSEMode+0x38>)
2000734c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2000734e:	4a05      	ldr	r2, [pc, #20]	@ (20007364 <HAL_RCCEx_SelectLSEMode+0x38>)
20007350:	f023 0308 	bic.w	r3, r3, #8
20007354:	6713      	str	r3, [r2, #112]	@ 0x70
}
20007356:	bf00      	nop
20007358:	370c      	adds	r7, #12
2000735a:	46bd      	mov	sp, r7
2000735c:	f85d 7b04 	ldr.w	r7, [sp], #4
20007360:	4770      	bx	lr
20007362:	bf00      	nop
20007364:	40023800 	.word	0x40023800

20007368 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
20007368:	b580      	push	{r7, lr}
2000736a:	b084      	sub	sp, #16
2000736c:	af00      	add	r7, sp, #0
2000736e:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
20007370:	4b1e      	ldr	r3, [pc, #120]	@ (200073ec <HAL_RCCEx_EnablePLLI2S+0x84>)
20007372:	2200      	movs	r2, #0
20007374:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
20007376:	f7f9 fb4e 	bl	20000a16 <HAL_GetTick>
2000737a:	60f8      	str	r0, [r7, #12]
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
2000737c:	e008      	b.n	20007390 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2000737e:	f7f9 fb4a 	bl	20000a16 <HAL_GetTick>
20007382:	4602      	mov	r2, r0
20007384:	68fb      	ldr	r3, [r7, #12]
20007386:	1ad3      	subs	r3, r2, r3
20007388:	2b02      	cmp	r3, #2
2000738a:	d901      	bls.n	20007390 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
2000738c:	2303      	movs	r3, #3
2000738e:	e029      	b.n	200073e4 <HAL_RCCEx_EnablePLLI2S+0x7c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
20007390:	4b17      	ldr	r3, [pc, #92]	@ (200073f0 <HAL_RCCEx_EnablePLLI2S+0x88>)
20007392:	681b      	ldr	r3, [r3, #0]
20007394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20007398:	2b00      	cmp	r3, #0
2000739a:	d1f0      	bne.n	2000737e <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_SAICLK_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
#elif defined(STM32F411xE)
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
2000739c:	687b      	ldr	r3, [r7, #4]
2000739e:	681a      	ldr	r2, [r3, #0]
200073a0:	687b      	ldr	r3, [r7, #4]
200073a2:	685b      	ldr	r3, [r3, #4]
200073a4:	019b      	lsls	r3, r3, #6
200073a6:	431a      	orrs	r2, r3
200073a8:	687b      	ldr	r3, [r7, #4]
200073aa:	689b      	ldr	r3, [r3, #8]
200073ac:	071b      	lsls	r3, r3, #28
200073ae:	4910      	ldr	r1, [pc, #64]	@ (200073f0 <HAL_RCCEx_EnablePLLI2S+0x88>)
200073b0:	4313      	orrs	r3, r2
200073b2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
200073b6:	4b0d      	ldr	r3, [pc, #52]	@ (200073ec <HAL_RCCEx_EnablePLLI2S+0x84>)
200073b8:	2201      	movs	r2, #1
200073ba:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
200073bc:	f7f9 fb2b 	bl	20000a16 <HAL_GetTick>
200073c0:	60f8      	str	r0, [r7, #12]
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
200073c2:	e008      	b.n	200073d6 <HAL_RCCEx_EnablePLLI2S+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
200073c4:	f7f9 fb27 	bl	20000a16 <HAL_GetTick>
200073c8:	4602      	mov	r2, r0
200073ca:	68fb      	ldr	r3, [r7, #12]
200073cc:	1ad3      	subs	r3, r2, r3
200073ce:	2b02      	cmp	r3, #2
200073d0:	d901      	bls.n	200073d6 <HAL_RCCEx_EnablePLLI2S+0x6e>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
200073d2:	2303      	movs	r3, #3
200073d4:	e006      	b.n	200073e4 <HAL_RCCEx_EnablePLLI2S+0x7c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
200073d6:	4b06      	ldr	r3, [pc, #24]	@ (200073f0 <HAL_RCCEx_EnablePLLI2S+0x88>)
200073d8:	681b      	ldr	r3, [r3, #0]
200073da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
200073de:	2b00      	cmp	r3, #0
200073e0:	d0f0      	beq.n	200073c4 <HAL_RCCEx_EnablePLLI2S+0x5c>
    }
  }

  return HAL_OK;
200073e2:	2300      	movs	r3, #0
}
200073e4:	4618      	mov	r0, r3
200073e6:	3710      	adds	r7, #16
200073e8:	46bd      	mov	sp, r7
200073ea:	bd80      	pop	{r7, pc}
200073ec:	42470068 	.word	0x42470068
200073f0:	40023800 	.word	0x40023800

200073f4 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
200073f4:	b580      	push	{r7, lr}
200073f6:	b082      	sub	sp, #8
200073f8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
200073fa:	4b0d      	ldr	r3, [pc, #52]	@ (20007430 <HAL_RCCEx_DisablePLLI2S+0x3c>)
200073fc:	2200      	movs	r2, #0
200073fe:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
20007400:	f7f9 fb09 	bl	20000a16 <HAL_GetTick>
20007404:	6078      	str	r0, [r7, #4]
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20007406:	e008      	b.n	2000741a <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20007408:	f7f9 fb05 	bl	20000a16 <HAL_GetTick>
2000740c:	4602      	mov	r2, r0
2000740e:	687b      	ldr	r3, [r7, #4]
20007410:	1ad3      	subs	r3, r2, r3
20007412:	2b02      	cmp	r3, #2
20007414:	d901      	bls.n	2000741a <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20007416:	2303      	movs	r3, #3
20007418:	e006      	b.n	20007428 <HAL_RCCEx_DisablePLLI2S+0x34>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2000741a:	4b06      	ldr	r3, [pc, #24]	@ (20007434 <HAL_RCCEx_DisablePLLI2S+0x40>)
2000741c:	681b      	ldr	r3, [r3, #0]
2000741e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
20007422:	2b00      	cmp	r3, #0
20007424:	d1f0      	bne.n	20007408 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
20007426:	2300      	movs	r3, #0
}
20007428:	4618      	mov	r0, r3
2000742a:	3708      	adds	r7, #8
2000742c:	46bd      	mov	sp, r7
2000742e:	bd80      	pop	{r7, pc}
20007430:	42470068 	.word	0x42470068
20007434:	40023800 	.word	0x40023800

20007438 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
20007438:	b580      	push	{r7, lr}
2000743a:	b082      	sub	sp, #8
2000743c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2000743e:	f7f9 faea 	bl	20000a16 <HAL_GetTick>
20007442:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
20007444:	4b5d      	ldr	r3, [pc, #372]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007446:	681b      	ldr	r3, [r3, #0]
20007448:	4a5c      	ldr	r2, [pc, #368]	@ (200075bc <HAL_RCC_DeInit+0x184>)
2000744a:	f043 0301 	orr.w	r3, r3, #1
2000744e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
20007450:	e008      	b.n	20007464 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20007452:	f7f9 fae0 	bl	20000a16 <HAL_GetTick>
20007456:	4602      	mov	r2, r0
20007458:	687b      	ldr	r3, [r7, #4]
2000745a:	1ad3      	subs	r3, r2, r3
2000745c:	2b02      	cmp	r3, #2
2000745e:	d901      	bls.n	20007464 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
20007460:	2303      	movs	r3, #3
20007462:	e0a7      	b.n	200075b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
20007464:	4b55      	ldr	r3, [pc, #340]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007466:	681b      	ldr	r3, [r3, #0]
20007468:	f003 0302 	and.w	r3, r3, #2
2000746c:	2b00      	cmp	r3, #0
2000746e:	d0f0      	beq.n	20007452 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
20007470:	4b52      	ldr	r3, [pc, #328]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007472:	681b      	ldr	r3, [r3, #0]
20007474:	4a51      	ldr	r2, [pc, #324]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
2000747a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2000747c:	f7f9 facb 	bl	20000a16 <HAL_GetTick>
20007480:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
20007482:	4b4e      	ldr	r3, [pc, #312]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007484:	2200      	movs	r2, #0
20007486:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
20007488:	e00a      	b.n	200074a0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2000748a:	f7f9 fac4 	bl	20000a16 <HAL_GetTick>
2000748e:	4602      	mov	r2, r0
20007490:	687b      	ldr	r3, [r7, #4]
20007492:	1ad3      	subs	r3, r2, r3
20007494:	f241 3288 	movw	r2, #5000	@ 0x1388
20007498:	4293      	cmp	r3, r2
2000749a:	d901      	bls.n	200074a0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
2000749c:	2303      	movs	r3, #3
2000749e:	e089      	b.n	200075b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
200074a0:	4b46      	ldr	r3, [pc, #280]	@ (200075bc <HAL_RCC_DeInit+0x184>)
200074a2:	689b      	ldr	r3, [r3, #8]
200074a4:	f003 030c 	and.w	r3, r3, #12
200074a8:	2b00      	cmp	r3, #0
200074aa:	d1ee      	bne.n	2000748a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
200074ac:	f7f9 fab3 	bl	20000a16 <HAL_GetTick>
200074b0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
200074b2:	4b42      	ldr	r3, [pc, #264]	@ (200075bc <HAL_RCC_DeInit+0x184>)
200074b4:	681b      	ldr	r3, [r3, #0]
200074b6:	4a41      	ldr	r2, [pc, #260]	@ (200075bc <HAL_RCC_DeInit+0x184>)
200074b8:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
200074bc:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
200074be:	e008      	b.n	200074d2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
200074c0:	f7f9 faa9 	bl	20000a16 <HAL_GetTick>
200074c4:	4602      	mov	r2, r0
200074c6:	687b      	ldr	r3, [r7, #4]
200074c8:	1ad3      	subs	r3, r2, r3
200074ca:	2b64      	cmp	r3, #100	@ 0x64
200074cc:	d901      	bls.n	200074d2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
200074ce:	2303      	movs	r3, #3
200074d0:	e070      	b.n	200075b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
200074d2:	4b3a      	ldr	r3, [pc, #232]	@ (200075bc <HAL_RCC_DeInit+0x184>)
200074d4:	681b      	ldr	r3, [r3, #0]
200074d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
200074da:	2b00      	cmp	r3, #0
200074dc:	d1f0      	bne.n	200074c0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
200074de:	f7f9 fa9a 	bl	20000a16 <HAL_GetTick>
200074e2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
200074e4:	4b35      	ldr	r3, [pc, #212]	@ (200075bc <HAL_RCC_DeInit+0x184>)
200074e6:	681b      	ldr	r3, [r3, #0]
200074e8:	4a34      	ldr	r2, [pc, #208]	@ (200075bc <HAL_RCC_DeInit+0x184>)
200074ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
200074ee:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
200074f0:	e008      	b.n	20007504 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
200074f2:	f7f9 fa90 	bl	20000a16 <HAL_GetTick>
200074f6:	4602      	mov	r2, r0
200074f8:	687b      	ldr	r3, [r7, #4]
200074fa:	1ad3      	subs	r3, r2, r3
200074fc:	2b02      	cmp	r3, #2
200074fe:	d901      	bls.n	20007504 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
20007500:	2303      	movs	r3, #3
20007502:	e057      	b.n	200075b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
20007504:	4b2d      	ldr	r3, [pc, #180]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007506:	681b      	ldr	r3, [r3, #0]
20007508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2000750c:	2b00      	cmp	r3, #0
2000750e:	d1f0      	bne.n	200074f2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
20007510:	f7f9 fa81 	bl	20000a16 <HAL_GetTick>
20007514:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
20007516:	4b29      	ldr	r3, [pc, #164]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007518:	681b      	ldr	r3, [r3, #0]
2000751a:	4a28      	ldr	r2, [pc, #160]	@ (200075bc <HAL_RCC_DeInit+0x184>)
2000751c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
20007520:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20007522:	e008      	b.n	20007536 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20007524:	f7f9 fa77 	bl	20000a16 <HAL_GetTick>
20007528:	4602      	mov	r2, r0
2000752a:	687b      	ldr	r3, [r7, #4]
2000752c:	1ad3      	subs	r3, r2, r3
2000752e:	2b02      	cmp	r3, #2
20007530:	d901      	bls.n	20007536 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
20007532:	2303      	movs	r3, #3
20007534:	e03e      	b.n	200075b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20007536:	4b21      	ldr	r3, [pc, #132]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007538:	681b      	ldr	r3, [r3, #0]
2000753a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
2000753e:	2b00      	cmp	r3, #0
20007540:	d1f0      	bne.n	20007524 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
20007542:	4b1e      	ldr	r3, [pc, #120]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007544:	4a1e      	ldr	r2, [pc, #120]	@ (200075c0 <HAL_RCC_DeInit+0x188>)
20007546:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
20007548:	4b1c      	ldr	r3, [pc, #112]	@ (200075bc <HAL_RCC_DeInit+0x184>)
2000754a:	4a1e      	ldr	r2, [pc, #120]	@ (200075c4 <HAL_RCC_DeInit+0x18c>)
2000754c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
20007550:	4b1a      	ldr	r3, [pc, #104]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007552:	68db      	ldr	r3, [r3, #12]
20007554:	4a19      	ldr	r2, [pc, #100]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007556:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
2000755a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
2000755c:	4b17      	ldr	r3, [pc, #92]	@ (200075bc <HAL_RCC_DeInit+0x184>)
2000755e:	68db      	ldr	r3, [r3, #12]
20007560:	4a16      	ldr	r2, [pc, #88]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007562:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
20007566:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
20007568:	4b14      	ldr	r3, [pc, #80]	@ (200075bc <HAL_RCC_DeInit+0x184>)
2000756a:	68db      	ldr	r3, [r3, #12]
2000756c:	4a13      	ldr	r2, [pc, #76]	@ (200075bc <HAL_RCC_DeInit+0x184>)
2000756e:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
20007572:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
20007574:	4b11      	ldr	r3, [pc, #68]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007576:	68db      	ldr	r3, [r3, #12]
20007578:	4a10      	ldr	r2, [pc, #64]	@ (200075bc <HAL_RCC_DeInit+0x184>)
2000757a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
2000757e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
20007580:	4b0e      	ldr	r3, [pc, #56]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20007584:	4a0d      	ldr	r2, [pc, #52]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007586:	f023 0301 	bic.w	r3, r3, #1
2000758a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
2000758c:	4b0b      	ldr	r3, [pc, #44]	@ (200075bc <HAL_RCC_DeInit+0x184>)
2000758e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
20007590:	4a0a      	ldr	r2, [pc, #40]	@ (200075bc <HAL_RCC_DeInit+0x184>)
20007592:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
20007596:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
20007598:	4b0b      	ldr	r3, [pc, #44]	@ (200075c8 <HAL_RCC_DeInit+0x190>)
2000759a:	4a0c      	ldr	r2, [pc, #48]	@ (200075cc <HAL_RCC_DeInit+0x194>)
2000759c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
2000759e:	4b0c      	ldr	r3, [pc, #48]	@ (200075d0 <HAL_RCC_DeInit+0x198>)
200075a0:	681b      	ldr	r3, [r3, #0]
200075a2:	4618      	mov	r0, r3
200075a4:	f7f9 fa4a 	bl	20000a3c <HAL_InitTick>
200075a8:	4603      	mov	r3, r0
200075aa:	2b00      	cmp	r3, #0
200075ac:	d001      	beq.n	200075b2 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
200075ae:	2301      	movs	r3, #1
200075b0:	e000      	b.n	200075b4 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
200075b2:	2300      	movs	r3, #0
  }
}
200075b4:	4618      	mov	r0, r3
200075b6:	3708      	adds	r7, #8
200075b8:	46bd      	mov	sp, r7
200075ba:	bd80      	pop	{r7, pc}
200075bc:	40023800 	.word	0x40023800
200075c0:	04003010 	.word	0x04003010
200075c4:	20003010 	.word	0x20003010
200075c8:	200003b0 	.word	0x200003b0
200075cc:	00f42400 	.word	0x00f42400
200075d0:	200003b4 	.word	0x200003b4

200075d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
200075d4:	b580      	push	{r7, lr}
200075d6:	b082      	sub	sp, #8
200075d8:	af00      	add	r7, sp, #0
200075da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
200075dc:	687b      	ldr	r3, [r7, #4]
200075de:	2b00      	cmp	r3, #0
200075e0:	d101      	bne.n	200075e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
200075e2:	2301      	movs	r3, #1
200075e4:	e07b      	b.n	200076de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
200075e6:	687b      	ldr	r3, [r7, #4]
200075e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200075ea:	2b00      	cmp	r3, #0
200075ec:	d108      	bne.n	20007600 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
200075ee:	687b      	ldr	r3, [r7, #4]
200075f0:	685b      	ldr	r3, [r3, #4]
200075f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
200075f6:	d009      	beq.n	2000760c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
200075f8:	687b      	ldr	r3, [r7, #4]
200075fa:	2200      	movs	r2, #0
200075fc:	61da      	str	r2, [r3, #28]
200075fe:	e005      	b.n	2000760c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
20007600:	687b      	ldr	r3, [r7, #4]
20007602:	2200      	movs	r2, #0
20007604:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
20007606:	687b      	ldr	r3, [r7, #4]
20007608:	2200      	movs	r2, #0
2000760a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2000760c:	687b      	ldr	r3, [r7, #4]
2000760e:	2200      	movs	r2, #0
20007610:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
20007612:	687b      	ldr	r3, [r7, #4]
20007614:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20007618:	b2db      	uxtb	r3, r3
2000761a:	2b00      	cmp	r3, #0
2000761c:	d106      	bne.n	2000762c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
2000761e:	687b      	ldr	r3, [r7, #4]
20007620:	2200      	movs	r2, #0
20007622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
20007626:	6878      	ldr	r0, [r7, #4]
20007628:	f7f9 fd26 	bl	20001078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
2000762c:	687b      	ldr	r3, [r7, #4]
2000762e:	2202      	movs	r2, #2
20007630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
20007634:	687b      	ldr	r3, [r7, #4]
20007636:	681b      	ldr	r3, [r3, #0]
20007638:	681a      	ldr	r2, [r3, #0]
2000763a:	687b      	ldr	r3, [r7, #4]
2000763c:	681b      	ldr	r3, [r3, #0]
2000763e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20007642:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
20007644:	687b      	ldr	r3, [r7, #4]
20007646:	685b      	ldr	r3, [r3, #4]
20007648:	f403 7282 	and.w	r2, r3, #260	@ 0x104
2000764c:	687b      	ldr	r3, [r7, #4]
2000764e:	689b      	ldr	r3, [r3, #8]
20007650:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
20007654:	431a      	orrs	r2, r3
20007656:	687b      	ldr	r3, [r7, #4]
20007658:	68db      	ldr	r3, [r3, #12]
2000765a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
2000765e:	431a      	orrs	r2, r3
20007660:	687b      	ldr	r3, [r7, #4]
20007662:	691b      	ldr	r3, [r3, #16]
20007664:	f003 0302 	and.w	r3, r3, #2
20007668:	431a      	orrs	r2, r3
2000766a:	687b      	ldr	r3, [r7, #4]
2000766c:	695b      	ldr	r3, [r3, #20]
2000766e:	f003 0301 	and.w	r3, r3, #1
20007672:	431a      	orrs	r2, r3
20007674:	687b      	ldr	r3, [r7, #4]
20007676:	699b      	ldr	r3, [r3, #24]
20007678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
2000767c:	431a      	orrs	r2, r3
2000767e:	687b      	ldr	r3, [r7, #4]
20007680:	69db      	ldr	r3, [r3, #28]
20007682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
20007686:	431a      	orrs	r2, r3
20007688:	687b      	ldr	r3, [r7, #4]
2000768a:	6a1b      	ldr	r3, [r3, #32]
2000768c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20007690:	ea42 0103 	orr.w	r1, r2, r3
20007694:	687b      	ldr	r3, [r7, #4]
20007696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20007698:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
2000769c:	687b      	ldr	r3, [r7, #4]
2000769e:	681b      	ldr	r3, [r3, #0]
200076a0:	430a      	orrs	r2, r1
200076a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
200076a4:	687b      	ldr	r3, [r7, #4]
200076a6:	699b      	ldr	r3, [r3, #24]
200076a8:	0c1b      	lsrs	r3, r3, #16
200076aa:	f003 0104 	and.w	r1, r3, #4
200076ae:	687b      	ldr	r3, [r7, #4]
200076b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
200076b2:	f003 0210 	and.w	r2, r3, #16
200076b6:	687b      	ldr	r3, [r7, #4]
200076b8:	681b      	ldr	r3, [r3, #0]
200076ba:	430a      	orrs	r2, r1
200076bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
200076be:	687b      	ldr	r3, [r7, #4]
200076c0:	681b      	ldr	r3, [r3, #0]
200076c2:	69da      	ldr	r2, [r3, #28]
200076c4:	687b      	ldr	r3, [r7, #4]
200076c6:	681b      	ldr	r3, [r3, #0]
200076c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
200076cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
200076ce:	687b      	ldr	r3, [r7, #4]
200076d0:	2200      	movs	r2, #0
200076d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
200076d4:	687b      	ldr	r3, [r7, #4]
200076d6:	2201      	movs	r2, #1
200076d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
200076dc:	2300      	movs	r3, #0
}
200076de:	4618      	mov	r0, r3
200076e0:	3708      	adds	r7, #8
200076e2:	46bd      	mov	sp, r7
200076e4:	bd80      	pop	{r7, pc}

200076e6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
200076e6:	b580      	push	{r7, lr}
200076e8:	b082      	sub	sp, #8
200076ea:	af00      	add	r7, sp, #0
200076ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
200076ee:	687b      	ldr	r3, [r7, #4]
200076f0:	2b00      	cmp	r3, #0
200076f2:	d101      	bne.n	200076f8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
200076f4:	2301      	movs	r3, #1
200076f6:	e01a      	b.n	2000772e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
200076f8:	687b      	ldr	r3, [r7, #4]
200076fa:	2202      	movs	r2, #2
200076fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
20007700:	687b      	ldr	r3, [r7, #4]
20007702:	681b      	ldr	r3, [r3, #0]
20007704:	681a      	ldr	r2, [r3, #0]
20007706:	687b      	ldr	r3, [r7, #4]
20007708:	681b      	ldr	r3, [r3, #0]
2000770a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
2000770e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
20007710:	6878      	ldr	r0, [r7, #4]
20007712:	f7f9 fcf9 	bl	20001108 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20007716:	687b      	ldr	r3, [r7, #4]
20007718:	2200      	movs	r2, #0
2000771a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
2000771c:	687b      	ldr	r3, [r7, #4]
2000771e:	2200      	movs	r2, #0
20007720:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
20007724:	687b      	ldr	r3, [r7, #4]
20007726:	2200      	movs	r2, #0
20007728:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
2000772c:	2300      	movs	r3, #0
}
2000772e:	4618      	mov	r0, r3
20007730:	3708      	adds	r7, #8
20007732:	46bd      	mov	sp, r7
20007734:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
20007736:	b480      	push	{r7}
20007738:	b083      	sub	sp, #12
2000773a:	af00      	add	r7, sp, #0
2000773c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
2000773e:	bf00      	nop
20007740:	370c      	adds	r7, #12
20007742:	46bd      	mov	sp, r7
20007744:	f85d 7b04 	ldr.w	r7, [sp], #4
20007748:	4770      	bx	lr
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
2000774a:	b480      	push	{r7}
2000774c:	b083      	sub	sp, #12
2000774e:	af00      	add	r7, sp, #0
20007750:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
20007752:	bf00      	nop
20007754:	370c      	adds	r7, #12
20007756:	46bd      	mov	sp, r7
20007758:	f85d 7b04 	ldr.w	r7, [sp], #4
2000775c:	4770      	bx	lr

2000775e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2000775e:	b580      	push	{r7, lr}
20007760:	b088      	sub	sp, #32
20007762:	af00      	add	r7, sp, #0
20007764:	60f8      	str	r0, [r7, #12]
20007766:	60b9      	str	r1, [r7, #8]
20007768:	603b      	str	r3, [r7, #0]
2000776a:	4613      	mov	r3, r2
2000776c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2000776e:	f7f9 f952 	bl	20000a16 <HAL_GetTick>
20007772:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
20007774:	88fb      	ldrh	r3, [r7, #6]
20007776:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
20007778:	68fb      	ldr	r3, [r7, #12]
2000777a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
2000777e:	b2db      	uxtb	r3, r3
20007780:	2b01      	cmp	r3, #1
20007782:	d001      	beq.n	20007788 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
20007784:	2302      	movs	r3, #2
20007786:	e12a      	b.n	200079de <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
20007788:	68bb      	ldr	r3, [r7, #8]
2000778a:	2b00      	cmp	r3, #0
2000778c:	d002      	beq.n	20007794 <HAL_SPI_Transmit+0x36>
2000778e:	88fb      	ldrh	r3, [r7, #6]
20007790:	2b00      	cmp	r3, #0
20007792:	d101      	bne.n	20007798 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
20007794:	2301      	movs	r3, #1
20007796:	e122      	b.n	200079de <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
20007798:	68fb      	ldr	r3, [r7, #12]
2000779a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
2000779e:	2b01      	cmp	r3, #1
200077a0:	d101      	bne.n	200077a6 <HAL_SPI_Transmit+0x48>
200077a2:	2302      	movs	r3, #2
200077a4:	e11b      	b.n	200079de <HAL_SPI_Transmit+0x280>
200077a6:	68fb      	ldr	r3, [r7, #12]
200077a8:	2201      	movs	r2, #1
200077aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
200077ae:	68fb      	ldr	r3, [r7, #12]
200077b0:	2203      	movs	r2, #3
200077b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200077b6:	68fb      	ldr	r3, [r7, #12]
200077b8:	2200      	movs	r2, #0
200077ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
200077bc:	68fb      	ldr	r3, [r7, #12]
200077be:	68ba      	ldr	r2, [r7, #8]
200077c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
200077c2:	68fb      	ldr	r3, [r7, #12]
200077c4:	88fa      	ldrh	r2, [r7, #6]
200077c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
200077c8:	68fb      	ldr	r3, [r7, #12]
200077ca:	88fa      	ldrh	r2, [r7, #6]
200077cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
200077ce:	68fb      	ldr	r3, [r7, #12]
200077d0:	2200      	movs	r2, #0
200077d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
200077d4:	68fb      	ldr	r3, [r7, #12]
200077d6:	2200      	movs	r2, #0
200077d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
200077da:	68fb      	ldr	r3, [r7, #12]
200077dc:	2200      	movs	r2, #0
200077de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
200077e0:	68fb      	ldr	r3, [r7, #12]
200077e2:	2200      	movs	r2, #0
200077e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
200077e6:	68fb      	ldr	r3, [r7, #12]
200077e8:	2200      	movs	r2, #0
200077ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
200077ec:	68fb      	ldr	r3, [r7, #12]
200077ee:	689b      	ldr	r3, [r3, #8]
200077f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
200077f4:	d10f      	bne.n	20007816 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
200077f6:	68fb      	ldr	r3, [r7, #12]
200077f8:	681b      	ldr	r3, [r3, #0]
200077fa:	681a      	ldr	r2, [r3, #0]
200077fc:	68fb      	ldr	r3, [r7, #12]
200077fe:	681b      	ldr	r3, [r3, #0]
20007800:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20007804:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
20007806:	68fb      	ldr	r3, [r7, #12]
20007808:	681b      	ldr	r3, [r3, #0]
2000780a:	681a      	ldr	r2, [r3, #0]
2000780c:	68fb      	ldr	r3, [r7, #12]
2000780e:	681b      	ldr	r3, [r3, #0]
20007810:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
20007814:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20007816:	68fb      	ldr	r3, [r7, #12]
20007818:	681b      	ldr	r3, [r3, #0]
2000781a:	681b      	ldr	r3, [r3, #0]
2000781c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20007820:	2b40      	cmp	r3, #64	@ 0x40
20007822:	d007      	beq.n	20007834 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007824:	68fb      	ldr	r3, [r7, #12]
20007826:	681b      	ldr	r3, [r3, #0]
20007828:	681a      	ldr	r2, [r3, #0]
2000782a:	68fb      	ldr	r3, [r7, #12]
2000782c:	681b      	ldr	r3, [r3, #0]
2000782e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20007832:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
20007834:	68fb      	ldr	r3, [r7, #12]
20007836:	68db      	ldr	r3, [r3, #12]
20007838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
2000783c:	d152      	bne.n	200078e4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
2000783e:	68fb      	ldr	r3, [r7, #12]
20007840:	685b      	ldr	r3, [r3, #4]
20007842:	2b00      	cmp	r3, #0
20007844:	d002      	beq.n	2000784c <HAL_SPI_Transmit+0xee>
20007846:	8b7b      	ldrh	r3, [r7, #26]
20007848:	2b01      	cmp	r3, #1
2000784a:	d145      	bne.n	200078d8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
2000784c:	68fb      	ldr	r3, [r7, #12]
2000784e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20007850:	881a      	ldrh	r2, [r3, #0]
20007852:	68fb      	ldr	r3, [r7, #12]
20007854:	681b      	ldr	r3, [r3, #0]
20007856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
20007858:	68fb      	ldr	r3, [r7, #12]
2000785a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000785c:	1c9a      	adds	r2, r3, #2
2000785e:	68fb      	ldr	r3, [r7, #12]
20007860:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
20007862:	68fb      	ldr	r3, [r7, #12]
20007864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20007866:	b29b      	uxth	r3, r3
20007868:	3b01      	subs	r3, #1
2000786a:	b29a      	uxth	r2, r3
2000786c:	68fb      	ldr	r3, [r7, #12]
2000786e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
20007870:	e032      	b.n	200078d8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20007872:	68fb      	ldr	r3, [r7, #12]
20007874:	681b      	ldr	r3, [r3, #0]
20007876:	689b      	ldr	r3, [r3, #8]
20007878:	f003 0302 	and.w	r3, r3, #2
2000787c:	2b02      	cmp	r3, #2
2000787e:	d112      	bne.n	200078a6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
20007880:	68fb      	ldr	r3, [r7, #12]
20007882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20007884:	881a      	ldrh	r2, [r3, #0]
20007886:	68fb      	ldr	r3, [r7, #12]
20007888:	681b      	ldr	r3, [r3, #0]
2000788a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
2000788c:	68fb      	ldr	r3, [r7, #12]
2000788e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20007890:	1c9a      	adds	r2, r3, #2
20007892:	68fb      	ldr	r3, [r7, #12]
20007894:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
20007896:	68fb      	ldr	r3, [r7, #12]
20007898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
2000789a:	b29b      	uxth	r3, r3
2000789c:	3b01      	subs	r3, #1
2000789e:	b29a      	uxth	r2, r3
200078a0:	68fb      	ldr	r3, [r7, #12]
200078a2:	86da      	strh	r2, [r3, #54]	@ 0x36
200078a4:	e018      	b.n	200078d8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
200078a6:	f7f9 f8b6 	bl	20000a16 <HAL_GetTick>
200078aa:	4602      	mov	r2, r0
200078ac:	69fb      	ldr	r3, [r7, #28]
200078ae:	1ad3      	subs	r3, r2, r3
200078b0:	683a      	ldr	r2, [r7, #0]
200078b2:	429a      	cmp	r2, r3
200078b4:	d803      	bhi.n	200078be <HAL_SPI_Transmit+0x160>
200078b6:	683b      	ldr	r3, [r7, #0]
200078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
200078bc:	d102      	bne.n	200078c4 <HAL_SPI_Transmit+0x166>
200078be:	683b      	ldr	r3, [r7, #0]
200078c0:	2b00      	cmp	r3, #0
200078c2:	d109      	bne.n	200078d8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
200078c4:	68fb      	ldr	r3, [r7, #12]
200078c6:	2201      	movs	r2, #1
200078c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
200078cc:	68fb      	ldr	r3, [r7, #12]
200078ce:	2200      	movs	r2, #0
200078d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
200078d4:	2303      	movs	r3, #3
200078d6:	e082      	b.n	200079de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
200078d8:	68fb      	ldr	r3, [r7, #12]
200078da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
200078dc:	b29b      	uxth	r3, r3
200078de:	2b00      	cmp	r3, #0
200078e0:	d1c7      	bne.n	20007872 <HAL_SPI_Transmit+0x114>
200078e2:	e053      	b.n	2000798c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200078e4:	68fb      	ldr	r3, [r7, #12]
200078e6:	685b      	ldr	r3, [r3, #4]
200078e8:	2b00      	cmp	r3, #0
200078ea:	d002      	beq.n	200078f2 <HAL_SPI_Transmit+0x194>
200078ec:	8b7b      	ldrh	r3, [r7, #26]
200078ee:	2b01      	cmp	r3, #1
200078f0:	d147      	bne.n	20007982 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
200078f2:	68fb      	ldr	r3, [r7, #12]
200078f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
200078f6:	68fb      	ldr	r3, [r7, #12]
200078f8:	681b      	ldr	r3, [r3, #0]
200078fa:	330c      	adds	r3, #12
200078fc:	7812      	ldrb	r2, [r2, #0]
200078fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
20007900:	68fb      	ldr	r3, [r7, #12]
20007902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20007904:	1c5a      	adds	r2, r3, #1
20007906:	68fb      	ldr	r3, [r7, #12]
20007908:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
2000790a:	68fb      	ldr	r3, [r7, #12]
2000790c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
2000790e:	b29b      	uxth	r3, r3
20007910:	3b01      	subs	r3, #1
20007912:	b29a      	uxth	r2, r3
20007914:	68fb      	ldr	r3, [r7, #12]
20007916:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
20007918:	e033      	b.n	20007982 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
2000791a:	68fb      	ldr	r3, [r7, #12]
2000791c:	681b      	ldr	r3, [r3, #0]
2000791e:	689b      	ldr	r3, [r3, #8]
20007920:	f003 0302 	and.w	r3, r3, #2
20007924:	2b02      	cmp	r3, #2
20007926:	d113      	bne.n	20007950 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
20007928:	68fb      	ldr	r3, [r7, #12]
2000792a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
2000792c:	68fb      	ldr	r3, [r7, #12]
2000792e:	681b      	ldr	r3, [r3, #0]
20007930:	330c      	adds	r3, #12
20007932:	7812      	ldrb	r2, [r2, #0]
20007934:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
20007936:	68fb      	ldr	r3, [r7, #12]
20007938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000793a:	1c5a      	adds	r2, r3, #1
2000793c:	68fb      	ldr	r3, [r7, #12]
2000793e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
20007940:	68fb      	ldr	r3, [r7, #12]
20007942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20007944:	b29b      	uxth	r3, r3
20007946:	3b01      	subs	r3, #1
20007948:	b29a      	uxth	r2, r3
2000794a:	68fb      	ldr	r3, [r7, #12]
2000794c:	86da      	strh	r2, [r3, #54]	@ 0x36
2000794e:	e018      	b.n	20007982 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20007950:	f7f9 f861 	bl	20000a16 <HAL_GetTick>
20007954:	4602      	mov	r2, r0
20007956:	69fb      	ldr	r3, [r7, #28]
20007958:	1ad3      	subs	r3, r2, r3
2000795a:	683a      	ldr	r2, [r7, #0]
2000795c:	429a      	cmp	r2, r3
2000795e:	d803      	bhi.n	20007968 <HAL_SPI_Transmit+0x20a>
20007960:	683b      	ldr	r3, [r7, #0]
20007962:	f1b3 3fff 	cmp.w	r3, #4294967295
20007966:	d102      	bne.n	2000796e <HAL_SPI_Transmit+0x210>
20007968:	683b      	ldr	r3, [r7, #0]
2000796a:	2b00      	cmp	r3, #0
2000796c:	d109      	bne.n	20007982 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
2000796e:	68fb      	ldr	r3, [r7, #12]
20007970:	2201      	movs	r2, #1
20007972:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
20007976:	68fb      	ldr	r3, [r7, #12]
20007978:	2200      	movs	r2, #0
2000797a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
2000797e:	2303      	movs	r3, #3
20007980:	e02d      	b.n	200079de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
20007982:	68fb      	ldr	r3, [r7, #12]
20007984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20007986:	b29b      	uxth	r3, r3
20007988:	2b00      	cmp	r3, #0
2000798a:	d1c6      	bne.n	2000791a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
2000798c:	69fa      	ldr	r2, [r7, #28]
2000798e:	6839      	ldr	r1, [r7, #0]
20007990:	68f8      	ldr	r0, [r7, #12]
20007992:	f001 ff23 	bl	200097dc <SPI_EndRxTxTransaction>
20007996:	4603      	mov	r3, r0
20007998:	2b00      	cmp	r3, #0
2000799a:	d002      	beq.n	200079a2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
2000799c:	68fb      	ldr	r3, [r7, #12]
2000799e:	2220      	movs	r2, #32
200079a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
200079a2:	68fb      	ldr	r3, [r7, #12]
200079a4:	689b      	ldr	r3, [r3, #8]
200079a6:	2b00      	cmp	r3, #0
200079a8:	d10a      	bne.n	200079c0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
200079aa:	2300      	movs	r3, #0
200079ac:	617b      	str	r3, [r7, #20]
200079ae:	68fb      	ldr	r3, [r7, #12]
200079b0:	681b      	ldr	r3, [r3, #0]
200079b2:	68db      	ldr	r3, [r3, #12]
200079b4:	617b      	str	r3, [r7, #20]
200079b6:	68fb      	ldr	r3, [r7, #12]
200079b8:	681b      	ldr	r3, [r3, #0]
200079ba:	689b      	ldr	r3, [r3, #8]
200079bc:	617b      	str	r3, [r7, #20]
200079be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
200079c0:	68fb      	ldr	r3, [r7, #12]
200079c2:	2201      	movs	r2, #1
200079c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
200079c8:	68fb      	ldr	r3, [r7, #12]
200079ca:	2200      	movs	r2, #0
200079cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
200079d0:	68fb      	ldr	r3, [r7, #12]
200079d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200079d4:	2b00      	cmp	r3, #0
200079d6:	d001      	beq.n	200079dc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
200079d8:	2301      	movs	r3, #1
200079da:	e000      	b.n	200079de <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
200079dc:	2300      	movs	r3, #0
  }
}
200079de:	4618      	mov	r0, r3
200079e0:	3720      	adds	r7, #32
200079e2:	46bd      	mov	sp, r7
200079e4:	bd80      	pop	{r7, pc}

200079e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
200079e6:	b580      	push	{r7, lr}
200079e8:	b088      	sub	sp, #32
200079ea:	af02      	add	r7, sp, #8
200079ec:	60f8      	str	r0, [r7, #12]
200079ee:	60b9      	str	r1, [r7, #8]
200079f0:	603b      	str	r3, [r7, #0]
200079f2:	4613      	mov	r3, r2
200079f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
200079f6:	68fb      	ldr	r3, [r7, #12]
200079f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
200079fc:	b2db      	uxtb	r3, r3
200079fe:	2b01      	cmp	r3, #1
20007a00:	d001      	beq.n	20007a06 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
20007a02:	2302      	movs	r3, #2
20007a04:	e104      	b.n	20007c10 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
20007a06:	68fb      	ldr	r3, [r7, #12]
20007a08:	685b      	ldr	r3, [r3, #4]
20007a0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
20007a0e:	d112      	bne.n	20007a36 <HAL_SPI_Receive+0x50>
20007a10:	68fb      	ldr	r3, [r7, #12]
20007a12:	689b      	ldr	r3, [r3, #8]
20007a14:	2b00      	cmp	r3, #0
20007a16:	d10e      	bne.n	20007a36 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
20007a18:	68fb      	ldr	r3, [r7, #12]
20007a1a:	2204      	movs	r2, #4
20007a1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
20007a20:	88fa      	ldrh	r2, [r7, #6]
20007a22:	683b      	ldr	r3, [r7, #0]
20007a24:	9300      	str	r3, [sp, #0]
20007a26:	4613      	mov	r3, r2
20007a28:	68ba      	ldr	r2, [r7, #8]
20007a2a:	68b9      	ldr	r1, [r7, #8]
20007a2c:	68f8      	ldr	r0, [r7, #12]
20007a2e:	f000 f8f3 	bl	20007c18 <HAL_SPI_TransmitReceive>
20007a32:	4603      	mov	r3, r0
20007a34:	e0ec      	b.n	20007c10 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20007a36:	f7f8 ffee 	bl	20000a16 <HAL_GetTick>
20007a3a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
20007a3c:	68bb      	ldr	r3, [r7, #8]
20007a3e:	2b00      	cmp	r3, #0
20007a40:	d002      	beq.n	20007a48 <HAL_SPI_Receive+0x62>
20007a42:	88fb      	ldrh	r3, [r7, #6]
20007a44:	2b00      	cmp	r3, #0
20007a46:	d101      	bne.n	20007a4c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
20007a48:	2301      	movs	r3, #1
20007a4a:	e0e1      	b.n	20007c10 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
20007a4c:	68fb      	ldr	r3, [r7, #12]
20007a4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
20007a52:	2b01      	cmp	r3, #1
20007a54:	d101      	bne.n	20007a5a <HAL_SPI_Receive+0x74>
20007a56:	2302      	movs	r3, #2
20007a58:	e0da      	b.n	20007c10 <HAL_SPI_Receive+0x22a>
20007a5a:	68fb      	ldr	r3, [r7, #12]
20007a5c:	2201      	movs	r2, #1
20007a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
20007a62:	68fb      	ldr	r3, [r7, #12]
20007a64:	2204      	movs	r2, #4
20007a66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007a6a:	68fb      	ldr	r3, [r7, #12]
20007a6c:	2200      	movs	r2, #0
20007a6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
20007a70:	68fb      	ldr	r3, [r7, #12]
20007a72:	68ba      	ldr	r2, [r7, #8]
20007a74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
20007a76:	68fb      	ldr	r3, [r7, #12]
20007a78:	88fa      	ldrh	r2, [r7, #6]
20007a7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
20007a7c:	68fb      	ldr	r3, [r7, #12]
20007a7e:	88fa      	ldrh	r2, [r7, #6]
20007a80:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
20007a82:	68fb      	ldr	r3, [r7, #12]
20007a84:	2200      	movs	r2, #0
20007a86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
20007a88:	68fb      	ldr	r3, [r7, #12]
20007a8a:	2200      	movs	r2, #0
20007a8c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
20007a8e:	68fb      	ldr	r3, [r7, #12]
20007a90:	2200      	movs	r2, #0
20007a92:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
20007a94:	68fb      	ldr	r3, [r7, #12]
20007a96:	2200      	movs	r2, #0
20007a98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
20007a9a:	68fb      	ldr	r3, [r7, #12]
20007a9c:	2200      	movs	r2, #0
20007a9e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20007aa0:	68fb      	ldr	r3, [r7, #12]
20007aa2:	689b      	ldr	r3, [r3, #8]
20007aa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20007aa8:	d10f      	bne.n	20007aca <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20007aaa:	68fb      	ldr	r3, [r7, #12]
20007aac:	681b      	ldr	r3, [r3, #0]
20007aae:	681a      	ldr	r2, [r3, #0]
20007ab0:	68fb      	ldr	r3, [r7, #12]
20007ab2:	681b      	ldr	r3, [r3, #0]
20007ab4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20007ab8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
20007aba:	68fb      	ldr	r3, [r7, #12]
20007abc:	681b      	ldr	r3, [r3, #0]
20007abe:	681a      	ldr	r2, [r3, #0]
20007ac0:	68fb      	ldr	r3, [r7, #12]
20007ac2:	681b      	ldr	r3, [r3, #0]
20007ac4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
20007ac8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20007aca:	68fb      	ldr	r3, [r7, #12]
20007acc:	681b      	ldr	r3, [r3, #0]
20007ace:	681b      	ldr	r3, [r3, #0]
20007ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20007ad4:	2b40      	cmp	r3, #64	@ 0x40
20007ad6:	d007      	beq.n	20007ae8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007ad8:	68fb      	ldr	r3, [r7, #12]
20007ada:	681b      	ldr	r3, [r3, #0]
20007adc:	681a      	ldr	r2, [r3, #0]
20007ade:	68fb      	ldr	r3, [r7, #12]
20007ae0:	681b      	ldr	r3, [r3, #0]
20007ae2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20007ae6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
20007ae8:	68fb      	ldr	r3, [r7, #12]
20007aea:	68db      	ldr	r3, [r3, #12]
20007aec:	2b00      	cmp	r3, #0
20007aee:	d170      	bne.n	20007bd2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
20007af0:	e035      	b.n	20007b5e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
20007af2:	68fb      	ldr	r3, [r7, #12]
20007af4:	681b      	ldr	r3, [r3, #0]
20007af6:	689b      	ldr	r3, [r3, #8]
20007af8:	f003 0301 	and.w	r3, r3, #1
20007afc:	2b01      	cmp	r3, #1
20007afe:	d115      	bne.n	20007b2c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
20007b00:	68fb      	ldr	r3, [r7, #12]
20007b02:	681b      	ldr	r3, [r3, #0]
20007b04:	f103 020c 	add.w	r2, r3, #12
20007b08:	68fb      	ldr	r3, [r7, #12]
20007b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20007b0c:	7812      	ldrb	r2, [r2, #0]
20007b0e:	b2d2      	uxtb	r2, r2
20007b10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
20007b12:	68fb      	ldr	r3, [r7, #12]
20007b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20007b16:	1c5a      	adds	r2, r3, #1
20007b18:	68fb      	ldr	r3, [r7, #12]
20007b1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
20007b1c:	68fb      	ldr	r3, [r7, #12]
20007b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20007b20:	b29b      	uxth	r3, r3
20007b22:	3b01      	subs	r3, #1
20007b24:	b29a      	uxth	r2, r3
20007b26:	68fb      	ldr	r3, [r7, #12]
20007b28:	87da      	strh	r2, [r3, #62]	@ 0x3e
20007b2a:	e018      	b.n	20007b5e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20007b2c:	f7f8 ff73 	bl	20000a16 <HAL_GetTick>
20007b30:	4602      	mov	r2, r0
20007b32:	697b      	ldr	r3, [r7, #20]
20007b34:	1ad3      	subs	r3, r2, r3
20007b36:	683a      	ldr	r2, [r7, #0]
20007b38:	429a      	cmp	r2, r3
20007b3a:	d803      	bhi.n	20007b44 <HAL_SPI_Receive+0x15e>
20007b3c:	683b      	ldr	r3, [r7, #0]
20007b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
20007b42:	d102      	bne.n	20007b4a <HAL_SPI_Receive+0x164>
20007b44:	683b      	ldr	r3, [r7, #0]
20007b46:	2b00      	cmp	r3, #0
20007b48:	d109      	bne.n	20007b5e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
20007b4a:	68fb      	ldr	r3, [r7, #12]
20007b4c:	2201      	movs	r2, #1
20007b4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
20007b52:	68fb      	ldr	r3, [r7, #12]
20007b54:	2200      	movs	r2, #0
20007b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
20007b5a:	2303      	movs	r3, #3
20007b5c:	e058      	b.n	20007c10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
20007b5e:	68fb      	ldr	r3, [r7, #12]
20007b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20007b62:	b29b      	uxth	r3, r3
20007b64:	2b00      	cmp	r3, #0
20007b66:	d1c4      	bne.n	20007af2 <HAL_SPI_Receive+0x10c>
20007b68:	e038      	b.n	20007bdc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
20007b6a:	68fb      	ldr	r3, [r7, #12]
20007b6c:	681b      	ldr	r3, [r3, #0]
20007b6e:	689b      	ldr	r3, [r3, #8]
20007b70:	f003 0301 	and.w	r3, r3, #1
20007b74:	2b01      	cmp	r3, #1
20007b76:	d113      	bne.n	20007ba0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20007b78:	68fb      	ldr	r3, [r7, #12]
20007b7a:	681b      	ldr	r3, [r3, #0]
20007b7c:	68da      	ldr	r2, [r3, #12]
20007b7e:	68fb      	ldr	r3, [r7, #12]
20007b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20007b82:	b292      	uxth	r2, r2
20007b84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20007b86:	68fb      	ldr	r3, [r7, #12]
20007b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20007b8a:	1c9a      	adds	r2, r3, #2
20007b8c:	68fb      	ldr	r3, [r7, #12]
20007b8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
20007b90:	68fb      	ldr	r3, [r7, #12]
20007b92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20007b94:	b29b      	uxth	r3, r3
20007b96:	3b01      	subs	r3, #1
20007b98:	b29a      	uxth	r2, r3
20007b9a:	68fb      	ldr	r3, [r7, #12]
20007b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
20007b9e:	e018      	b.n	20007bd2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20007ba0:	f7f8 ff39 	bl	20000a16 <HAL_GetTick>
20007ba4:	4602      	mov	r2, r0
20007ba6:	697b      	ldr	r3, [r7, #20]
20007ba8:	1ad3      	subs	r3, r2, r3
20007baa:	683a      	ldr	r2, [r7, #0]
20007bac:	429a      	cmp	r2, r3
20007bae:	d803      	bhi.n	20007bb8 <HAL_SPI_Receive+0x1d2>
20007bb0:	683b      	ldr	r3, [r7, #0]
20007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
20007bb6:	d102      	bne.n	20007bbe <HAL_SPI_Receive+0x1d8>
20007bb8:	683b      	ldr	r3, [r7, #0]
20007bba:	2b00      	cmp	r3, #0
20007bbc:	d109      	bne.n	20007bd2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
20007bbe:	68fb      	ldr	r3, [r7, #12]
20007bc0:	2201      	movs	r2, #1
20007bc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
20007bc6:	68fb      	ldr	r3, [r7, #12]
20007bc8:	2200      	movs	r2, #0
20007bca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
20007bce:	2303      	movs	r3, #3
20007bd0:	e01e      	b.n	20007c10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
20007bd2:	68fb      	ldr	r3, [r7, #12]
20007bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20007bd6:	b29b      	uxth	r3, r3
20007bd8:	2b00      	cmp	r3, #0
20007bda:	d1c6      	bne.n	20007b6a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20007bdc:	697a      	ldr	r2, [r7, #20]
20007bde:	6839      	ldr	r1, [r7, #0]
20007be0:	68f8      	ldr	r0, [r7, #12]
20007be2:	f001 fd95 	bl	20009710 <SPI_EndRxTransaction>
20007be6:	4603      	mov	r3, r0
20007be8:	2b00      	cmp	r3, #0
20007bea:	d002      	beq.n	20007bf2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20007bec:	68fb      	ldr	r3, [r7, #12]
20007bee:	2220      	movs	r2, #32
20007bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
20007bf2:	68fb      	ldr	r3, [r7, #12]
20007bf4:	2201      	movs	r2, #1
20007bf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
20007bfa:	68fb      	ldr	r3, [r7, #12]
20007bfc:	2200      	movs	r2, #0
20007bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20007c02:	68fb      	ldr	r3, [r7, #12]
20007c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20007c06:	2b00      	cmp	r3, #0
20007c08:	d001      	beq.n	20007c0e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
20007c0a:	2301      	movs	r3, #1
20007c0c:	e000      	b.n	20007c10 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
20007c0e:	2300      	movs	r3, #0
  }
}
20007c10:	4618      	mov	r0, r3
20007c12:	3718      	adds	r7, #24
20007c14:	46bd      	mov	sp, r7
20007c16:	bd80      	pop	{r7, pc}

20007c18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
20007c18:	b580      	push	{r7, lr}
20007c1a:	b08a      	sub	sp, #40	@ 0x28
20007c1c:	af00      	add	r7, sp, #0
20007c1e:	60f8      	str	r0, [r7, #12]
20007c20:	60b9      	str	r1, [r7, #8]
20007c22:	607a      	str	r2, [r7, #4]
20007c24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
20007c26:	2301      	movs	r3, #1
20007c28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20007c2a:	f7f8 fef4 	bl	20000a16 <HAL_GetTick>
20007c2e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
20007c30:	68fb      	ldr	r3, [r7, #12]
20007c32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20007c36:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
20007c38:	68fb      	ldr	r3, [r7, #12]
20007c3a:	685b      	ldr	r3, [r3, #4]
20007c3c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
20007c3e:	887b      	ldrh	r3, [r7, #2]
20007c40:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
20007c42:	7ffb      	ldrb	r3, [r7, #31]
20007c44:	2b01      	cmp	r3, #1
20007c46:	d00c      	beq.n	20007c62 <HAL_SPI_TransmitReceive+0x4a>
20007c48:	69bb      	ldr	r3, [r7, #24]
20007c4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
20007c4e:	d106      	bne.n	20007c5e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
20007c50:	68fb      	ldr	r3, [r7, #12]
20007c52:	689b      	ldr	r3, [r3, #8]
20007c54:	2b00      	cmp	r3, #0
20007c56:	d102      	bne.n	20007c5e <HAL_SPI_TransmitReceive+0x46>
20007c58:	7ffb      	ldrb	r3, [r7, #31]
20007c5a:	2b04      	cmp	r3, #4
20007c5c:	d001      	beq.n	20007c62 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
20007c5e:	2302      	movs	r3, #2
20007c60:	e17f      	b.n	20007f62 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
20007c62:	68bb      	ldr	r3, [r7, #8]
20007c64:	2b00      	cmp	r3, #0
20007c66:	d005      	beq.n	20007c74 <HAL_SPI_TransmitReceive+0x5c>
20007c68:	687b      	ldr	r3, [r7, #4]
20007c6a:	2b00      	cmp	r3, #0
20007c6c:	d002      	beq.n	20007c74 <HAL_SPI_TransmitReceive+0x5c>
20007c6e:	887b      	ldrh	r3, [r7, #2]
20007c70:	2b00      	cmp	r3, #0
20007c72:	d101      	bne.n	20007c78 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
20007c74:	2301      	movs	r3, #1
20007c76:	e174      	b.n	20007f62 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
20007c78:	68fb      	ldr	r3, [r7, #12]
20007c7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
20007c7e:	2b01      	cmp	r3, #1
20007c80:	d101      	bne.n	20007c86 <HAL_SPI_TransmitReceive+0x6e>
20007c82:	2302      	movs	r3, #2
20007c84:	e16d      	b.n	20007f62 <HAL_SPI_TransmitReceive+0x34a>
20007c86:	68fb      	ldr	r3, [r7, #12]
20007c88:	2201      	movs	r2, #1
20007c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20007c8e:	68fb      	ldr	r3, [r7, #12]
20007c90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20007c94:	b2db      	uxtb	r3, r3
20007c96:	2b04      	cmp	r3, #4
20007c98:	d003      	beq.n	20007ca2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20007c9a:	68fb      	ldr	r3, [r7, #12]
20007c9c:	2205      	movs	r2, #5
20007c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007ca2:	68fb      	ldr	r3, [r7, #12]
20007ca4:	2200      	movs	r2, #0
20007ca6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20007ca8:	68fb      	ldr	r3, [r7, #12]
20007caa:	687a      	ldr	r2, [r7, #4]
20007cac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
20007cae:	68fb      	ldr	r3, [r7, #12]
20007cb0:	887a      	ldrh	r2, [r7, #2]
20007cb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
20007cb4:	68fb      	ldr	r3, [r7, #12]
20007cb6:	887a      	ldrh	r2, [r7, #2]
20007cb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
20007cba:	68fb      	ldr	r3, [r7, #12]
20007cbc:	68ba      	ldr	r2, [r7, #8]
20007cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
20007cc0:	68fb      	ldr	r3, [r7, #12]
20007cc2:	887a      	ldrh	r2, [r7, #2]
20007cc4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
20007cc6:	68fb      	ldr	r3, [r7, #12]
20007cc8:	887a      	ldrh	r2, [r7, #2]
20007cca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20007ccc:	68fb      	ldr	r3, [r7, #12]
20007cce:	2200      	movs	r2, #0
20007cd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
20007cd2:	68fb      	ldr	r3, [r7, #12]
20007cd4:	2200      	movs	r2, #0
20007cd6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20007cd8:	68fb      	ldr	r3, [r7, #12]
20007cda:	681b      	ldr	r3, [r3, #0]
20007cdc:	681b      	ldr	r3, [r3, #0]
20007cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20007ce2:	2b40      	cmp	r3, #64	@ 0x40
20007ce4:	d007      	beq.n	20007cf6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007ce6:	68fb      	ldr	r3, [r7, #12]
20007ce8:	681b      	ldr	r3, [r3, #0]
20007cea:	681a      	ldr	r2, [r3, #0]
20007cec:	68fb      	ldr	r3, [r7, #12]
20007cee:	681b      	ldr	r3, [r3, #0]
20007cf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20007cf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
20007cf6:	68fb      	ldr	r3, [r7, #12]
20007cf8:	68db      	ldr	r3, [r3, #12]
20007cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
20007cfe:	d17e      	bne.n	20007dfe <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20007d00:	68fb      	ldr	r3, [r7, #12]
20007d02:	685b      	ldr	r3, [r3, #4]
20007d04:	2b00      	cmp	r3, #0
20007d06:	d002      	beq.n	20007d0e <HAL_SPI_TransmitReceive+0xf6>
20007d08:	8afb      	ldrh	r3, [r7, #22]
20007d0a:	2b01      	cmp	r3, #1
20007d0c:	d16c      	bne.n	20007de8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
20007d0e:	68fb      	ldr	r3, [r7, #12]
20007d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20007d12:	881a      	ldrh	r2, [r3, #0]
20007d14:	68fb      	ldr	r3, [r7, #12]
20007d16:	681b      	ldr	r3, [r3, #0]
20007d18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
20007d1a:	68fb      	ldr	r3, [r7, #12]
20007d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20007d1e:	1c9a      	adds	r2, r3, #2
20007d20:	68fb      	ldr	r3, [r7, #12]
20007d22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
20007d24:	68fb      	ldr	r3, [r7, #12]
20007d26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20007d28:	b29b      	uxth	r3, r3
20007d2a:	3b01      	subs	r3, #1
20007d2c:	b29a      	uxth	r2, r3
20007d2e:	68fb      	ldr	r3, [r7, #12]
20007d30:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20007d32:	e059      	b.n	20007de8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
20007d34:	68fb      	ldr	r3, [r7, #12]
20007d36:	681b      	ldr	r3, [r3, #0]
20007d38:	689b      	ldr	r3, [r3, #8]
20007d3a:	f003 0302 	and.w	r3, r3, #2
20007d3e:	2b02      	cmp	r3, #2
20007d40:	d11b      	bne.n	20007d7a <HAL_SPI_TransmitReceive+0x162>
20007d42:	68fb      	ldr	r3, [r7, #12]
20007d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20007d46:	b29b      	uxth	r3, r3
20007d48:	2b00      	cmp	r3, #0
20007d4a:	d016      	beq.n	20007d7a <HAL_SPI_TransmitReceive+0x162>
20007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20007d4e:	2b01      	cmp	r3, #1
20007d50:	d113      	bne.n	20007d7a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
20007d52:	68fb      	ldr	r3, [r7, #12]
20007d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20007d56:	881a      	ldrh	r2, [r3, #0]
20007d58:	68fb      	ldr	r3, [r7, #12]
20007d5a:	681b      	ldr	r3, [r3, #0]
20007d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20007d5e:	68fb      	ldr	r3, [r7, #12]
20007d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20007d62:	1c9a      	adds	r2, r3, #2
20007d64:	68fb      	ldr	r3, [r7, #12]
20007d66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
20007d68:	68fb      	ldr	r3, [r7, #12]
20007d6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20007d6c:	b29b      	uxth	r3, r3
20007d6e:	3b01      	subs	r3, #1
20007d70:	b29a      	uxth	r2, r3
20007d72:	68fb      	ldr	r3, [r7, #12]
20007d74:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
20007d76:	2300      	movs	r3, #0
20007d78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
20007d7a:	68fb      	ldr	r3, [r7, #12]
20007d7c:	681b      	ldr	r3, [r3, #0]
20007d7e:	689b      	ldr	r3, [r3, #8]
20007d80:	f003 0301 	and.w	r3, r3, #1
20007d84:	2b01      	cmp	r3, #1
20007d86:	d119      	bne.n	20007dbc <HAL_SPI_TransmitReceive+0x1a4>
20007d88:	68fb      	ldr	r3, [r7, #12]
20007d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20007d8c:	b29b      	uxth	r3, r3
20007d8e:	2b00      	cmp	r3, #0
20007d90:	d014      	beq.n	20007dbc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20007d92:	68fb      	ldr	r3, [r7, #12]
20007d94:	681b      	ldr	r3, [r3, #0]
20007d96:	68da      	ldr	r2, [r3, #12]
20007d98:	68fb      	ldr	r3, [r7, #12]
20007d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20007d9c:	b292      	uxth	r2, r2
20007d9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20007da0:	68fb      	ldr	r3, [r7, #12]
20007da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20007da4:	1c9a      	adds	r2, r3, #2
20007da6:	68fb      	ldr	r3, [r7, #12]
20007da8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
20007daa:	68fb      	ldr	r3, [r7, #12]
20007dac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20007dae:	b29b      	uxth	r3, r3
20007db0:	3b01      	subs	r3, #1
20007db2:	b29a      	uxth	r2, r3
20007db4:	68fb      	ldr	r3, [r7, #12]
20007db6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20007db8:	2301      	movs	r3, #1
20007dba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
20007dbc:	f7f8 fe2b 	bl	20000a16 <HAL_GetTick>
20007dc0:	4602      	mov	r2, r0
20007dc2:	6a3b      	ldr	r3, [r7, #32]
20007dc4:	1ad3      	subs	r3, r2, r3
20007dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20007dc8:	429a      	cmp	r2, r3
20007dca:	d80d      	bhi.n	20007de8 <HAL_SPI_TransmitReceive+0x1d0>
20007dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20007dce:	f1b3 3fff 	cmp.w	r3, #4294967295
20007dd2:	d009      	beq.n	20007de8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
20007dd4:	68fb      	ldr	r3, [r7, #12]
20007dd6:	2201      	movs	r2, #1
20007dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
20007ddc:	68fb      	ldr	r3, [r7, #12]
20007dde:	2200      	movs	r2, #0
20007de0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
20007de4:	2303      	movs	r3, #3
20007de6:	e0bc      	b.n	20007f62 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20007de8:	68fb      	ldr	r3, [r7, #12]
20007dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20007dec:	b29b      	uxth	r3, r3
20007dee:	2b00      	cmp	r3, #0
20007df0:	d1a0      	bne.n	20007d34 <HAL_SPI_TransmitReceive+0x11c>
20007df2:	68fb      	ldr	r3, [r7, #12]
20007df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20007df6:	b29b      	uxth	r3, r3
20007df8:	2b00      	cmp	r3, #0
20007dfa:	d19b      	bne.n	20007d34 <HAL_SPI_TransmitReceive+0x11c>
20007dfc:	e082      	b.n	20007f04 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20007dfe:	68fb      	ldr	r3, [r7, #12]
20007e00:	685b      	ldr	r3, [r3, #4]
20007e02:	2b00      	cmp	r3, #0
20007e04:	d002      	beq.n	20007e0c <HAL_SPI_TransmitReceive+0x1f4>
20007e06:	8afb      	ldrh	r3, [r7, #22]
20007e08:	2b01      	cmp	r3, #1
20007e0a:	d171      	bne.n	20007ef0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
20007e0c:	68fb      	ldr	r3, [r7, #12]
20007e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
20007e10:	68fb      	ldr	r3, [r7, #12]
20007e12:	681b      	ldr	r3, [r3, #0]
20007e14:	330c      	adds	r3, #12
20007e16:	7812      	ldrb	r2, [r2, #0]
20007e18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
20007e1a:	68fb      	ldr	r3, [r7, #12]
20007e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20007e1e:	1c5a      	adds	r2, r3, #1
20007e20:	68fb      	ldr	r3, [r7, #12]
20007e22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
20007e24:	68fb      	ldr	r3, [r7, #12]
20007e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20007e28:	b29b      	uxth	r3, r3
20007e2a:	3b01      	subs	r3, #1
20007e2c:	b29a      	uxth	r2, r3
20007e2e:	68fb      	ldr	r3, [r7, #12]
20007e30:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20007e32:	e05d      	b.n	20007ef0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
20007e34:	68fb      	ldr	r3, [r7, #12]
20007e36:	681b      	ldr	r3, [r3, #0]
20007e38:	689b      	ldr	r3, [r3, #8]
20007e3a:	f003 0302 	and.w	r3, r3, #2
20007e3e:	2b02      	cmp	r3, #2
20007e40:	d11c      	bne.n	20007e7c <HAL_SPI_TransmitReceive+0x264>
20007e42:	68fb      	ldr	r3, [r7, #12]
20007e44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20007e46:	b29b      	uxth	r3, r3
20007e48:	2b00      	cmp	r3, #0
20007e4a:	d017      	beq.n	20007e7c <HAL_SPI_TransmitReceive+0x264>
20007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
20007e4e:	2b01      	cmp	r3, #1
20007e50:	d114      	bne.n	20007e7c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
20007e52:	68fb      	ldr	r3, [r7, #12]
20007e54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
20007e56:	68fb      	ldr	r3, [r7, #12]
20007e58:	681b      	ldr	r3, [r3, #0]
20007e5a:	330c      	adds	r3, #12
20007e5c:	7812      	ldrb	r2, [r2, #0]
20007e5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
20007e60:	68fb      	ldr	r3, [r7, #12]
20007e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20007e64:	1c5a      	adds	r2, r3, #1
20007e66:	68fb      	ldr	r3, [r7, #12]
20007e68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
20007e6a:	68fb      	ldr	r3, [r7, #12]
20007e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20007e6e:	b29b      	uxth	r3, r3
20007e70:	3b01      	subs	r3, #1
20007e72:	b29a      	uxth	r2, r3
20007e74:	68fb      	ldr	r3, [r7, #12]
20007e76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
20007e78:	2300      	movs	r3, #0
20007e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
20007e7c:	68fb      	ldr	r3, [r7, #12]
20007e7e:	681b      	ldr	r3, [r3, #0]
20007e80:	689b      	ldr	r3, [r3, #8]
20007e82:	f003 0301 	and.w	r3, r3, #1
20007e86:	2b01      	cmp	r3, #1
20007e88:	d119      	bne.n	20007ebe <HAL_SPI_TransmitReceive+0x2a6>
20007e8a:	68fb      	ldr	r3, [r7, #12]
20007e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20007e8e:	b29b      	uxth	r3, r3
20007e90:	2b00      	cmp	r3, #0
20007e92:	d014      	beq.n	20007ebe <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
20007e94:	68fb      	ldr	r3, [r7, #12]
20007e96:	681b      	ldr	r3, [r3, #0]
20007e98:	68da      	ldr	r2, [r3, #12]
20007e9a:	68fb      	ldr	r3, [r7, #12]
20007e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20007e9e:	b2d2      	uxtb	r2, r2
20007ea0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
20007ea2:	68fb      	ldr	r3, [r7, #12]
20007ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20007ea6:	1c5a      	adds	r2, r3, #1
20007ea8:	68fb      	ldr	r3, [r7, #12]
20007eaa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
20007eac:	68fb      	ldr	r3, [r7, #12]
20007eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20007eb0:	b29b      	uxth	r3, r3
20007eb2:	3b01      	subs	r3, #1
20007eb4:	b29a      	uxth	r2, r3
20007eb6:	68fb      	ldr	r3, [r7, #12]
20007eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20007eba:	2301      	movs	r3, #1
20007ebc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
20007ebe:	f7f8 fdaa 	bl	20000a16 <HAL_GetTick>
20007ec2:	4602      	mov	r2, r0
20007ec4:	6a3b      	ldr	r3, [r7, #32]
20007ec6:	1ad3      	subs	r3, r2, r3
20007ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
20007eca:	429a      	cmp	r2, r3
20007ecc:	d803      	bhi.n	20007ed6 <HAL_SPI_TransmitReceive+0x2be>
20007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
20007ed4:	d102      	bne.n	20007edc <HAL_SPI_TransmitReceive+0x2c4>
20007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20007ed8:	2b00      	cmp	r3, #0
20007eda:	d109      	bne.n	20007ef0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
20007edc:	68fb      	ldr	r3, [r7, #12]
20007ede:	2201      	movs	r2, #1
20007ee0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
20007ee4:	68fb      	ldr	r3, [r7, #12]
20007ee6:	2200      	movs	r2, #0
20007ee8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
20007eec:	2303      	movs	r3, #3
20007eee:	e038      	b.n	20007f62 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20007ef0:	68fb      	ldr	r3, [r7, #12]
20007ef2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20007ef4:	b29b      	uxth	r3, r3
20007ef6:	2b00      	cmp	r3, #0
20007ef8:	d19c      	bne.n	20007e34 <HAL_SPI_TransmitReceive+0x21c>
20007efa:	68fb      	ldr	r3, [r7, #12]
20007efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20007efe:	b29b      	uxth	r3, r3
20007f00:	2b00      	cmp	r3, #0
20007f02:	d197      	bne.n	20007e34 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20007f04:	6a3a      	ldr	r2, [r7, #32]
20007f06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
20007f08:	68f8      	ldr	r0, [r7, #12]
20007f0a:	f001 fc67 	bl	200097dc <SPI_EndRxTxTransaction>
20007f0e:	4603      	mov	r3, r0
20007f10:	2b00      	cmp	r3, #0
20007f12:	d008      	beq.n	20007f26 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20007f14:	68fb      	ldr	r3, [r7, #12]
20007f16:	2220      	movs	r2, #32
20007f18:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
20007f1a:	68fb      	ldr	r3, [r7, #12]
20007f1c:	2200      	movs	r2, #0
20007f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
20007f22:	2301      	movs	r3, #1
20007f24:	e01d      	b.n	20007f62 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20007f26:	68fb      	ldr	r3, [r7, #12]
20007f28:	689b      	ldr	r3, [r3, #8]
20007f2a:	2b00      	cmp	r3, #0
20007f2c:	d10a      	bne.n	20007f44 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20007f2e:	2300      	movs	r3, #0
20007f30:	613b      	str	r3, [r7, #16]
20007f32:	68fb      	ldr	r3, [r7, #12]
20007f34:	681b      	ldr	r3, [r3, #0]
20007f36:	68db      	ldr	r3, [r3, #12]
20007f38:	613b      	str	r3, [r7, #16]
20007f3a:	68fb      	ldr	r3, [r7, #12]
20007f3c:	681b      	ldr	r3, [r3, #0]
20007f3e:	689b      	ldr	r3, [r3, #8]
20007f40:	613b      	str	r3, [r7, #16]
20007f42:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
20007f44:	68fb      	ldr	r3, [r7, #12]
20007f46:	2201      	movs	r2, #1
20007f48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
20007f4c:	68fb      	ldr	r3, [r7, #12]
20007f4e:	2200      	movs	r2, #0
20007f50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20007f54:	68fb      	ldr	r3, [r7, #12]
20007f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20007f58:	2b00      	cmp	r3, #0
20007f5a:	d001      	beq.n	20007f60 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
20007f5c:	2301      	movs	r3, #1
20007f5e:	e000      	b.n	20007f62 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
20007f60:	2300      	movs	r3, #0
  }
}
20007f62:	4618      	mov	r0, r3
20007f64:	3728      	adds	r7, #40	@ 0x28
20007f66:	46bd      	mov	sp, r7
20007f68:	bd80      	pop	{r7, pc}
	...

20007f6c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
20007f6c:	b480      	push	{r7}
20007f6e:	b085      	sub	sp, #20
20007f70:	af00      	add	r7, sp, #0
20007f72:	60f8      	str	r0, [r7, #12]
20007f74:	60b9      	str	r1, [r7, #8]
20007f76:	4613      	mov	r3, r2
20007f78:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
20007f7a:	68bb      	ldr	r3, [r7, #8]
20007f7c:	2b00      	cmp	r3, #0
20007f7e:	d002      	beq.n	20007f86 <HAL_SPI_Transmit_IT+0x1a>
20007f80:	88fb      	ldrh	r3, [r7, #6]
20007f82:	2b00      	cmp	r3, #0
20007f84:	d101      	bne.n	20007f8a <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
20007f86:	2301      	movs	r3, #1
20007f88:	e06a      	b.n	20008060 <HAL_SPI_Transmit_IT+0xf4>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
20007f8a:	68fb      	ldr	r3, [r7, #12]
20007f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20007f90:	b2db      	uxtb	r3, r3
20007f92:	2b01      	cmp	r3, #1
20007f94:	d001      	beq.n	20007f9a <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
20007f96:	2302      	movs	r3, #2
20007f98:	e062      	b.n	20008060 <HAL_SPI_Transmit_IT+0xf4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
20007f9a:	68fb      	ldr	r3, [r7, #12]
20007f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
20007fa0:	2b01      	cmp	r3, #1
20007fa2:	d101      	bne.n	20007fa8 <HAL_SPI_Transmit_IT+0x3c>
20007fa4:	2302      	movs	r3, #2
20007fa6:	e05b      	b.n	20008060 <HAL_SPI_Transmit_IT+0xf4>
20007fa8:	68fb      	ldr	r3, [r7, #12]
20007faa:	2201      	movs	r2, #1
20007fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
20007fb0:	68fb      	ldr	r3, [r7, #12]
20007fb2:	2203      	movs	r2, #3
20007fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007fb8:	68fb      	ldr	r3, [r7, #12]
20007fba:	2200      	movs	r2, #0
20007fbc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
20007fbe:	68fb      	ldr	r3, [r7, #12]
20007fc0:	68ba      	ldr	r2, [r7, #8]
20007fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
20007fc4:	68fb      	ldr	r3, [r7, #12]
20007fc6:	88fa      	ldrh	r2, [r7, #6]
20007fc8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
20007fca:	68fb      	ldr	r3, [r7, #12]
20007fcc:	88fa      	ldrh	r2, [r7, #6]
20007fce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
20007fd0:	68fb      	ldr	r3, [r7, #12]
20007fd2:	2200      	movs	r2, #0
20007fd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
20007fd6:	68fb      	ldr	r3, [r7, #12]
20007fd8:	2200      	movs	r2, #0
20007fda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
20007fdc:	68fb      	ldr	r3, [r7, #12]
20007fde:	2200      	movs	r2, #0
20007fe0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
20007fe2:	68fb      	ldr	r3, [r7, #12]
20007fe4:	2200      	movs	r2, #0
20007fe6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20007fe8:	68fb      	ldr	r3, [r7, #12]
20007fea:	68db      	ldr	r3, [r3, #12]
20007fec:	2b00      	cmp	r3, #0
20007fee:	d003      	beq.n	20007ff8 <HAL_SPI_Transmit_IT+0x8c>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
20007ff0:	68fb      	ldr	r3, [r7, #12]
20007ff2:	4a1e      	ldr	r2, [pc, #120]	@ (2000806c <HAL_SPI_Transmit_IT+0x100>)
20007ff4:	645a      	str	r2, [r3, #68]	@ 0x44
20007ff6:	e002      	b.n	20007ffe <HAL_SPI_Transmit_IT+0x92>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
20007ff8:	68fb      	ldr	r3, [r7, #12]
20007ffa:	4a1d      	ldr	r2, [pc, #116]	@ (20008070 <HAL_SPI_Transmit_IT+0x104>)
20007ffc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20007ffe:	68fb      	ldr	r3, [r7, #12]
20008000:	689b      	ldr	r3, [r3, #8]
20008002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20008006:	d10f      	bne.n	20008028 <HAL_SPI_Transmit_IT+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20008008:	68fb      	ldr	r3, [r7, #12]
2000800a:	681b      	ldr	r3, [r3, #0]
2000800c:	681a      	ldr	r2, [r3, #0]
2000800e:	68fb      	ldr	r3, [r7, #12]
20008010:	681b      	ldr	r3, [r3, #0]
20008012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20008016:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
20008018:	68fb      	ldr	r3, [r7, #12]
2000801a:	681b      	ldr	r3, [r3, #0]
2000801c:	681a      	ldr	r2, [r3, #0]
2000801e:	68fb      	ldr	r3, [r7, #12]
20008020:	681b      	ldr	r3, [r3, #0]
20008022:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
20008026:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20008028:	68fb      	ldr	r3, [r7, #12]
2000802a:	681b      	ldr	r3, [r3, #0]
2000802c:	681b      	ldr	r3, [r3, #0]
2000802e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20008032:	2b40      	cmp	r3, #64	@ 0x40
20008034:	d007      	beq.n	20008046 <HAL_SPI_Transmit_IT+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20008036:	68fb      	ldr	r3, [r7, #12]
20008038:	681b      	ldr	r3, [r3, #0]
2000803a:	681a      	ldr	r2, [r3, #0]
2000803c:	68fb      	ldr	r3, [r7, #12]
2000803e:	681b      	ldr	r3, [r3, #0]
20008040:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20008044:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008046:	68fb      	ldr	r3, [r7, #12]
20008048:	2200      	movs	r2, #0
2000804a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
2000804e:	68fb      	ldr	r3, [r7, #12]
20008050:	681b      	ldr	r3, [r3, #0]
20008052:	685a      	ldr	r2, [r3, #4]
20008054:	68fb      	ldr	r3, [r7, #12]
20008056:	681b      	ldr	r3, [r3, #0]
20008058:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
2000805c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
2000805e:	2300      	movs	r3, #0
}
20008060:	4618      	mov	r0, r3
20008062:	3714      	adds	r7, #20
20008064:	46bd      	mov	sp, r7
20008066:	f85d 7b04 	ldr.w	r7, [sp], #4
2000806a:	4770      	bx	lr
2000806c:	200095bd 	.word	0x200095bd
20008070:	20009577 	.word	0x20009577

20008074 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20008074:	b580      	push	{r7, lr}
20008076:	b084      	sub	sp, #16
20008078:	af00      	add	r7, sp, #0
2000807a:	60f8      	str	r0, [r7, #12]
2000807c:	60b9      	str	r1, [r7, #8]
2000807e:	4613      	mov	r3, r2
20008080:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
20008082:	68fb      	ldr	r3, [r7, #12]
20008084:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20008088:	b2db      	uxtb	r3, r3
2000808a:	2b01      	cmp	r3, #1
2000808c:	d001      	beq.n	20008092 <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
2000808e:	2302      	movs	r3, #2
20008090:	e07f      	b.n	20008192 <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
20008092:	68fb      	ldr	r3, [r7, #12]
20008094:	689b      	ldr	r3, [r3, #8]
20008096:	2b00      	cmp	r3, #0
20008098:	d110      	bne.n	200080bc <HAL_SPI_Receive_IT+0x48>
2000809a:	68fb      	ldr	r3, [r7, #12]
2000809c:	685b      	ldr	r3, [r3, #4]
2000809e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
200080a2:	d10b      	bne.n	200080bc <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
200080a4:	68fb      	ldr	r3, [r7, #12]
200080a6:	2204      	movs	r2, #4
200080a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
200080ac:	88fb      	ldrh	r3, [r7, #6]
200080ae:	68ba      	ldr	r2, [r7, #8]
200080b0:	68b9      	ldr	r1, [r7, #8]
200080b2:	68f8      	ldr	r0, [r7, #12]
200080b4:	f000 f876 	bl	200081a4 <HAL_SPI_TransmitReceive_IT>
200080b8:	4603      	mov	r3, r0
200080ba:	e06a      	b.n	20008192 <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
200080bc:	68bb      	ldr	r3, [r7, #8]
200080be:	2b00      	cmp	r3, #0
200080c0:	d002      	beq.n	200080c8 <HAL_SPI_Receive_IT+0x54>
200080c2:	88fb      	ldrh	r3, [r7, #6]
200080c4:	2b00      	cmp	r3, #0
200080c6:	d101      	bne.n	200080cc <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
200080c8:	2301      	movs	r3, #1
200080ca:	e062      	b.n	20008192 <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
200080cc:	68fb      	ldr	r3, [r7, #12]
200080ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
200080d2:	2b01      	cmp	r3, #1
200080d4:	d101      	bne.n	200080da <HAL_SPI_Receive_IT+0x66>
200080d6:	2302      	movs	r3, #2
200080d8:	e05b      	b.n	20008192 <HAL_SPI_Receive_IT+0x11e>
200080da:	68fb      	ldr	r3, [r7, #12]
200080dc:	2201      	movs	r2, #1
200080de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
200080e2:	68fb      	ldr	r3, [r7, #12]
200080e4:	2204      	movs	r2, #4
200080e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200080ea:	68fb      	ldr	r3, [r7, #12]
200080ec:	2200      	movs	r2, #0
200080ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
200080f0:	68fb      	ldr	r3, [r7, #12]
200080f2:	68ba      	ldr	r2, [r7, #8]
200080f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
200080f6:	68fb      	ldr	r3, [r7, #12]
200080f8:	88fa      	ldrh	r2, [r7, #6]
200080fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
200080fc:	68fb      	ldr	r3, [r7, #12]
200080fe:	88fa      	ldrh	r2, [r7, #6]
20008100:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
20008102:	68fb      	ldr	r3, [r7, #12]
20008104:	2200      	movs	r2, #0
20008106:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
20008108:	68fb      	ldr	r3, [r7, #12]
2000810a:	2200      	movs	r2, #0
2000810c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
2000810e:	68fb      	ldr	r3, [r7, #12]
20008110:	2200      	movs	r2, #0
20008112:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
20008114:	68fb      	ldr	r3, [r7, #12]
20008116:	2200      	movs	r2, #0
20008118:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2000811a:	68fb      	ldr	r3, [r7, #12]
2000811c:	68db      	ldr	r3, [r3, #12]
2000811e:	2b00      	cmp	r3, #0
20008120:	d003      	beq.n	2000812a <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
20008122:	68fb      	ldr	r3, [r7, #12]
20008124:	4a1d      	ldr	r2, [pc, #116]	@ (2000819c <HAL_SPI_Receive_IT+0x128>)
20008126:	641a      	str	r2, [r3, #64]	@ 0x40
20008128:	e002      	b.n	20008130 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
2000812a:	68fb      	ldr	r3, [r7, #12]
2000812c:	4a1c      	ldr	r2, [pc, #112]	@ (200081a0 <HAL_SPI_Receive_IT+0x12c>)
2000812e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20008130:	68fb      	ldr	r3, [r7, #12]
20008132:	689b      	ldr	r3, [r3, #8]
20008134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20008138:	d10f      	bne.n	2000815a <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
2000813a:	68fb      	ldr	r3, [r7, #12]
2000813c:	681b      	ldr	r3, [r3, #0]
2000813e:	681a      	ldr	r2, [r3, #0]
20008140:	68fb      	ldr	r3, [r7, #12]
20008142:	681b      	ldr	r3, [r3, #0]
20008144:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20008148:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
2000814a:	68fb      	ldr	r3, [r7, #12]
2000814c:	681b      	ldr	r3, [r3, #0]
2000814e:	681a      	ldr	r2, [r3, #0]
20008150:	68fb      	ldr	r3, [r7, #12]
20008152:	681b      	ldr	r3, [r3, #0]
20008154:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
20008158:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000815a:	68fb      	ldr	r3, [r7, #12]
2000815c:	681b      	ldr	r3, [r3, #0]
2000815e:	681b      	ldr	r3, [r3, #0]
20008160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20008164:	2b40      	cmp	r3, #64	@ 0x40
20008166:	d007      	beq.n	20008178 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20008168:	68fb      	ldr	r3, [r7, #12]
2000816a:	681b      	ldr	r3, [r3, #0]
2000816c:	681a      	ldr	r2, [r3, #0]
2000816e:	68fb      	ldr	r3, [r7, #12]
20008170:	681b      	ldr	r3, [r3, #0]
20008172:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20008176:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008178:	68fb      	ldr	r3, [r7, #12]
2000817a:	2200      	movs	r2, #0
2000817c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
20008180:	68fb      	ldr	r3, [r7, #12]
20008182:	681b      	ldr	r3, [r3, #0]
20008184:	685a      	ldr	r2, [r3, #4]
20008186:	68fb      	ldr	r3, [r7, #12]
20008188:	681b      	ldr	r3, [r3, #0]
2000818a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
2000818e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
20008190:	2300      	movs	r3, #0
}
20008192:	4618      	mov	r0, r3
20008194:	3710      	adds	r7, #16
20008196:	46bd      	mov	sp, r7
20008198:	bd80      	pop	{r7, pc}
2000819a:	bf00      	nop
2000819c:	20009531 	.word	0x20009531
200081a0:	200094e7 	.word	0x200094e7

200081a4 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
200081a4:	b480      	push	{r7}
200081a6:	b087      	sub	sp, #28
200081a8:	af00      	add	r7, sp, #0
200081aa:	60f8      	str	r0, [r7, #12]
200081ac:	60b9      	str	r1, [r7, #8]
200081ae:	607a      	str	r2, [r7, #4]
200081b0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
200081b2:	68fb      	ldr	r3, [r7, #12]
200081b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
200081b8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
200081ba:	68fb      	ldr	r3, [r7, #12]
200081bc:	685b      	ldr	r3, [r3, #4]
200081be:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
200081c0:	7dfb      	ldrb	r3, [r7, #23]
200081c2:	2b01      	cmp	r3, #1
200081c4:	d00c      	beq.n	200081e0 <HAL_SPI_TransmitReceive_IT+0x3c>
200081c6:	693b      	ldr	r3, [r7, #16]
200081c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
200081cc:	d106      	bne.n	200081dc <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
200081ce:	68fb      	ldr	r3, [r7, #12]
200081d0:	689b      	ldr	r3, [r3, #8]
200081d2:	2b00      	cmp	r3, #0
200081d4:	d102      	bne.n	200081dc <HAL_SPI_TransmitReceive_IT+0x38>
200081d6:	7dfb      	ldrb	r3, [r7, #23]
200081d8:	2b04      	cmp	r3, #4
200081da:	d001      	beq.n	200081e0 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
200081dc:	2302      	movs	r3, #2
200081de:	e061      	b.n	200082a4 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
200081e0:	68bb      	ldr	r3, [r7, #8]
200081e2:	2b00      	cmp	r3, #0
200081e4:	d005      	beq.n	200081f2 <HAL_SPI_TransmitReceive_IT+0x4e>
200081e6:	687b      	ldr	r3, [r7, #4]
200081e8:	2b00      	cmp	r3, #0
200081ea:	d002      	beq.n	200081f2 <HAL_SPI_TransmitReceive_IT+0x4e>
200081ec:	887b      	ldrh	r3, [r7, #2]
200081ee:	2b00      	cmp	r3, #0
200081f0:	d101      	bne.n	200081f6 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
200081f2:	2301      	movs	r3, #1
200081f4:	e056      	b.n	200082a4 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
200081f6:	68fb      	ldr	r3, [r7, #12]
200081f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
200081fc:	2b01      	cmp	r3, #1
200081fe:	d101      	bne.n	20008204 <HAL_SPI_TransmitReceive_IT+0x60>
20008200:	2302      	movs	r3, #2
20008202:	e04f      	b.n	200082a4 <HAL_SPI_TransmitReceive_IT+0x100>
20008204:	68fb      	ldr	r3, [r7, #12]
20008206:	2201      	movs	r2, #1
20008208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2000820c:	68fb      	ldr	r3, [r7, #12]
2000820e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20008212:	b2db      	uxtb	r3, r3
20008214:	2b04      	cmp	r3, #4
20008216:	d003      	beq.n	20008220 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20008218:	68fb      	ldr	r3, [r7, #12]
2000821a:	2205      	movs	r2, #5
2000821c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20008220:	68fb      	ldr	r3, [r7, #12]
20008222:	2200      	movs	r2, #0
20008224:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
20008226:	68fb      	ldr	r3, [r7, #12]
20008228:	68ba      	ldr	r2, [r7, #8]
2000822a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
2000822c:	68fb      	ldr	r3, [r7, #12]
2000822e:	887a      	ldrh	r2, [r7, #2]
20008230:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
20008232:	68fb      	ldr	r3, [r7, #12]
20008234:	887a      	ldrh	r2, [r7, #2]
20008236:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20008238:	68fb      	ldr	r3, [r7, #12]
2000823a:	687a      	ldr	r2, [r7, #4]
2000823c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
2000823e:	68fb      	ldr	r3, [r7, #12]
20008240:	887a      	ldrh	r2, [r7, #2]
20008242:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
20008244:	68fb      	ldr	r3, [r7, #12]
20008246:	887a      	ldrh	r2, [r7, #2]
20008248:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2000824a:	68fb      	ldr	r3, [r7, #12]
2000824c:	68db      	ldr	r3, [r3, #12]
2000824e:	2b00      	cmp	r3, #0
20008250:	d006      	beq.n	20008260 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
20008252:	68fb      	ldr	r3, [r7, #12]
20008254:	4a16      	ldr	r2, [pc, #88]	@ (200082b0 <HAL_SPI_TransmitReceive_IT+0x10c>)
20008256:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
20008258:	68fb      	ldr	r3, [r7, #12]
2000825a:	4a16      	ldr	r2, [pc, #88]	@ (200082b4 <HAL_SPI_TransmitReceive_IT+0x110>)
2000825c:	645a      	str	r2, [r3, #68]	@ 0x44
2000825e:	e005      	b.n	2000826c <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
20008260:	68fb      	ldr	r3, [r7, #12]
20008262:	4a15      	ldr	r2, [pc, #84]	@ (200082b8 <HAL_SPI_TransmitReceive_IT+0x114>)
20008264:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
20008266:	68fb      	ldr	r3, [r7, #12]
20008268:	4a14      	ldr	r2, [pc, #80]	@ (200082bc <HAL_SPI_TransmitReceive_IT+0x118>)
2000826a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000826c:	68fb      	ldr	r3, [r7, #12]
2000826e:	681b      	ldr	r3, [r3, #0]
20008270:	681b      	ldr	r3, [r3, #0]
20008272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20008276:	2b40      	cmp	r3, #64	@ 0x40
20008278:	d007      	beq.n	2000828a <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
2000827a:	68fb      	ldr	r3, [r7, #12]
2000827c:	681b      	ldr	r3, [r3, #0]
2000827e:	681a      	ldr	r2, [r3, #0]
20008280:	68fb      	ldr	r3, [r7, #12]
20008282:	681b      	ldr	r3, [r3, #0]
20008284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
20008288:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
2000828a:	68fb      	ldr	r3, [r7, #12]
2000828c:	2200      	movs	r2, #0
2000828e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
20008292:	68fb      	ldr	r3, [r7, #12]
20008294:	681b      	ldr	r3, [r3, #0]
20008296:	685a      	ldr	r2, [r3, #4]
20008298:	68fb      	ldr	r3, [r7, #12]
2000829a:	681b      	ldr	r3, [r3, #0]
2000829c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
200082a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
200082a2:	2300      	movs	r3, #0
}
200082a4:	4618      	mov	r0, r3
200082a6:	371c      	adds	r7, #28
200082a8:	46bd      	mov	sp, r7
200082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200082ae:	4770      	bx	lr
200082b0:	20009429 	.word	0x20009429
200082b4:	20009489 	.word	0x20009489
200082b8:	20009365 	.word	0x20009365
200082bc:	200093c9 	.word	0x200093c9

200082c0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
200082c0:	b580      	push	{r7, lr}
200082c2:	b084      	sub	sp, #16
200082c4:	af00      	add	r7, sp, #0
200082c6:	60f8      	str	r0, [r7, #12]
200082c8:	60b9      	str	r1, [r7, #8]
200082ca:	4613      	mov	r3, r2
200082cc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
200082ce:	68fb      	ldr	r3, [r7, #12]
200082d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
200082d4:	b2db      	uxtb	r3, r3
200082d6:	2b01      	cmp	r3, #1
200082d8:	d001      	beq.n	200082de <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
200082da:	2302      	movs	r3, #2
200082dc:	e097      	b.n	2000840e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
200082de:	68bb      	ldr	r3, [r7, #8]
200082e0:	2b00      	cmp	r3, #0
200082e2:	d002      	beq.n	200082ea <HAL_SPI_Transmit_DMA+0x2a>
200082e4:	88fb      	ldrh	r3, [r7, #6]
200082e6:	2b00      	cmp	r3, #0
200082e8:	d101      	bne.n	200082ee <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
200082ea:	2301      	movs	r3, #1
200082ec:	e08f      	b.n	2000840e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
200082ee:	68fb      	ldr	r3, [r7, #12]
200082f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
200082f4:	2b01      	cmp	r3, #1
200082f6:	d101      	bne.n	200082fc <HAL_SPI_Transmit_DMA+0x3c>
200082f8:	2302      	movs	r3, #2
200082fa:	e088      	b.n	2000840e <HAL_SPI_Transmit_DMA+0x14e>
200082fc:	68fb      	ldr	r3, [r7, #12]
200082fe:	2201      	movs	r2, #1
20008300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
20008304:	68fb      	ldr	r3, [r7, #12]
20008306:	2203      	movs	r2, #3
20008308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2000830c:	68fb      	ldr	r3, [r7, #12]
2000830e:	2200      	movs	r2, #0
20008310:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
20008312:	68fb      	ldr	r3, [r7, #12]
20008314:	68ba      	ldr	r2, [r7, #8]
20008316:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
20008318:	68fb      	ldr	r3, [r7, #12]
2000831a:	88fa      	ldrh	r2, [r7, #6]
2000831c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
2000831e:	68fb      	ldr	r3, [r7, #12]
20008320:	88fa      	ldrh	r2, [r7, #6]
20008322:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
20008324:	68fb      	ldr	r3, [r7, #12]
20008326:	2200      	movs	r2, #0
20008328:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
2000832a:	68fb      	ldr	r3, [r7, #12]
2000832c:	2200      	movs	r2, #0
2000832e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
20008330:	68fb      	ldr	r3, [r7, #12]
20008332:	2200      	movs	r2, #0
20008334:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
20008336:	68fb      	ldr	r3, [r7, #12]
20008338:	2200      	movs	r2, #0
2000833a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
2000833c:	68fb      	ldr	r3, [r7, #12]
2000833e:	2200      	movs	r2, #0
20008340:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20008342:	68fb      	ldr	r3, [r7, #12]
20008344:	689b      	ldr	r3, [r3, #8]
20008346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000834a:	d10f      	bne.n	2000836c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
2000834c:	68fb      	ldr	r3, [r7, #12]
2000834e:	681b      	ldr	r3, [r3, #0]
20008350:	681a      	ldr	r2, [r3, #0]
20008352:	68fb      	ldr	r3, [r7, #12]
20008354:	681b      	ldr	r3, [r3, #0]
20008356:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
2000835a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
2000835c:	68fb      	ldr	r3, [r7, #12]
2000835e:	681b      	ldr	r3, [r3, #0]
20008360:	681a      	ldr	r2, [r3, #0]
20008362:	68fb      	ldr	r3, [r7, #12]
20008364:	681b      	ldr	r3, [r3, #0]
20008366:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
2000836a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
2000836c:	68fb      	ldr	r3, [r7, #12]
2000836e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008370:	4a29      	ldr	r2, [pc, #164]	@ (20008418 <HAL_SPI_Transmit_DMA+0x158>)
20008372:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
20008374:	68fb      	ldr	r3, [r7, #12]
20008376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008378:	4a28      	ldr	r2, [pc, #160]	@ (2000841c <HAL_SPI_Transmit_DMA+0x15c>)
2000837a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
2000837c:	68fb      	ldr	r3, [r7, #12]
2000837e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008380:	4a27      	ldr	r2, [pc, #156]	@ (20008420 <HAL_SPI_Transmit_DMA+0x160>)
20008382:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
20008384:	68fb      	ldr	r3, [r7, #12]
20008386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008388:	2200      	movs	r2, #0
2000838a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
2000838c:	68fb      	ldr	r3, [r7, #12]
2000838e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
20008390:	68fb      	ldr	r3, [r7, #12]
20008392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20008394:	4619      	mov	r1, r3
20008396:	68fb      	ldr	r3, [r7, #12]
20008398:	681b      	ldr	r3, [r3, #0]
2000839a:	330c      	adds	r3, #12
2000839c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
2000839e:	68fb      	ldr	r3, [r7, #12]
200083a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
200083a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
200083a4:	f7fa fb09 	bl	200029ba <HAL_DMA_Start_IT>
200083a8:	4603      	mov	r3, r0
200083aa:	2b00      	cmp	r3, #0
200083ac:	d00b      	beq.n	200083c6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
200083ae:	68fb      	ldr	r3, [r7, #12]
200083b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200083b2:	f043 0210 	orr.w	r2, r3, #16
200083b6:	68fb      	ldr	r3, [r7, #12]
200083b8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
200083ba:	68fb      	ldr	r3, [r7, #12]
200083bc:	2200      	movs	r2, #0
200083be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
200083c2:	2301      	movs	r3, #1
200083c4:	e023      	b.n	2000840e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
200083c6:	68fb      	ldr	r3, [r7, #12]
200083c8:	681b      	ldr	r3, [r3, #0]
200083ca:	681b      	ldr	r3, [r3, #0]
200083cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200083d0:	2b40      	cmp	r3, #64	@ 0x40
200083d2:	d007      	beq.n	200083e4 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
200083d4:	68fb      	ldr	r3, [r7, #12]
200083d6:	681b      	ldr	r3, [r3, #0]
200083d8:	681a      	ldr	r2, [r3, #0]
200083da:	68fb      	ldr	r3, [r7, #12]
200083dc:	681b      	ldr	r3, [r3, #0]
200083de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
200083e2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
200083e4:	68fb      	ldr	r3, [r7, #12]
200083e6:	2200      	movs	r2, #0
200083e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
200083ec:	68fb      	ldr	r3, [r7, #12]
200083ee:	681b      	ldr	r3, [r3, #0]
200083f0:	685a      	ldr	r2, [r3, #4]
200083f2:	68fb      	ldr	r3, [r7, #12]
200083f4:	681b      	ldr	r3, [r3, #0]
200083f6:	f042 0220 	orr.w	r2, r2, #32
200083fa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
200083fc:	68fb      	ldr	r3, [r7, #12]
200083fe:	681b      	ldr	r3, [r3, #0]
20008400:	685a      	ldr	r2, [r3, #4]
20008402:	68fb      	ldr	r3, [r7, #12]
20008404:	681b      	ldr	r3, [r3, #0]
20008406:	f042 0202 	orr.w	r2, r2, #2
2000840a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
2000840c:	2300      	movs	r3, #0
}
2000840e:	4618      	mov	r0, r3
20008410:	3710      	adds	r7, #16
20008412:	46bd      	mov	sp, r7
20008414:	bd80      	pop	{r7, pc}
20008416:	bf00      	nop
20008418:	20009115 	.word	0x20009115
2000841c:	20008f35 	.word	0x20008f35
20008420:	20009169 	.word	0x20009169

20008424 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20008424:	b580      	push	{r7, lr}
20008426:	b084      	sub	sp, #16
20008428:	af00      	add	r7, sp, #0
2000842a:	60f8      	str	r0, [r7, #12]
2000842c:	60b9      	str	r1, [r7, #8]
2000842e:	4613      	mov	r3, r2
20008430:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
20008432:	68fb      	ldr	r3, [r7, #12]
20008434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20008438:	b2db      	uxtb	r3, r3
2000843a:	2b01      	cmp	r3, #1
2000843c:	d001      	beq.n	20008442 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
2000843e:	2302      	movs	r3, #2
20008440:	e0a9      	b.n	20008596 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
20008442:	68fb      	ldr	r3, [r7, #12]
20008444:	689b      	ldr	r3, [r3, #8]
20008446:	2b00      	cmp	r3, #0
20008448:	d110      	bne.n	2000846c <HAL_SPI_Receive_DMA+0x48>
2000844a:	68fb      	ldr	r3, [r7, #12]
2000844c:	685b      	ldr	r3, [r3, #4]
2000844e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
20008452:	d10b      	bne.n	2000846c <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
20008454:	68fb      	ldr	r3, [r7, #12]
20008456:	2204      	movs	r2, #4
20008458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
2000845c:	88fb      	ldrh	r3, [r7, #6]
2000845e:	68ba      	ldr	r2, [r7, #8]
20008460:	68b9      	ldr	r1, [r7, #8]
20008462:	68f8      	ldr	r0, [r7, #12]
20008464:	f000 f8a2 	bl	200085ac <HAL_SPI_TransmitReceive_DMA>
20008468:	4603      	mov	r3, r0
2000846a:	e094      	b.n	20008596 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
2000846c:	68bb      	ldr	r3, [r7, #8]
2000846e:	2b00      	cmp	r3, #0
20008470:	d002      	beq.n	20008478 <HAL_SPI_Receive_DMA+0x54>
20008472:	88fb      	ldrh	r3, [r7, #6]
20008474:	2b00      	cmp	r3, #0
20008476:	d101      	bne.n	2000847c <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
20008478:	2301      	movs	r3, #1
2000847a:	e08c      	b.n	20008596 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
2000847c:	68fb      	ldr	r3, [r7, #12]
2000847e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
20008482:	2b01      	cmp	r3, #1
20008484:	d101      	bne.n	2000848a <HAL_SPI_Receive_DMA+0x66>
20008486:	2302      	movs	r3, #2
20008488:	e085      	b.n	20008596 <HAL_SPI_Receive_DMA+0x172>
2000848a:	68fb      	ldr	r3, [r7, #12]
2000848c:	2201      	movs	r2, #1
2000848e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
20008492:	68fb      	ldr	r3, [r7, #12]
20008494:	2204      	movs	r2, #4
20008496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2000849a:	68fb      	ldr	r3, [r7, #12]
2000849c:	2200      	movs	r2, #0
2000849e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
200084a0:	68fb      	ldr	r3, [r7, #12]
200084a2:	68ba      	ldr	r2, [r7, #8]
200084a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
200084a6:	68fb      	ldr	r3, [r7, #12]
200084a8:	88fa      	ldrh	r2, [r7, #6]
200084aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
200084ac:	68fb      	ldr	r3, [r7, #12]
200084ae:	88fa      	ldrh	r2, [r7, #6]
200084b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
200084b2:	68fb      	ldr	r3, [r7, #12]
200084b4:	2200      	movs	r2, #0
200084b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
200084b8:	68fb      	ldr	r3, [r7, #12]
200084ba:	2200      	movs	r2, #0
200084bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
200084be:	68fb      	ldr	r3, [r7, #12]
200084c0:	2200      	movs	r2, #0
200084c2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
200084c4:	68fb      	ldr	r3, [r7, #12]
200084c6:	2200      	movs	r2, #0
200084c8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
200084ca:	68fb      	ldr	r3, [r7, #12]
200084cc:	689b      	ldr	r3, [r3, #8]
200084ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
200084d2:	d10f      	bne.n	200084f4 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
200084d4:	68fb      	ldr	r3, [r7, #12]
200084d6:	681b      	ldr	r3, [r3, #0]
200084d8:	681a      	ldr	r2, [r3, #0]
200084da:	68fb      	ldr	r3, [r7, #12]
200084dc:	681b      	ldr	r3, [r3, #0]
200084de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
200084e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
200084e4:	68fb      	ldr	r3, [r7, #12]
200084e6:	681b      	ldr	r3, [r3, #0]
200084e8:	681a      	ldr	r2, [r3, #0]
200084ea:	68fb      	ldr	r3, [r7, #12]
200084ec:	681b      	ldr	r3, [r3, #0]
200084ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
200084f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
200084f4:	68fb      	ldr	r3, [r7, #12]
200084f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
200084f8:	4a29      	ldr	r2, [pc, #164]	@ (200085a0 <HAL_SPI_Receive_DMA+0x17c>)
200084fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
200084fc:	68fb      	ldr	r3, [r7, #12]
200084fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008500:	4a28      	ldr	r2, [pc, #160]	@ (200085a4 <HAL_SPI_Receive_DMA+0x180>)
20008502:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
20008504:	68fb      	ldr	r3, [r7, #12]
20008506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008508:	4a27      	ldr	r2, [pc, #156]	@ (200085a8 <HAL_SPI_Receive_DMA+0x184>)
2000850a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
2000850c:	68fb      	ldr	r3, [r7, #12]
2000850e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008510:	2200      	movs	r2, #0
20008512:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
20008514:	68fb      	ldr	r3, [r7, #12]
20008516:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
20008518:	68fb      	ldr	r3, [r7, #12]
2000851a:	681b      	ldr	r3, [r3, #0]
2000851c:	330c      	adds	r3, #12
2000851e:	4619      	mov	r1, r3
20008520:	68fb      	ldr	r3, [r7, #12]
20008522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20008524:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
20008526:	68fb      	ldr	r3, [r7, #12]
20008528:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
2000852a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
2000852c:	f7fa fa45 	bl	200029ba <HAL_DMA_Start_IT>
20008530:	4603      	mov	r3, r0
20008532:	2b00      	cmp	r3, #0
20008534:	d00b      	beq.n	2000854e <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20008536:	68fb      	ldr	r3, [r7, #12]
20008538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000853a:	f043 0210 	orr.w	r2, r3, #16
2000853e:	68fb      	ldr	r3, [r7, #12]
20008540:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
20008542:	68fb      	ldr	r3, [r7, #12]
20008544:	2200      	movs	r2, #0
20008546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
2000854a:	2301      	movs	r3, #1
2000854c:	e023      	b.n	20008596 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000854e:	68fb      	ldr	r3, [r7, #12]
20008550:	681b      	ldr	r3, [r3, #0]
20008552:	681b      	ldr	r3, [r3, #0]
20008554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20008558:	2b40      	cmp	r3, #64	@ 0x40
2000855a:	d007      	beq.n	2000856c <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
2000855c:	68fb      	ldr	r3, [r7, #12]
2000855e:	681b      	ldr	r3, [r3, #0]
20008560:	681a      	ldr	r2, [r3, #0]
20008562:	68fb      	ldr	r3, [r7, #12]
20008564:	681b      	ldr	r3, [r3, #0]
20008566:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000856a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
2000856c:	68fb      	ldr	r3, [r7, #12]
2000856e:	2200      	movs	r2, #0
20008570:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20008574:	68fb      	ldr	r3, [r7, #12]
20008576:	681b      	ldr	r3, [r3, #0]
20008578:	685a      	ldr	r2, [r3, #4]
2000857a:	68fb      	ldr	r3, [r7, #12]
2000857c:	681b      	ldr	r3, [r3, #0]
2000857e:	f042 0220 	orr.w	r2, r2, #32
20008582:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20008584:	68fb      	ldr	r3, [r7, #12]
20008586:	681b      	ldr	r3, [r3, #0]
20008588:	685a      	ldr	r2, [r3, #4]
2000858a:	68fb      	ldr	r3, [r7, #12]
2000858c:	681b      	ldr	r3, [r3, #0]
2000858e:	f042 0201 	orr.w	r2, r2, #1
20008592:	605a      	str	r2, [r3, #4]

  return HAL_OK;
20008594:	2300      	movs	r3, #0
}
20008596:	4618      	mov	r0, r3
20008598:	3710      	adds	r7, #16
2000859a:	46bd      	mov	sp, r7
2000859c:	bd80      	pop	{r7, pc}
2000859e:	bf00      	nop
200085a0:	20009131 	.word	0x20009131
200085a4:	20008fdd 	.word	0x20008fdd
200085a8:	20009169 	.word	0x20009169

200085ac <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
200085ac:	b580      	push	{r7, lr}
200085ae:	b086      	sub	sp, #24
200085b0:	af00      	add	r7, sp, #0
200085b2:	60f8      	str	r0, [r7, #12]
200085b4:	60b9      	str	r1, [r7, #8]
200085b6:	607a      	str	r2, [r7, #4]
200085b8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
200085ba:	68fb      	ldr	r3, [r7, #12]
200085bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
200085c0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
200085c2:	68fb      	ldr	r3, [r7, #12]
200085c4:	685b      	ldr	r3, [r3, #4]
200085c6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
200085c8:	7dfb      	ldrb	r3, [r7, #23]
200085ca:	2b01      	cmp	r3, #1
200085cc:	d00c      	beq.n	200085e8 <HAL_SPI_TransmitReceive_DMA+0x3c>
200085ce:	693b      	ldr	r3, [r7, #16]
200085d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
200085d4:	d106      	bne.n	200085e4 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
200085d6:	68fb      	ldr	r3, [r7, #12]
200085d8:	689b      	ldr	r3, [r3, #8]
200085da:	2b00      	cmp	r3, #0
200085dc:	d102      	bne.n	200085e4 <HAL_SPI_TransmitReceive_DMA+0x38>
200085de:	7dfb      	ldrb	r3, [r7, #23]
200085e0:	2b04      	cmp	r3, #4
200085e2:	d001      	beq.n	200085e8 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
200085e4:	2302      	movs	r3, #2
200085e6:	e0cf      	b.n	20008788 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
200085e8:	68bb      	ldr	r3, [r7, #8]
200085ea:	2b00      	cmp	r3, #0
200085ec:	d005      	beq.n	200085fa <HAL_SPI_TransmitReceive_DMA+0x4e>
200085ee:	687b      	ldr	r3, [r7, #4]
200085f0:	2b00      	cmp	r3, #0
200085f2:	d002      	beq.n	200085fa <HAL_SPI_TransmitReceive_DMA+0x4e>
200085f4:	887b      	ldrh	r3, [r7, #2]
200085f6:	2b00      	cmp	r3, #0
200085f8:	d101      	bne.n	200085fe <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
200085fa:	2301      	movs	r3, #1
200085fc:	e0c4      	b.n	20008788 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
200085fe:	68fb      	ldr	r3, [r7, #12]
20008600:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
20008604:	2b01      	cmp	r3, #1
20008606:	d101      	bne.n	2000860c <HAL_SPI_TransmitReceive_DMA+0x60>
20008608:	2302      	movs	r3, #2
2000860a:	e0bd      	b.n	20008788 <HAL_SPI_TransmitReceive_DMA+0x1dc>
2000860c:	68fb      	ldr	r3, [r7, #12]
2000860e:	2201      	movs	r2, #1
20008610:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20008614:	68fb      	ldr	r3, [r7, #12]
20008616:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
2000861a:	b2db      	uxtb	r3, r3
2000861c:	2b04      	cmp	r3, #4
2000861e:	d003      	beq.n	20008628 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20008620:	68fb      	ldr	r3, [r7, #12]
20008622:	2205      	movs	r2, #5
20008624:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20008628:	68fb      	ldr	r3, [r7, #12]
2000862a:	2200      	movs	r2, #0
2000862c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2000862e:	68fb      	ldr	r3, [r7, #12]
20008630:	68ba      	ldr	r2, [r7, #8]
20008632:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
20008634:	68fb      	ldr	r3, [r7, #12]
20008636:	887a      	ldrh	r2, [r7, #2]
20008638:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
2000863a:	68fb      	ldr	r3, [r7, #12]
2000863c:	887a      	ldrh	r2, [r7, #2]
2000863e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20008640:	68fb      	ldr	r3, [r7, #12]
20008642:	687a      	ldr	r2, [r7, #4]
20008644:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
20008646:	68fb      	ldr	r3, [r7, #12]
20008648:	887a      	ldrh	r2, [r7, #2]
2000864a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
2000864c:	68fb      	ldr	r3, [r7, #12]
2000864e:	887a      	ldrh	r2, [r7, #2]
20008650:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20008652:	68fb      	ldr	r3, [r7, #12]
20008654:	2200      	movs	r2, #0
20008656:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
20008658:	68fb      	ldr	r3, [r7, #12]
2000865a:	2200      	movs	r2, #0
2000865c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
2000865e:	68fb      	ldr	r3, [r7, #12]
20008660:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20008664:	b2db      	uxtb	r3, r3
20008666:	2b04      	cmp	r3, #4
20008668:	d108      	bne.n	2000867c <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2000866a:	68fb      	ldr	r3, [r7, #12]
2000866c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000866e:	4a48      	ldr	r2, [pc, #288]	@ (20008790 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
20008670:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
20008672:	68fb      	ldr	r3, [r7, #12]
20008674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008676:	4a47      	ldr	r2, [pc, #284]	@ (20008794 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
20008678:	63da      	str	r2, [r3, #60]	@ 0x3c
2000867a:	e007      	b.n	2000868c <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2000867c:	68fb      	ldr	r3, [r7, #12]
2000867e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008680:	4a45      	ldr	r2, [pc, #276]	@ (20008798 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
20008682:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
20008684:	68fb      	ldr	r3, [r7, #12]
20008686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008688:	4a44      	ldr	r2, [pc, #272]	@ (2000879c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
2000868a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2000868c:	68fb      	ldr	r3, [r7, #12]
2000868e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008690:	4a43      	ldr	r2, [pc, #268]	@ (200087a0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
20008692:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
20008694:	68fb      	ldr	r3, [r7, #12]
20008696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008698:	2200      	movs	r2, #0
2000869a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
2000869c:	68fb      	ldr	r3, [r7, #12]
2000869e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
200086a0:	68fb      	ldr	r3, [r7, #12]
200086a2:	681b      	ldr	r3, [r3, #0]
200086a4:	330c      	adds	r3, #12
200086a6:	4619      	mov	r1, r3
200086a8:	68fb      	ldr	r3, [r7, #12]
200086aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200086ac:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
200086ae:	68fb      	ldr	r3, [r7, #12]
200086b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
200086b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
200086b4:	f7fa f981 	bl	200029ba <HAL_DMA_Start_IT>
200086b8:	4603      	mov	r3, r0
200086ba:	2b00      	cmp	r3, #0
200086bc:	d00b      	beq.n	200086d6 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
200086be:	68fb      	ldr	r3, [r7, #12]
200086c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200086c2:	f043 0210 	orr.w	r2, r3, #16
200086c6:	68fb      	ldr	r3, [r7, #12]
200086c8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
200086ca:	68fb      	ldr	r3, [r7, #12]
200086cc:	2200      	movs	r2, #0
200086ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
200086d2:	2301      	movs	r3, #1
200086d4:	e058      	b.n	20008788 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
200086d6:	68fb      	ldr	r3, [r7, #12]
200086d8:	681b      	ldr	r3, [r3, #0]
200086da:	685a      	ldr	r2, [r3, #4]
200086dc:	68fb      	ldr	r3, [r7, #12]
200086de:	681b      	ldr	r3, [r3, #0]
200086e0:	f042 0201 	orr.w	r2, r2, #1
200086e4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
200086e6:	68fb      	ldr	r3, [r7, #12]
200086e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200086ea:	2200      	movs	r2, #0
200086ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
200086ee:	68fb      	ldr	r3, [r7, #12]
200086f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200086f2:	2200      	movs	r2, #0
200086f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
200086f6:	68fb      	ldr	r3, [r7, #12]
200086f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200086fa:	2200      	movs	r2, #0
200086fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
200086fe:	68fb      	ldr	r3, [r7, #12]
20008700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008702:	2200      	movs	r2, #0
20008704:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20008706:	68fb      	ldr	r3, [r7, #12]
20008708:	6c98      	ldr	r0, [r3, #72]	@ 0x48
2000870a:	68fb      	ldr	r3, [r7, #12]
2000870c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2000870e:	4619      	mov	r1, r3
20008710:	68fb      	ldr	r3, [r7, #12]
20008712:	681b      	ldr	r3, [r3, #0]
20008714:	330c      	adds	r3, #12
20008716:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
20008718:	68fb      	ldr	r3, [r7, #12]
2000871a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
2000871c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
2000871e:	f7fa f94c 	bl	200029ba <HAL_DMA_Start_IT>
20008722:	4603      	mov	r3, r0
20008724:	2b00      	cmp	r3, #0
20008726:	d00b      	beq.n	20008740 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20008728:	68fb      	ldr	r3, [r7, #12]
2000872a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000872c:	f043 0210 	orr.w	r2, r3, #16
20008730:	68fb      	ldr	r3, [r7, #12]
20008732:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
20008734:	68fb      	ldr	r3, [r7, #12]
20008736:	2200      	movs	r2, #0
20008738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
2000873c:	2301      	movs	r3, #1
2000873e:	e023      	b.n	20008788 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20008740:	68fb      	ldr	r3, [r7, #12]
20008742:	681b      	ldr	r3, [r3, #0]
20008744:	681b      	ldr	r3, [r3, #0]
20008746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2000874a:	2b40      	cmp	r3, #64	@ 0x40
2000874c:	d007      	beq.n	2000875e <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
2000874e:	68fb      	ldr	r3, [r7, #12]
20008750:	681b      	ldr	r3, [r3, #0]
20008752:	681a      	ldr	r2, [r3, #0]
20008754:	68fb      	ldr	r3, [r7, #12]
20008756:	681b      	ldr	r3, [r3, #0]
20008758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
2000875c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
2000875e:	68fb      	ldr	r3, [r7, #12]
20008760:	2200      	movs	r2, #0
20008762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20008766:	68fb      	ldr	r3, [r7, #12]
20008768:	681b      	ldr	r3, [r3, #0]
2000876a:	685a      	ldr	r2, [r3, #4]
2000876c:	68fb      	ldr	r3, [r7, #12]
2000876e:	681b      	ldr	r3, [r3, #0]
20008770:	f042 0220 	orr.w	r2, r2, #32
20008774:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20008776:	68fb      	ldr	r3, [r7, #12]
20008778:	681b      	ldr	r3, [r3, #0]
2000877a:	685a      	ldr	r2, [r3, #4]
2000877c:	68fb      	ldr	r3, [r7, #12]
2000877e:	681b      	ldr	r3, [r3, #0]
20008780:	f042 0202 	orr.w	r2, r2, #2
20008784:	605a      	str	r2, [r3, #4]

  return HAL_OK;
20008786:	2300      	movs	r3, #0
}
20008788:	4618      	mov	r0, r3
2000878a:	3718      	adds	r7, #24
2000878c:	46bd      	mov	sp, r7
2000878e:	bd80      	pop	{r7, pc}
20008790:	20009131 	.word	0x20009131
20008794:	20008fdd 	.word	0x20008fdd
20008798:	2000914d 	.word	0x2000914d
2000879c:	20009085 	.word	0x20009085
200087a0:	20009169 	.word	0x20009169

200087a4 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
200087a4:	b580      	push	{r7, lr}
200087a6:	b088      	sub	sp, #32
200087a8:	af00      	add	r7, sp, #0
200087aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
200087ac:	2300      	movs	r3, #0
200087ae:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
200087b0:	4b6e      	ldr	r3, [pc, #440]	@ (2000896c <HAL_SPI_Abort+0x1c8>)
200087b2:	681b      	ldr	r3, [r3, #0]
200087b4:	4a6e      	ldr	r2, [pc, #440]	@ (20008970 <HAL_SPI_Abort+0x1cc>)
200087b6:	fba2 2303 	umull	r2, r3, r2, r3
200087ba:	0a5b      	lsrs	r3, r3, #9
200087bc:	2264      	movs	r2, #100	@ 0x64
200087be:	fb02 f303 	mul.w	r3, r2, r3
200087c2:	617b      	str	r3, [r7, #20]
  count = resetcount;
200087c4:	697b      	ldr	r3, [r7, #20]
200087c6:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
200087c8:	687b      	ldr	r3, [r7, #4]
200087ca:	681b      	ldr	r3, [r3, #0]
200087cc:	685a      	ldr	r2, [r3, #4]
200087ce:	687b      	ldr	r3, [r7, #4]
200087d0:	681b      	ldr	r3, [r3, #0]
200087d2:	f022 0220 	bic.w	r2, r2, #32
200087d6:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
200087d8:	687b      	ldr	r3, [r7, #4]
200087da:	681b      	ldr	r3, [r3, #0]
200087dc:	685b      	ldr	r3, [r3, #4]
200087de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200087e2:	2b80      	cmp	r3, #128	@ 0x80
200087e4:	d117      	bne.n	20008816 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
200087e6:	687b      	ldr	r3, [r7, #4]
200087e8:	4a62      	ldr	r2, [pc, #392]	@ (20008974 <HAL_SPI_Abort+0x1d0>)
200087ea:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
200087ec:	69bb      	ldr	r3, [r7, #24]
200087ee:	2b00      	cmp	r3, #0
200087f0:	d106      	bne.n	20008800 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
200087f2:	687b      	ldr	r3, [r7, #4]
200087f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200087f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
200087fa:	687b      	ldr	r3, [r7, #4]
200087fc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
200087fe:	e008      	b.n	20008812 <HAL_SPI_Abort+0x6e>
      }
      count--;
20008800:	69bb      	ldr	r3, [r7, #24]
20008802:	3b01      	subs	r3, #1
20008804:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20008806:	687b      	ldr	r3, [r7, #4]
20008808:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
2000880c:	b2db      	uxtb	r3, r3
2000880e:	2b07      	cmp	r3, #7
20008810:	d1ec      	bne.n	200087ec <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
20008812:	697b      	ldr	r3, [r7, #20]
20008814:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
20008816:	687b      	ldr	r3, [r7, #4]
20008818:	681b      	ldr	r3, [r3, #0]
2000881a:	685b      	ldr	r3, [r3, #4]
2000881c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20008820:	2b40      	cmp	r3, #64	@ 0x40
20008822:	d117      	bne.n	20008854 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
20008824:	687b      	ldr	r3, [r7, #4]
20008826:	4a54      	ldr	r2, [pc, #336]	@ (20008978 <HAL_SPI_Abort+0x1d4>)
20008828:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
2000882a:	69bb      	ldr	r3, [r7, #24]
2000882c:	2b00      	cmp	r3, #0
2000882e:	d106      	bne.n	2000883e <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008830:	687b      	ldr	r3, [r7, #4]
20008832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008834:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20008838:	687b      	ldr	r3, [r7, #4]
2000883a:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
2000883c:	e008      	b.n	20008850 <HAL_SPI_Abort+0xac>
      }
      count--;
2000883e:	69bb      	ldr	r3, [r7, #24]
20008840:	3b01      	subs	r3, #1
20008842:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20008844:	687b      	ldr	r3, [r7, #4]
20008846:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
2000884a:	b2db      	uxtb	r3, r3
2000884c:	2b07      	cmp	r3, #7
2000884e:	d1ec      	bne.n	2000882a <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
20008850:	697b      	ldr	r3, [r7, #20]
20008852:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
20008854:	687b      	ldr	r3, [r7, #4]
20008856:	681b      	ldr	r3, [r3, #0]
20008858:	685b      	ldr	r3, [r3, #4]
2000885a:	f003 0302 	and.w	r3, r3, #2
2000885e:	2b02      	cmp	r3, #2
20008860:	d12e      	bne.n	200088c0 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
20008862:	687b      	ldr	r3, [r7, #4]
20008864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008866:	2b00      	cmp	r3, #0
20008868:	d02a      	beq.n	200088c0 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
2000886a:	687b      	ldr	r3, [r7, #4]
2000886c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2000886e:	2200      	movs	r2, #0
20008870:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
20008872:	687b      	ldr	r3, [r7, #4]
20008874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008876:	4618      	mov	r0, r3
20008878:	f7fa f8f7 	bl	20002a6a <HAL_DMA_Abort>
2000887c:	4603      	mov	r3, r0
2000887e:	2b00      	cmp	r3, #0
20008880:	d002      	beq.n	20008888 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20008882:	687b      	ldr	r3, [r7, #4]
20008884:	2240      	movs	r2, #64	@ 0x40
20008886:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
20008888:	687b      	ldr	r3, [r7, #4]
2000888a:	681b      	ldr	r3, [r3, #0]
2000888c:	685a      	ldr	r2, [r3, #4]
2000888e:	687b      	ldr	r3, [r7, #4]
20008890:	681b      	ldr	r3, [r3, #0]
20008892:	f022 0202 	bic.w	r2, r2, #2
20008896:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
20008898:	69bb      	ldr	r3, [r7, #24]
2000889a:	2b00      	cmp	r3, #0
2000889c:	d106      	bne.n	200088ac <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2000889e:	687b      	ldr	r3, [r7, #4]
200088a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200088a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
200088a6:	687b      	ldr	r3, [r7, #4]
200088a8:	655a      	str	r2, [r3, #84]	@ 0x54
          break;
200088aa:	e009      	b.n	200088c0 <HAL_SPI_Abort+0x11c>
        }
        count--;
200088ac:	69bb      	ldr	r3, [r7, #24]
200088ae:	3b01      	subs	r3, #1
200088b0:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
200088b2:	687b      	ldr	r3, [r7, #4]
200088b4:	681b      	ldr	r3, [r3, #0]
200088b6:	689b      	ldr	r3, [r3, #8]
200088b8:	f003 0302 	and.w	r3, r3, #2
200088bc:	2b00      	cmp	r3, #0
200088be:	d0eb      	beq.n	20008898 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
200088c0:	687b      	ldr	r3, [r7, #4]
200088c2:	681b      	ldr	r3, [r3, #0]
200088c4:	685b      	ldr	r3, [r3, #4]
200088c6:	f003 0301 	and.w	r3, r3, #1
200088ca:	2b01      	cmp	r3, #1
200088cc:	d122      	bne.n	20008914 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
200088ce:	687b      	ldr	r3, [r7, #4]
200088d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
200088d2:	2b00      	cmp	r3, #0
200088d4:	d01e      	beq.n	20008914 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
200088d6:	687b      	ldr	r3, [r7, #4]
200088d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
200088da:	2200      	movs	r2, #0
200088dc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
200088de:	687b      	ldr	r3, [r7, #4]
200088e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
200088e2:	4618      	mov	r0, r3
200088e4:	f7fa f8c1 	bl	20002a6a <HAL_DMA_Abort>
200088e8:	4603      	mov	r3, r0
200088ea:	2b00      	cmp	r3, #0
200088ec:	d002      	beq.n	200088f4 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
200088ee:	687b      	ldr	r3, [r7, #4]
200088f0:	2240      	movs	r2, #64	@ 0x40
200088f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
200088f4:	687b      	ldr	r3, [r7, #4]
200088f6:	681b      	ldr	r3, [r3, #0]
200088f8:	681a      	ldr	r2, [r3, #0]
200088fa:	687b      	ldr	r3, [r7, #4]
200088fc:	681b      	ldr	r3, [r3, #0]
200088fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20008902:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
20008904:	687b      	ldr	r3, [r7, #4]
20008906:	681b      	ldr	r3, [r3, #0]
20008908:	685a      	ldr	r2, [r3, #4]
2000890a:	687b      	ldr	r3, [r7, #4]
2000890c:	681b      	ldr	r3, [r3, #0]
2000890e:	f022 0201 	bic.w	r2, r2, #1
20008912:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
20008914:	687b      	ldr	r3, [r7, #4]
20008916:	2200      	movs	r2, #0
20008918:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
2000891a:	687b      	ldr	r3, [r7, #4]
2000891c:	2200      	movs	r2, #0
2000891e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
20008920:	687b      	ldr	r3, [r7, #4]
20008922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008924:	2b40      	cmp	r3, #64	@ 0x40
20008926:	d102      	bne.n	2000892e <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
20008928:	2301      	movs	r3, #1
2000892a:	77fb      	strb	r3, [r7, #31]
2000892c:	e002      	b.n	20008934 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2000892e:	687b      	ldr	r3, [r7, #4]
20008930:	2200      	movs	r2, #0
20008932:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008934:	2300      	movs	r3, #0
20008936:	613b      	str	r3, [r7, #16]
20008938:	687b      	ldr	r3, [r7, #4]
2000893a:	681b      	ldr	r3, [r3, #0]
2000893c:	68db      	ldr	r3, [r3, #12]
2000893e:	613b      	str	r3, [r7, #16]
20008940:	687b      	ldr	r3, [r7, #4]
20008942:	681b      	ldr	r3, [r3, #0]
20008944:	689b      	ldr	r3, [r3, #8]
20008946:	613b      	str	r3, [r7, #16]
20008948:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
2000894a:	2300      	movs	r3, #0
2000894c:	60fb      	str	r3, [r7, #12]
2000894e:	687b      	ldr	r3, [r7, #4]
20008950:	681b      	ldr	r3, [r3, #0]
20008952:	689b      	ldr	r3, [r3, #8]
20008954:	60fb      	str	r3, [r7, #12]
20008956:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
20008958:	687b      	ldr	r3, [r7, #4]
2000895a:	2201      	movs	r2, #1
2000895c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return errorcode;
20008960:	7ffb      	ldrb	r3, [r7, #31]
}
20008962:	4618      	mov	r0, r3
20008964:	3720      	adds	r7, #32
20008966:	46bd      	mov	sp, r7
20008968:	bd80      	pop	{r7, pc}
2000896a:	bf00      	nop
2000896c:	200003b0 	.word	0x200003b0
20008970:	057619f1 	.word	0x057619f1
20008974:	20009b41 	.word	0x20009b41
20008978:	20009ab1 	.word	0x20009ab1

2000897c <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
2000897c:	b580      	push	{r7, lr}
2000897e:	b088      	sub	sp, #32
20008980:	af00      	add	r7, sp, #0
20008982:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
20008984:	2300      	movs	r3, #0
20008986:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
20008988:	2301      	movs	r3, #1
2000898a:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
2000898c:	4b72      	ldr	r3, [pc, #456]	@ (20008b58 <HAL_SPI_Abort_IT+0x1dc>)
2000898e:	681b      	ldr	r3, [r3, #0]
20008990:	4a72      	ldr	r2, [pc, #456]	@ (20008b5c <HAL_SPI_Abort_IT+0x1e0>)
20008992:	fba2 2303 	umull	r2, r3, r2, r3
20008996:	0a5b      	lsrs	r3, r3, #9
20008998:	2264      	movs	r2, #100	@ 0x64
2000899a:	fb02 f303 	mul.w	r3, r2, r3
2000899e:	613b      	str	r3, [r7, #16]
  count = resetcount;
200089a0:	693b      	ldr	r3, [r7, #16]
200089a2:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
200089a4:	687b      	ldr	r3, [r7, #4]
200089a6:	681b      	ldr	r3, [r3, #0]
200089a8:	685a      	ldr	r2, [r3, #4]
200089aa:	687b      	ldr	r3, [r7, #4]
200089ac:	681b      	ldr	r3, [r3, #0]
200089ae:	f022 0220 	bic.w	r2, r2, #32
200089b2:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
200089b4:	687b      	ldr	r3, [r7, #4]
200089b6:	681b      	ldr	r3, [r3, #0]
200089b8:	685b      	ldr	r3, [r3, #4]
200089ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
200089be:	2b80      	cmp	r3, #128	@ 0x80
200089c0:	d117      	bne.n	200089f2 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
200089c2:	687b      	ldr	r3, [r7, #4]
200089c4:	4a66      	ldr	r2, [pc, #408]	@ (20008b60 <HAL_SPI_Abort_IT+0x1e4>)
200089c6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
200089c8:	697b      	ldr	r3, [r7, #20]
200089ca:	2b00      	cmp	r3, #0
200089cc:	d106      	bne.n	200089dc <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
200089ce:	687b      	ldr	r3, [r7, #4]
200089d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200089d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
200089d6:	687b      	ldr	r3, [r7, #4]
200089d8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
200089da:	e008      	b.n	200089ee <HAL_SPI_Abort_IT+0x72>
      }
      count--;
200089dc:	697b      	ldr	r3, [r7, #20]
200089de:	3b01      	subs	r3, #1
200089e0:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
200089e2:	687b      	ldr	r3, [r7, #4]
200089e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
200089e8:	b2db      	uxtb	r3, r3
200089ea:	2b07      	cmp	r3, #7
200089ec:	d1ec      	bne.n	200089c8 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
200089ee:	693b      	ldr	r3, [r7, #16]
200089f0:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
200089f2:	687b      	ldr	r3, [r7, #4]
200089f4:	681b      	ldr	r3, [r3, #0]
200089f6:	685b      	ldr	r3, [r3, #4]
200089f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
200089fc:	2b40      	cmp	r3, #64	@ 0x40
200089fe:	d117      	bne.n	20008a30 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
20008a00:	687b      	ldr	r3, [r7, #4]
20008a02:	4a58      	ldr	r2, [pc, #352]	@ (20008b64 <HAL_SPI_Abort_IT+0x1e8>)
20008a04:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
20008a06:	697b      	ldr	r3, [r7, #20]
20008a08:	2b00      	cmp	r3, #0
20008a0a:	d106      	bne.n	20008a1a <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008a0c:	687b      	ldr	r3, [r7, #4]
20008a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008a10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20008a14:	687b      	ldr	r3, [r7, #4]
20008a16:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
20008a18:	e008      	b.n	20008a2c <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
20008a1a:	697b      	ldr	r3, [r7, #20]
20008a1c:	3b01      	subs	r3, #1
20008a1e:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20008a20:	687b      	ldr	r3, [r7, #4]
20008a22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20008a26:	b2db      	uxtb	r3, r3
20008a28:	2b07      	cmp	r3, #7
20008a2a:	d1ec      	bne.n	20008a06 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
20008a2c:	693b      	ldr	r3, [r7, #16]
20008a2e:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
20008a30:	687b      	ldr	r3, [r7, #4]
20008a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008a34:	2b00      	cmp	r3, #0
20008a36:	d00f      	beq.n	20008a58 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
20008a38:	687b      	ldr	r3, [r7, #4]
20008a3a:	681b      	ldr	r3, [r3, #0]
20008a3c:	685b      	ldr	r3, [r3, #4]
20008a3e:	f003 0302 	and.w	r3, r3, #2
20008a42:	2b02      	cmp	r3, #2
20008a44:	d104      	bne.n	20008a50 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
20008a46:	687b      	ldr	r3, [r7, #4]
20008a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008a4a:	4a47      	ldr	r2, [pc, #284]	@ (20008b68 <HAL_SPI_Abort_IT+0x1ec>)
20008a4c:	651a      	str	r2, [r3, #80]	@ 0x50
20008a4e:	e003      	b.n	20008a58 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
20008a50:	687b      	ldr	r3, [r7, #4]
20008a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008a54:	2200      	movs	r2, #0
20008a56:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
20008a58:	687b      	ldr	r3, [r7, #4]
20008a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008a5c:	2b00      	cmp	r3, #0
20008a5e:	d00f      	beq.n	20008a80 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
20008a60:	687b      	ldr	r3, [r7, #4]
20008a62:	681b      	ldr	r3, [r3, #0]
20008a64:	685b      	ldr	r3, [r3, #4]
20008a66:	f003 0301 	and.w	r3, r3, #1
20008a6a:	2b01      	cmp	r3, #1
20008a6c:	d104      	bne.n	20008a78 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
20008a6e:	687b      	ldr	r3, [r7, #4]
20008a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008a72:	4a3e      	ldr	r2, [pc, #248]	@ (20008b6c <HAL_SPI_Abort_IT+0x1f0>)
20008a74:	651a      	str	r2, [r3, #80]	@ 0x50
20008a76:	e003      	b.n	20008a80 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
20008a78:	687b      	ldr	r3, [r7, #4]
20008a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008a7c:	2200      	movs	r2, #0
20008a7e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
20008a80:	687b      	ldr	r3, [r7, #4]
20008a82:	681b      	ldr	r3, [r3, #0]
20008a84:	685b      	ldr	r3, [r3, #4]
20008a86:	f003 0302 	and.w	r3, r3, #2
20008a8a:	2b02      	cmp	r3, #2
20008a8c:	d115      	bne.n	20008aba <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
20008a8e:	687b      	ldr	r3, [r7, #4]
20008a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008a92:	2b00      	cmp	r3, #0
20008a94:	d011      	beq.n	20008aba <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
20008a96:	687b      	ldr	r3, [r7, #4]
20008a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008a9a:	4618      	mov	r0, r3
20008a9c:	f7fa f855 	bl	20002b4a <HAL_DMA_Abort_IT>
20008aa0:	4603      	mov	r3, r0
20008aa2:	2b00      	cmp	r3, #0
20008aa4:	d007      	beq.n	20008ab6 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
20008aa6:	687b      	ldr	r3, [r7, #4]
20008aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008aaa:	2200      	movs	r2, #0
20008aac:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20008aae:	687b      	ldr	r3, [r7, #4]
20008ab0:	2240      	movs	r2, #64	@ 0x40
20008ab2:	655a      	str	r2, [r3, #84]	@ 0x54
20008ab4:	e001      	b.n	20008aba <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
20008ab6:	2300      	movs	r3, #0
20008ab8:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
20008aba:	687b      	ldr	r3, [r7, #4]
20008abc:	681b      	ldr	r3, [r3, #0]
20008abe:	685b      	ldr	r3, [r3, #4]
20008ac0:	f003 0301 	and.w	r3, r3, #1
20008ac4:	2b01      	cmp	r3, #1
20008ac6:	d115      	bne.n	20008af4 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
20008ac8:	687b      	ldr	r3, [r7, #4]
20008aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008acc:	2b00      	cmp	r3, #0
20008ace:	d011      	beq.n	20008af4 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
20008ad0:	687b      	ldr	r3, [r7, #4]
20008ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008ad4:	4618      	mov	r0, r3
20008ad6:	f7fa f838 	bl	20002b4a <HAL_DMA_Abort_IT>
20008ada:	4603      	mov	r3, r0
20008adc:	2b00      	cmp	r3, #0
20008ade:	d007      	beq.n	20008af0 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
20008ae0:	687b      	ldr	r3, [r7, #4]
20008ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008ae4:	2200      	movs	r2, #0
20008ae6:	651a      	str	r2, [r3, #80]	@ 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20008ae8:	687b      	ldr	r3, [r7, #4]
20008aea:	2240      	movs	r2, #64	@ 0x40
20008aec:	655a      	str	r2, [r3, #84]	@ 0x54
20008aee:	e001      	b.n	20008af4 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
20008af0:	2300      	movs	r3, #0
20008af2:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
20008af4:	69bb      	ldr	r3, [r7, #24]
20008af6:	2b01      	cmp	r3, #1
20008af8:	d128      	bne.n	20008b4c <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
20008afa:	687b      	ldr	r3, [r7, #4]
20008afc:	2200      	movs	r2, #0
20008afe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->TxXferCount = 0U;
20008b00:	687b      	ldr	r3, [r7, #4]
20008b02:	2200      	movs	r2, #0
20008b04:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
20008b06:	687b      	ldr	r3, [r7, #4]
20008b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008b0a:	2b40      	cmp	r3, #64	@ 0x40
20008b0c:	d102      	bne.n	20008b14 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
20008b0e:	2301      	movs	r3, #1
20008b10:	77fb      	strb	r3, [r7, #31]
20008b12:	e002      	b.n	20008b1a <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20008b14:	687b      	ldr	r3, [r7, #4]
20008b16:	2200      	movs	r2, #0
20008b18:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008b1a:	2300      	movs	r3, #0
20008b1c:	60fb      	str	r3, [r7, #12]
20008b1e:	687b      	ldr	r3, [r7, #4]
20008b20:	681b      	ldr	r3, [r3, #0]
20008b22:	68db      	ldr	r3, [r3, #12]
20008b24:	60fb      	str	r3, [r7, #12]
20008b26:	687b      	ldr	r3, [r7, #4]
20008b28:	681b      	ldr	r3, [r3, #0]
20008b2a:	689b      	ldr	r3, [r3, #8]
20008b2c:	60fb      	str	r3, [r7, #12]
20008b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
20008b30:	2300      	movs	r3, #0
20008b32:	60bb      	str	r3, [r7, #8]
20008b34:	687b      	ldr	r3, [r7, #4]
20008b36:	681b      	ldr	r3, [r3, #0]
20008b38:	689b      	ldr	r3, [r3, #8]
20008b3a:	60bb      	str	r3, [r7, #8]
20008b3c:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
20008b3e:	687b      	ldr	r3, [r7, #4]
20008b40:	2201      	movs	r2, #1
20008b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
20008b46:	6878      	ldr	r0, [r7, #4]
20008b48:	f000 f9d0 	bl	20008eec <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
20008b4c:	7ffb      	ldrb	r3, [r7, #31]
}
20008b4e:	4618      	mov	r0, r3
20008b50:	3720      	adds	r7, #32
20008b52:	46bd      	mov	sp, r7
20008b54:	bd80      	pop	{r7, pc}
20008b56:	bf00      	nop
20008b58:	200003b0 	.word	0x200003b0
20008b5c:	057619f1 	.word	0x057619f1
20008b60:	20009b41 	.word	0x20009b41
20008b64:	20009ab1 	.word	0x20009ab1
20008b68:	200091d1 	.word	0x200091d1
20008b6c:	200092a5 	.word	0x200092a5

20008b70 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
20008b70:	b480      	push	{r7}
20008b72:	b083      	sub	sp, #12
20008b74:	af00      	add	r7, sp, #0
20008b76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
20008b78:	687b      	ldr	r3, [r7, #4]
20008b7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
20008b7e:	2b01      	cmp	r3, #1
20008b80:	d101      	bne.n	20008b86 <HAL_SPI_DMAPause+0x16>
20008b82:	2302      	movs	r3, #2
20008b84:	e010      	b.n	20008ba8 <HAL_SPI_DMAPause+0x38>
20008b86:	687b      	ldr	r3, [r7, #4]
20008b88:	2201      	movs	r2, #1
20008b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20008b8e:	687b      	ldr	r3, [r7, #4]
20008b90:	681b      	ldr	r3, [r3, #0]
20008b92:	685a      	ldr	r2, [r3, #4]
20008b94:	687b      	ldr	r3, [r7, #4]
20008b96:	681b      	ldr	r3, [r3, #0]
20008b98:	f022 0203 	bic.w	r2, r2, #3
20008b9c:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008b9e:	687b      	ldr	r3, [r7, #4]
20008ba0:	2200      	movs	r2, #0
20008ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
20008ba6:	2300      	movs	r3, #0
}
20008ba8:	4618      	mov	r0, r3
20008baa:	370c      	adds	r7, #12
20008bac:	46bd      	mov	sp, r7
20008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
20008bb2:	4770      	bx	lr

20008bb4 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
20008bb4:	b480      	push	{r7}
20008bb6:	b083      	sub	sp, #12
20008bb8:	af00      	add	r7, sp, #0
20008bba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
20008bbc:	687b      	ldr	r3, [r7, #4]
20008bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
20008bc2:	2b01      	cmp	r3, #1
20008bc4:	d101      	bne.n	20008bca <HAL_SPI_DMAResume+0x16>
20008bc6:	2302      	movs	r3, #2
20008bc8:	e010      	b.n	20008bec <HAL_SPI_DMAResume+0x38>
20008bca:	687b      	ldr	r3, [r7, #4]
20008bcc:	2201      	movs	r2, #1
20008bce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20008bd2:	687b      	ldr	r3, [r7, #4]
20008bd4:	681b      	ldr	r3, [r3, #0]
20008bd6:	685a      	ldr	r2, [r3, #4]
20008bd8:	687b      	ldr	r3, [r7, #4]
20008bda:	681b      	ldr	r3, [r3, #0]
20008bdc:	f042 0203 	orr.w	r2, r2, #3
20008be0:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008be2:	687b      	ldr	r3, [r7, #4]
20008be4:	2200      	movs	r2, #0
20008be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
20008bea:	2300      	movs	r3, #0
}
20008bec:	4618      	mov	r0, r3
20008bee:	370c      	adds	r7, #12
20008bf0:	46bd      	mov	sp, r7
20008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
20008bf6:	4770      	bx	lr

20008bf8 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
20008bf8:	b580      	push	{r7, lr}
20008bfa:	b084      	sub	sp, #16
20008bfc:	af00      	add	r7, sp, #0
20008bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
20008c00:	2300      	movs	r3, #0
20008c02:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
20008c04:	687b      	ldr	r3, [r7, #4]
20008c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008c08:	2b00      	cmp	r3, #0
20008c0a:	d00f      	beq.n	20008c2c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
20008c0c:	687b      	ldr	r3, [r7, #4]
20008c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008c10:	4618      	mov	r0, r3
20008c12:	f7f9 ff2a 	bl	20002a6a <HAL_DMA_Abort>
20008c16:	4603      	mov	r3, r0
20008c18:	2b00      	cmp	r3, #0
20008c1a:	d007      	beq.n	20008c2c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20008c1c:	687b      	ldr	r3, [r7, #4]
20008c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008c20:	f043 0210 	orr.w	r2, r3, #16
20008c24:	687b      	ldr	r3, [r7, #4]
20008c26:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_ERROR;
20008c28:	2301      	movs	r3, #1
20008c2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
20008c2c:	687b      	ldr	r3, [r7, #4]
20008c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008c30:	2b00      	cmp	r3, #0
20008c32:	d00f      	beq.n	20008c54 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
20008c34:	687b      	ldr	r3, [r7, #4]
20008c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008c38:	4618      	mov	r0, r3
20008c3a:	f7f9 ff16 	bl	20002a6a <HAL_DMA_Abort>
20008c3e:	4603      	mov	r3, r0
20008c40:	2b00      	cmp	r3, #0
20008c42:	d007      	beq.n	20008c54 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20008c44:	687b      	ldr	r3, [r7, #4]
20008c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008c48:	f043 0210 	orr.w	r2, r3, #16
20008c4c:	687b      	ldr	r3, [r7, #4]
20008c4e:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_ERROR;
20008c50:	2301      	movs	r3, #1
20008c52:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20008c54:	687b      	ldr	r3, [r7, #4]
20008c56:	681b      	ldr	r3, [r3, #0]
20008c58:	685a      	ldr	r2, [r3, #4]
20008c5a:	687b      	ldr	r3, [r7, #4]
20008c5c:	681b      	ldr	r3, [r3, #0]
20008c5e:	f022 0203 	bic.w	r2, r2, #3
20008c62:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
20008c64:	687b      	ldr	r3, [r7, #4]
20008c66:	2201      	movs	r2, #1
20008c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  return errorcode;
20008c6c:	7bfb      	ldrb	r3, [r7, #15]
}
20008c6e:	4618      	mov	r0, r3
20008c70:	3710      	adds	r7, #16
20008c72:	46bd      	mov	sp, r7
20008c74:	bd80      	pop	{r7, pc}
	...

20008c78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
20008c78:	b580      	push	{r7, lr}
20008c7a:	b088      	sub	sp, #32
20008c7c:	af00      	add	r7, sp, #0
20008c7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
20008c80:	687b      	ldr	r3, [r7, #4]
20008c82:	681b      	ldr	r3, [r3, #0]
20008c84:	685b      	ldr	r3, [r3, #4]
20008c86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
20008c88:	687b      	ldr	r3, [r7, #4]
20008c8a:	681b      	ldr	r3, [r3, #0]
20008c8c:	689b      	ldr	r3, [r3, #8]
20008c8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
20008c90:	69bb      	ldr	r3, [r7, #24]
20008c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20008c96:	2b00      	cmp	r3, #0
20008c98:	d10e      	bne.n	20008cb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
20008c9a:	69bb      	ldr	r3, [r7, #24]
20008c9c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
20008ca0:	2b00      	cmp	r3, #0
20008ca2:	d009      	beq.n	20008cb8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
20008ca4:	69fb      	ldr	r3, [r7, #28]
20008ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20008caa:	2b00      	cmp	r3, #0
20008cac:	d004      	beq.n	20008cb8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
20008cae:	687b      	ldr	r3, [r7, #4]
20008cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20008cb2:	6878      	ldr	r0, [r7, #4]
20008cb4:	4798      	blx	r3
    return;
20008cb6:	e0ce      	b.n	20008e56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
20008cb8:	69bb      	ldr	r3, [r7, #24]
20008cba:	f003 0302 	and.w	r3, r3, #2
20008cbe:	2b00      	cmp	r3, #0
20008cc0:	d009      	beq.n	20008cd6 <HAL_SPI_IRQHandler+0x5e>
20008cc2:	69fb      	ldr	r3, [r7, #28]
20008cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
20008cc8:	2b00      	cmp	r3, #0
20008cca:	d004      	beq.n	20008cd6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
20008ccc:	687b      	ldr	r3, [r7, #4]
20008cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
20008cd0:	6878      	ldr	r0, [r7, #4]
20008cd2:	4798      	blx	r3
    return;
20008cd4:	e0bf      	b.n	20008e56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
20008cd6:	69bb      	ldr	r3, [r7, #24]
20008cd8:	f003 0320 	and.w	r3, r3, #32
20008cdc:	2b00      	cmp	r3, #0
20008cde:	d10a      	bne.n	20008cf6 <HAL_SPI_IRQHandler+0x7e>
20008ce0:	69bb      	ldr	r3, [r7, #24]
20008ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20008ce6:	2b00      	cmp	r3, #0
20008ce8:	d105      	bne.n	20008cf6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
20008cea:	69bb      	ldr	r3, [r7, #24]
20008cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20008cf0:	2b00      	cmp	r3, #0
20008cf2:	f000 80b0 	beq.w	20008e56 <HAL_SPI_IRQHandler+0x1de>
20008cf6:	69fb      	ldr	r3, [r7, #28]
20008cf8:	f003 0320 	and.w	r3, r3, #32
20008cfc:	2b00      	cmp	r3, #0
20008cfe:	f000 80aa 	beq.w	20008e56 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
20008d02:	69bb      	ldr	r3, [r7, #24]
20008d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
20008d08:	2b00      	cmp	r3, #0
20008d0a:	d023      	beq.n	20008d54 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
20008d0c:	687b      	ldr	r3, [r7, #4]
20008d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20008d12:	b2db      	uxtb	r3, r3
20008d14:	2b03      	cmp	r3, #3
20008d16:	d011      	beq.n	20008d3c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
20008d18:	687b      	ldr	r3, [r7, #4]
20008d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008d1c:	f043 0204 	orr.w	r2, r3, #4
20008d20:	687b      	ldr	r3, [r7, #4]
20008d22:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008d24:	2300      	movs	r3, #0
20008d26:	617b      	str	r3, [r7, #20]
20008d28:	687b      	ldr	r3, [r7, #4]
20008d2a:	681b      	ldr	r3, [r3, #0]
20008d2c:	68db      	ldr	r3, [r3, #12]
20008d2e:	617b      	str	r3, [r7, #20]
20008d30:	687b      	ldr	r3, [r7, #4]
20008d32:	681b      	ldr	r3, [r3, #0]
20008d34:	689b      	ldr	r3, [r3, #8]
20008d36:	617b      	str	r3, [r7, #20]
20008d38:	697b      	ldr	r3, [r7, #20]
20008d3a:	e00b      	b.n	20008d54 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008d3c:	2300      	movs	r3, #0
20008d3e:	613b      	str	r3, [r7, #16]
20008d40:	687b      	ldr	r3, [r7, #4]
20008d42:	681b      	ldr	r3, [r3, #0]
20008d44:	68db      	ldr	r3, [r3, #12]
20008d46:	613b      	str	r3, [r7, #16]
20008d48:	687b      	ldr	r3, [r7, #4]
20008d4a:	681b      	ldr	r3, [r3, #0]
20008d4c:	689b      	ldr	r3, [r3, #8]
20008d4e:	613b      	str	r3, [r7, #16]
20008d50:	693b      	ldr	r3, [r7, #16]
        return;
20008d52:	e080      	b.n	20008e56 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
20008d54:	69bb      	ldr	r3, [r7, #24]
20008d56:	f003 0320 	and.w	r3, r3, #32
20008d5a:	2b00      	cmp	r3, #0
20008d5c:	d014      	beq.n	20008d88 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
20008d5e:	687b      	ldr	r3, [r7, #4]
20008d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008d62:	f043 0201 	orr.w	r2, r3, #1
20008d66:	687b      	ldr	r3, [r7, #4]
20008d68:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
20008d6a:	2300      	movs	r3, #0
20008d6c:	60fb      	str	r3, [r7, #12]
20008d6e:	687b      	ldr	r3, [r7, #4]
20008d70:	681b      	ldr	r3, [r3, #0]
20008d72:	689b      	ldr	r3, [r3, #8]
20008d74:	60fb      	str	r3, [r7, #12]
20008d76:	687b      	ldr	r3, [r7, #4]
20008d78:	681b      	ldr	r3, [r3, #0]
20008d7a:	681a      	ldr	r2, [r3, #0]
20008d7c:	687b      	ldr	r3, [r7, #4]
20008d7e:	681b      	ldr	r3, [r3, #0]
20008d80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20008d84:	601a      	str	r2, [r3, #0]
20008d86:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
20008d88:	69bb      	ldr	r3, [r7, #24]
20008d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20008d8e:	2b00      	cmp	r3, #0
20008d90:	d00c      	beq.n	20008dac <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
20008d92:	687b      	ldr	r3, [r7, #4]
20008d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008d96:	f043 0208 	orr.w	r2, r3, #8
20008d9a:	687b      	ldr	r3, [r7, #4]
20008d9c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
20008d9e:	2300      	movs	r3, #0
20008da0:	60bb      	str	r3, [r7, #8]
20008da2:	687b      	ldr	r3, [r7, #4]
20008da4:	681b      	ldr	r3, [r3, #0]
20008da6:	689b      	ldr	r3, [r3, #8]
20008da8:	60bb      	str	r3, [r7, #8]
20008daa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20008dac:	687b      	ldr	r3, [r7, #4]
20008dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008db0:	2b00      	cmp	r3, #0
20008db2:	d04f      	beq.n	20008e54 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
20008db4:	687b      	ldr	r3, [r7, #4]
20008db6:	681b      	ldr	r3, [r3, #0]
20008db8:	685a      	ldr	r2, [r3, #4]
20008dba:	687b      	ldr	r3, [r7, #4]
20008dbc:	681b      	ldr	r3, [r3, #0]
20008dbe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
20008dc2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
20008dc4:	687b      	ldr	r3, [r7, #4]
20008dc6:	2201      	movs	r2, #1
20008dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
20008dcc:	69fb      	ldr	r3, [r7, #28]
20008dce:	f003 0302 	and.w	r3, r3, #2
20008dd2:	2b00      	cmp	r3, #0
20008dd4:	d104      	bne.n	20008de0 <HAL_SPI_IRQHandler+0x168>
20008dd6:	69fb      	ldr	r3, [r7, #28]
20008dd8:	f003 0301 	and.w	r3, r3, #1
20008ddc:	2b00      	cmp	r3, #0
20008dde:	d034      	beq.n	20008e4a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
20008de0:	687b      	ldr	r3, [r7, #4]
20008de2:	681b      	ldr	r3, [r3, #0]
20008de4:	685a      	ldr	r2, [r3, #4]
20008de6:	687b      	ldr	r3, [r7, #4]
20008de8:	681b      	ldr	r3, [r3, #0]
20008dea:	f022 0203 	bic.w	r2, r2, #3
20008dee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
20008df0:	687b      	ldr	r3, [r7, #4]
20008df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008df4:	2b00      	cmp	r3, #0
20008df6:	d011      	beq.n	20008e1c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
20008df8:	687b      	ldr	r3, [r7, #4]
20008dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008dfc:	4a17      	ldr	r2, [pc, #92]	@ (20008e5c <HAL_SPI_IRQHandler+0x1e4>)
20008dfe:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
20008e00:	687b      	ldr	r3, [r7, #4]
20008e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20008e04:	4618      	mov	r0, r3
20008e06:	f7f9 fea0 	bl	20002b4a <HAL_DMA_Abort_IT>
20008e0a:	4603      	mov	r3, r0
20008e0c:	2b00      	cmp	r3, #0
20008e0e:	d005      	beq.n	20008e1c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008e10:	687b      	ldr	r3, [r7, #4]
20008e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008e14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20008e18:	687b      	ldr	r3, [r7, #4]
20008e1a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
20008e1c:	687b      	ldr	r3, [r7, #4]
20008e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008e20:	2b00      	cmp	r3, #0
20008e22:	d016      	beq.n	20008e52 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
20008e24:	687b      	ldr	r3, [r7, #4]
20008e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008e28:	4a0c      	ldr	r2, [pc, #48]	@ (20008e5c <HAL_SPI_IRQHandler+0x1e4>)
20008e2a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
20008e2c:	687b      	ldr	r3, [r7, #4]
20008e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20008e30:	4618      	mov	r0, r3
20008e32:	f7f9 fe8a 	bl	20002b4a <HAL_DMA_Abort_IT>
20008e36:	4603      	mov	r3, r0
20008e38:	2b00      	cmp	r3, #0
20008e3a:	d00a      	beq.n	20008e52 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008e3c:	687b      	ldr	r3, [r7, #4]
20008e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008e40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20008e44:	687b      	ldr	r3, [r7, #4]
20008e46:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
20008e48:	e003      	b.n	20008e52 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
20008e4a:	6878      	ldr	r0, [r7, #4]
20008e4c:	f000 f844 	bl	20008ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
20008e50:	e000      	b.n	20008e54 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
20008e52:	bf00      	nop
    return;
20008e54:	bf00      	nop
  }
}
20008e56:	3720      	adds	r7, #32
20008e58:	46bd      	mov	sp, r7
20008e5a:	bd80      	pop	{r7, pc}
20008e5c:	200091a9 	.word	0x200091a9

20008e60 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
20008e60:	b480      	push	{r7}
20008e62:	b083      	sub	sp, #12
20008e64:	af00      	add	r7, sp, #0
20008e66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
20008e68:	bf00      	nop
20008e6a:	370c      	adds	r7, #12
20008e6c:	46bd      	mov	sp, r7
20008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e72:	4770      	bx	lr

20008e74 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
20008e74:	b480      	push	{r7}
20008e76:	b083      	sub	sp, #12
20008e78:	af00      	add	r7, sp, #0
20008e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
20008e7c:	bf00      	nop
20008e7e:	370c      	adds	r7, #12
20008e80:	46bd      	mov	sp, r7
20008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e86:	4770      	bx	lr

20008e88 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
20008e88:	b480      	push	{r7}
20008e8a:	b083      	sub	sp, #12
20008e8c:	af00      	add	r7, sp, #0
20008e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
20008e90:	bf00      	nop
20008e92:	370c      	adds	r7, #12
20008e94:	46bd      	mov	sp, r7
20008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e9a:	4770      	bx	lr

20008e9c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
20008e9c:	b480      	push	{r7}
20008e9e:	b083      	sub	sp, #12
20008ea0:	af00      	add	r7, sp, #0
20008ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
20008ea4:	bf00      	nop
20008ea6:	370c      	adds	r7, #12
20008ea8:	46bd      	mov	sp, r7
20008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
20008eae:	4770      	bx	lr

20008eb0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
20008eb0:	b480      	push	{r7}
20008eb2:	b083      	sub	sp, #12
20008eb4:	af00      	add	r7, sp, #0
20008eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
20008eb8:	bf00      	nop
20008eba:	370c      	adds	r7, #12
20008ebc:	46bd      	mov	sp, r7
20008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
20008ec2:	4770      	bx	lr

20008ec4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
20008ec4:	b480      	push	{r7}
20008ec6:	b083      	sub	sp, #12
20008ec8:	af00      	add	r7, sp, #0
20008eca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
20008ecc:	bf00      	nop
20008ece:	370c      	adds	r7, #12
20008ed0:	46bd      	mov	sp, r7
20008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
20008ed6:	4770      	bx	lr

20008ed8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
20008ed8:	b480      	push	{r7}
20008eda:	b083      	sub	sp, #12
20008edc:	af00      	add	r7, sp, #0
20008ede:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
20008ee0:	bf00      	nop
20008ee2:	370c      	adds	r7, #12
20008ee4:	46bd      	mov	sp, r7
20008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
20008eea:	4770      	bx	lr

20008eec <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
20008eec:	b480      	push	{r7}
20008eee:	b083      	sub	sp, #12
20008ef0:	af00      	add	r7, sp, #0
20008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
20008ef4:	bf00      	nop
20008ef6:	370c      	adds	r7, #12
20008ef8:	46bd      	mov	sp, r7
20008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
20008efe:	4770      	bx	lr

20008f00 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
20008f00:	b480      	push	{r7}
20008f02:	b083      	sub	sp, #12
20008f04:	af00      	add	r7, sp, #0
20008f06:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
20008f08:	687b      	ldr	r3, [r7, #4]
20008f0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20008f0e:	b2db      	uxtb	r3, r3
}
20008f10:	4618      	mov	r0, r3
20008f12:	370c      	adds	r7, #12
20008f14:	46bd      	mov	sp, r7
20008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f1a:	4770      	bx	lr

20008f1c <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(const SPI_HandleTypeDef *hspi)
{
20008f1c:	b480      	push	{r7}
20008f1e:	b083      	sub	sp, #12
20008f20:	af00      	add	r7, sp, #0
20008f22:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
20008f24:	687b      	ldr	r3, [r7, #4]
20008f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
20008f28:	4618      	mov	r0, r3
20008f2a:	370c      	adds	r7, #12
20008f2c:	46bd      	mov	sp, r7
20008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
20008f32:	4770      	bx	lr

20008f34 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
20008f34:	b580      	push	{r7, lr}
20008f36:	b086      	sub	sp, #24
20008f38:	af00      	add	r7, sp, #0
20008f3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008f3c:	687b      	ldr	r3, [r7, #4]
20008f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20008f40:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20008f42:	f7f7 fd68 	bl	20000a16 <HAL_GetTick>
20008f46:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
20008f48:	687b      	ldr	r3, [r7, #4]
20008f4a:	681b      	ldr	r3, [r3, #0]
20008f4c:	681b      	ldr	r3, [r3, #0]
20008f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20008f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20008f56:	d03b      	beq.n	20008fd0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
20008f58:	697b      	ldr	r3, [r7, #20]
20008f5a:	681b      	ldr	r3, [r3, #0]
20008f5c:	685a      	ldr	r2, [r3, #4]
20008f5e:	697b      	ldr	r3, [r7, #20]
20008f60:	681b      	ldr	r3, [r3, #0]
20008f62:	f022 0220 	bic.w	r2, r2, #32
20008f66:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20008f68:	697b      	ldr	r3, [r7, #20]
20008f6a:	681b      	ldr	r3, [r3, #0]
20008f6c:	685a      	ldr	r2, [r3, #4]
20008f6e:	697b      	ldr	r3, [r7, #20]
20008f70:	681b      	ldr	r3, [r3, #0]
20008f72:	f022 0202 	bic.w	r2, r2, #2
20008f76:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
20008f78:	693a      	ldr	r2, [r7, #16]
20008f7a:	2164      	movs	r1, #100	@ 0x64
20008f7c:	6978      	ldr	r0, [r7, #20]
20008f7e:	f000 fc2d 	bl	200097dc <SPI_EndRxTxTransaction>
20008f82:	4603      	mov	r3, r0
20008f84:	2b00      	cmp	r3, #0
20008f86:	d005      	beq.n	20008f94 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20008f88:	697b      	ldr	r3, [r7, #20]
20008f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008f8c:	f043 0220 	orr.w	r2, r3, #32
20008f90:	697b      	ldr	r3, [r7, #20]
20008f92:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20008f94:	697b      	ldr	r3, [r7, #20]
20008f96:	689b      	ldr	r3, [r3, #8]
20008f98:	2b00      	cmp	r3, #0
20008f9a:	d10a      	bne.n	20008fb2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008f9c:	2300      	movs	r3, #0
20008f9e:	60fb      	str	r3, [r7, #12]
20008fa0:	697b      	ldr	r3, [r7, #20]
20008fa2:	681b      	ldr	r3, [r3, #0]
20008fa4:	68db      	ldr	r3, [r3, #12]
20008fa6:	60fb      	str	r3, [r7, #12]
20008fa8:	697b      	ldr	r3, [r7, #20]
20008faa:	681b      	ldr	r3, [r3, #0]
20008fac:	689b      	ldr	r3, [r3, #8]
20008fae:	60fb      	str	r3, [r7, #12]
20008fb0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
20008fb2:	697b      	ldr	r3, [r7, #20]
20008fb4:	2200      	movs	r2, #0
20008fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
20008fb8:	697b      	ldr	r3, [r7, #20]
20008fba:	2201      	movs	r2, #1
20008fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20008fc0:	697b      	ldr	r3, [r7, #20]
20008fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20008fc4:	2b00      	cmp	r3, #0
20008fc6:	d003      	beq.n	20008fd0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
20008fc8:	6978      	ldr	r0, [r7, #20]
20008fca:	f7ff ff85 	bl	20008ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
20008fce:	e002      	b.n	20008fd6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
20008fd0:	6978      	ldr	r0, [r7, #20]
20008fd2:	f7ff ff45 	bl	20008e60 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20008fd6:	3718      	adds	r7, #24
20008fd8:	46bd      	mov	sp, r7
20008fda:	bd80      	pop	{r7, pc}

20008fdc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
20008fdc:	b580      	push	{r7, lr}
20008fde:	b084      	sub	sp, #16
20008fe0:	af00      	add	r7, sp, #0
20008fe2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008fe4:	687b      	ldr	r3, [r7, #4]
20008fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20008fe8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20008fea:	f7f7 fd14 	bl	20000a16 <HAL_GetTick>
20008fee:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
20008ff0:	687b      	ldr	r3, [r7, #4]
20008ff2:	681b      	ldr	r3, [r3, #0]
20008ff4:	681b      	ldr	r3, [r3, #0]
20008ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
20008ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
20008ffe:	d03b      	beq.n	20009078 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
20009000:	68fb      	ldr	r3, [r7, #12]
20009002:	681b      	ldr	r3, [r3, #0]
20009004:	685a      	ldr	r2, [r3, #4]
20009006:	68fb      	ldr	r3, [r7, #12]
20009008:	681b      	ldr	r3, [r3, #0]
2000900a:	f022 0220 	bic.w	r2, r2, #32
2000900e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
20009010:	68fb      	ldr	r3, [r7, #12]
20009012:	689b      	ldr	r3, [r3, #8]
20009014:	2b00      	cmp	r3, #0
20009016:	d10d      	bne.n	20009034 <SPI_DMAReceiveCplt+0x58>
20009018:	68fb      	ldr	r3, [r7, #12]
2000901a:	685b      	ldr	r3, [r3, #4]
2000901c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
20009020:	d108      	bne.n	20009034 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20009022:	68fb      	ldr	r3, [r7, #12]
20009024:	681b      	ldr	r3, [r3, #0]
20009026:	685a      	ldr	r2, [r3, #4]
20009028:	68fb      	ldr	r3, [r7, #12]
2000902a:	681b      	ldr	r3, [r3, #0]
2000902c:	f022 0203 	bic.w	r2, r2, #3
20009030:	605a      	str	r2, [r3, #4]
20009032:	e007      	b.n	20009044 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20009034:	68fb      	ldr	r3, [r7, #12]
20009036:	681b      	ldr	r3, [r3, #0]
20009038:	685a      	ldr	r2, [r3, #4]
2000903a:	68fb      	ldr	r3, [r7, #12]
2000903c:	681b      	ldr	r3, [r3, #0]
2000903e:	f022 0201 	bic.w	r2, r2, #1
20009042:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
20009044:	68ba      	ldr	r2, [r7, #8]
20009046:	2164      	movs	r1, #100	@ 0x64
20009048:	68f8      	ldr	r0, [r7, #12]
2000904a:	f000 fb61 	bl	20009710 <SPI_EndRxTransaction>
2000904e:	4603      	mov	r3, r0
20009050:	2b00      	cmp	r3, #0
20009052:	d002      	beq.n	2000905a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20009054:	68fb      	ldr	r3, [r7, #12]
20009056:	2220      	movs	r2, #32
20009058:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
2000905a:	68fb      	ldr	r3, [r7, #12]
2000905c:	2200      	movs	r2, #0
2000905e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
20009060:	68fb      	ldr	r3, [r7, #12]
20009062:	2201      	movs	r2, #1
20009064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20009068:	68fb      	ldr	r3, [r7, #12]
2000906a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000906c:	2b00      	cmp	r3, #0
2000906e:	d003      	beq.n	20009078 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
20009070:	68f8      	ldr	r0, [r7, #12]
20009072:	f7ff ff31 	bl	20008ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
20009076:	e002      	b.n	2000907e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
20009078:	68f8      	ldr	r0, [r7, #12]
2000907a:	f7ff fefb 	bl	20008e74 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000907e:	3710      	adds	r7, #16
20009080:	46bd      	mov	sp, r7
20009082:	bd80      	pop	{r7, pc}

20009084 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
20009084:	b580      	push	{r7, lr}
20009086:	b084      	sub	sp, #16
20009088:	af00      	add	r7, sp, #0
2000908a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000908c:	687b      	ldr	r3, [r7, #4]
2000908e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009090:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20009092:	f7f7 fcc0 	bl	20000a16 <HAL_GetTick>
20009096:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
20009098:	687b      	ldr	r3, [r7, #4]
2000909a:	681b      	ldr	r3, [r3, #0]
2000909c:	681b      	ldr	r3, [r3, #0]
2000909e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
200090a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
200090a6:	d02f      	beq.n	20009108 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
200090a8:	68fb      	ldr	r3, [r7, #12]
200090aa:	681b      	ldr	r3, [r3, #0]
200090ac:	685a      	ldr	r2, [r3, #4]
200090ae:	68fb      	ldr	r3, [r7, #12]
200090b0:	681b      	ldr	r3, [r3, #0]
200090b2:	f022 0220 	bic.w	r2, r2, #32
200090b6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
200090b8:	68ba      	ldr	r2, [r7, #8]
200090ba:	2164      	movs	r1, #100	@ 0x64
200090bc:	68f8      	ldr	r0, [r7, #12]
200090be:	f000 fb8d 	bl	200097dc <SPI_EndRxTxTransaction>
200090c2:	4603      	mov	r3, r0
200090c4:	2b00      	cmp	r3, #0
200090c6:	d005      	beq.n	200090d4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200090c8:	68fb      	ldr	r3, [r7, #12]
200090ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200090cc:	f043 0220 	orr.w	r2, r3, #32
200090d0:	68fb      	ldr	r3, [r7, #12]
200090d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
200090d4:	68fb      	ldr	r3, [r7, #12]
200090d6:	681b      	ldr	r3, [r3, #0]
200090d8:	685a      	ldr	r2, [r3, #4]
200090da:	68fb      	ldr	r3, [r7, #12]
200090dc:	681b      	ldr	r3, [r3, #0]
200090de:	f022 0203 	bic.w	r2, r2, #3
200090e2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
200090e4:	68fb      	ldr	r3, [r7, #12]
200090e6:	2200      	movs	r2, #0
200090e8:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
200090ea:	68fb      	ldr	r3, [r7, #12]
200090ec:	2200      	movs	r2, #0
200090ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
200090f0:	68fb      	ldr	r3, [r7, #12]
200090f2:	2201      	movs	r2, #1
200090f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
200090f8:	68fb      	ldr	r3, [r7, #12]
200090fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200090fc:	2b00      	cmp	r3, #0
200090fe:	d003      	beq.n	20009108 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
20009100:	68f8      	ldr	r0, [r7, #12]
20009102:	f7ff fee9 	bl	20008ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
20009106:	e002      	b.n	2000910e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
20009108:	68f8      	ldr	r0, [r7, #12]
2000910a:	f7ff febd 	bl	20008e88 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000910e:	3710      	adds	r7, #16
20009110:	46bd      	mov	sp, r7
20009112:	bd80      	pop	{r7, pc}

20009114 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
20009114:	b580      	push	{r7, lr}
20009116:	b084      	sub	sp, #16
20009118:	af00      	add	r7, sp, #0
2000911a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000911c:	687b      	ldr	r3, [r7, #4]
2000911e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009120:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
20009122:	68f8      	ldr	r0, [r7, #12]
20009124:	f7ff feba 	bl	20008e9c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20009128:	bf00      	nop
2000912a:	3710      	adds	r7, #16
2000912c:	46bd      	mov	sp, r7
2000912e:	bd80      	pop	{r7, pc}

20009130 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
20009130:	b580      	push	{r7, lr}
20009132:	b084      	sub	sp, #16
20009134:	af00      	add	r7, sp, #0
20009136:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20009138:	687b      	ldr	r3, [r7, #4]
2000913a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000913c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
2000913e:	68f8      	ldr	r0, [r7, #12]
20009140:	f7ff feb6 	bl	20008eb0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20009144:	bf00      	nop
20009146:	3710      	adds	r7, #16
20009148:	46bd      	mov	sp, r7
2000914a:	bd80      	pop	{r7, pc}

2000914c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
2000914c:	b580      	push	{r7, lr}
2000914e:	b084      	sub	sp, #16
20009150:	af00      	add	r7, sp, #0
20009152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20009154:	687b      	ldr	r3, [r7, #4]
20009156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009158:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2000915a:	68f8      	ldr	r0, [r7, #12]
2000915c:	f7ff feb2 	bl	20008ec4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20009160:	bf00      	nop
20009162:	3710      	adds	r7, #16
20009164:	46bd      	mov	sp, r7
20009166:	bd80      	pop	{r7, pc}

20009168 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
20009168:	b580      	push	{r7, lr}
2000916a:	b084      	sub	sp, #16
2000916c:	af00      	add	r7, sp, #0
2000916e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20009170:	687b      	ldr	r3, [r7, #4]
20009172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009174:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20009176:	68fb      	ldr	r3, [r7, #12]
20009178:	681b      	ldr	r3, [r3, #0]
2000917a:	685a      	ldr	r2, [r3, #4]
2000917c:	68fb      	ldr	r3, [r7, #12]
2000917e:	681b      	ldr	r3, [r3, #0]
20009180:	f022 0203 	bic.w	r2, r2, #3
20009184:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20009186:	68fb      	ldr	r3, [r7, #12]
20009188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000918a:	f043 0210 	orr.w	r2, r3, #16
2000918e:	68fb      	ldr	r3, [r7, #12]
20009190:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
20009192:	68fb      	ldr	r3, [r7, #12]
20009194:	2201      	movs	r2, #1
20009196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
2000919a:	68f8      	ldr	r0, [r7, #12]
2000919c:	f7ff fe9c 	bl	20008ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
200091a0:	bf00      	nop
200091a2:	3710      	adds	r7, #16
200091a4:	46bd      	mov	sp, r7
200091a6:	bd80      	pop	{r7, pc}

200091a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
200091a8:	b580      	push	{r7, lr}
200091aa:	b084      	sub	sp, #16
200091ac:	af00      	add	r7, sp, #0
200091ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
200091b0:	687b      	ldr	r3, [r7, #4]
200091b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200091b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
200091b6:	68fb      	ldr	r3, [r7, #12]
200091b8:	2200      	movs	r2, #0
200091ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
200091bc:	68fb      	ldr	r3, [r7, #12]
200091be:	2200      	movs	r2, #0
200091c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
200091c2:	68f8      	ldr	r0, [r7, #12]
200091c4:	f7ff fe88 	bl	20008ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
200091c8:	bf00      	nop
200091ca:	3710      	adds	r7, #16
200091cc:	46bd      	mov	sp, r7
200091ce:	bd80      	pop	{r7, pc}

200091d0 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
200091d0:	b580      	push	{r7, lr}
200091d2:	b086      	sub	sp, #24
200091d4:	af00      	add	r7, sp, #0
200091d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
200091d8:	687b      	ldr	r3, [r7, #4]
200091da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200091dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
200091de:	697b      	ldr	r3, [r7, #20]
200091e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
200091e2:	2200      	movs	r2, #0
200091e4:	651a      	str	r2, [r3, #80]	@ 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
200091e6:	4b2d      	ldr	r3, [pc, #180]	@ (2000929c <SPI_DMATxAbortCallback+0xcc>)
200091e8:	681b      	ldr	r3, [r3, #0]
200091ea:	4a2d      	ldr	r2, [pc, #180]	@ (200092a0 <SPI_DMATxAbortCallback+0xd0>)
200091ec:	fba2 2303 	umull	r2, r3, r2, r3
200091f0:	0a5b      	lsrs	r3, r3, #9
200091f2:	2264      	movs	r2, #100	@ 0x64
200091f4:	fb02 f303 	mul.w	r3, r2, r3
200091f8:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
200091fa:	697b      	ldr	r3, [r7, #20]
200091fc:	681b      	ldr	r3, [r3, #0]
200091fe:	685a      	ldr	r2, [r3, #4]
20009200:	697b      	ldr	r3, [r7, #20]
20009202:	681b      	ldr	r3, [r3, #0]
20009204:	f022 0202 	bic.w	r2, r2, #2
20009208:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
2000920a:	693b      	ldr	r3, [r7, #16]
2000920c:	2b00      	cmp	r3, #0
2000920e:	d106      	bne.n	2000921e <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20009210:	697b      	ldr	r3, [r7, #20]
20009212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20009214:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20009218:	697b      	ldr	r3, [r7, #20]
2000921a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
2000921c:	e009      	b.n	20009232 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
2000921e:	693b      	ldr	r3, [r7, #16]
20009220:	3b01      	subs	r3, #1
20009222:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20009224:	697b      	ldr	r3, [r7, #20]
20009226:	681b      	ldr	r3, [r3, #0]
20009228:	689b      	ldr	r3, [r3, #8]
2000922a:	f003 0302 	and.w	r3, r3, #2
2000922e:	2b00      	cmp	r3, #0
20009230:	d0eb      	beq.n	2000920a <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
20009232:	697b      	ldr	r3, [r7, #20]
20009234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
20009236:	2b00      	cmp	r3, #0
20009238:	d004      	beq.n	20009244 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
2000923a:	697b      	ldr	r3, [r7, #20]
2000923c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2000923e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
20009240:	2b00      	cmp	r3, #0
20009242:	d126      	bne.n	20009292 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
20009244:	697b      	ldr	r3, [r7, #20]
20009246:	2200      	movs	r2, #0
20009248:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
2000924a:	697b      	ldr	r3, [r7, #20]
2000924c:	2200      	movs	r2, #0
2000924e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
20009250:	697b      	ldr	r3, [r7, #20]
20009252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20009254:	2b40      	cmp	r3, #64	@ 0x40
20009256:	d002      	beq.n	2000925e <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20009258:	697b      	ldr	r3, [r7, #20]
2000925a:	2200      	movs	r2, #0
2000925c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000925e:	2300      	movs	r3, #0
20009260:	60fb      	str	r3, [r7, #12]
20009262:	697b      	ldr	r3, [r7, #20]
20009264:	681b      	ldr	r3, [r3, #0]
20009266:	68db      	ldr	r3, [r3, #12]
20009268:	60fb      	str	r3, [r7, #12]
2000926a:	697b      	ldr	r3, [r7, #20]
2000926c:	681b      	ldr	r3, [r3, #0]
2000926e:	689b      	ldr	r3, [r3, #8]
20009270:	60fb      	str	r3, [r7, #12]
20009272:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
20009274:	2300      	movs	r3, #0
20009276:	60bb      	str	r3, [r7, #8]
20009278:	697b      	ldr	r3, [r7, #20]
2000927a:	681b      	ldr	r3, [r3, #0]
2000927c:	689b      	ldr	r3, [r3, #8]
2000927e:	60bb      	str	r3, [r7, #8]
20009280:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
20009282:	697b      	ldr	r3, [r7, #20]
20009284:	2201      	movs	r2, #1
20009286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
2000928a:	6978      	ldr	r0, [r7, #20]
2000928c:	f7ff fe2e 	bl	20008eec <HAL_SPI_AbortCpltCallback>
20009290:	e000      	b.n	20009294 <SPI_DMATxAbortCallback+0xc4>
      return;
20009292:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20009294:	3718      	adds	r7, #24
20009296:	46bd      	mov	sp, r7
20009298:	bd80      	pop	{r7, pc}
2000929a:	bf00      	nop
2000929c:	200003b0 	.word	0x200003b0
200092a0:	057619f1 	.word	0x057619f1

200092a4 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
200092a4:	b580      	push	{r7, lr}
200092a6:	b086      	sub	sp, #24
200092a8:	af00      	add	r7, sp, #0
200092aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
200092ac:	687b      	ldr	r3, [r7, #4]
200092ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200092b0:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
200092b2:	697b      	ldr	r3, [r7, #20]
200092b4:	681b      	ldr	r3, [r3, #0]
200092b6:	681a      	ldr	r2, [r3, #0]
200092b8:	697b      	ldr	r3, [r7, #20]
200092ba:	681b      	ldr	r3, [r3, #0]
200092bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
200092c0:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
200092c2:	697b      	ldr	r3, [r7, #20]
200092c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
200092c6:	2200      	movs	r2, #0
200092c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
200092ca:	697b      	ldr	r3, [r7, #20]
200092cc:	681b      	ldr	r3, [r3, #0]
200092ce:	685a      	ldr	r2, [r3, #4]
200092d0:	697b      	ldr	r3, [r7, #20]
200092d2:	681b      	ldr	r3, [r3, #0]
200092d4:	f022 0201 	bic.w	r2, r2, #1
200092d8:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
200092da:	f7f7 fb9c 	bl	20000a16 <HAL_GetTick>
200092de:	4603      	mov	r3, r0
200092e0:	461a      	mov	r2, r3
200092e2:	2164      	movs	r1, #100	@ 0x64
200092e4:	6978      	ldr	r0, [r7, #20]
200092e6:	f000 fa79 	bl	200097dc <SPI_EndRxTxTransaction>
200092ea:	4603      	mov	r3, r0
200092ec:	2b00      	cmp	r3, #0
200092ee:	d005      	beq.n	200092fc <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
200092f0:	697b      	ldr	r3, [r7, #20]
200092f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200092f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
200092f8:	697b      	ldr	r3, [r7, #20]
200092fa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
200092fc:	697b      	ldr	r3, [r7, #20]
200092fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20009300:	2b00      	cmp	r3, #0
20009302:	d004      	beq.n	2000930e <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
20009304:	697b      	ldr	r3, [r7, #20]
20009306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
20009308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2000930a:	2b00      	cmp	r3, #0
2000930c:	d126      	bne.n	2000935c <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
2000930e:	697b      	ldr	r3, [r7, #20]
20009310:	2200      	movs	r2, #0
20009312:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
20009314:	697b      	ldr	r3, [r7, #20]
20009316:	2200      	movs	r2, #0
20009318:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
2000931a:	697b      	ldr	r3, [r7, #20]
2000931c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000931e:	2b40      	cmp	r3, #64	@ 0x40
20009320:	d002      	beq.n	20009328 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20009322:	697b      	ldr	r3, [r7, #20]
20009324:	2200      	movs	r2, #0
20009326:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
20009328:	2300      	movs	r3, #0
2000932a:	613b      	str	r3, [r7, #16]
2000932c:	697b      	ldr	r3, [r7, #20]
2000932e:	681b      	ldr	r3, [r3, #0]
20009330:	68db      	ldr	r3, [r3, #12]
20009332:	613b      	str	r3, [r7, #16]
20009334:	697b      	ldr	r3, [r7, #20]
20009336:	681b      	ldr	r3, [r3, #0]
20009338:	689b      	ldr	r3, [r3, #8]
2000933a:	613b      	str	r3, [r7, #16]
2000933c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
2000933e:	2300      	movs	r3, #0
20009340:	60fb      	str	r3, [r7, #12]
20009342:	697b      	ldr	r3, [r7, #20]
20009344:	681b      	ldr	r3, [r3, #0]
20009346:	689b      	ldr	r3, [r3, #8]
20009348:	60fb      	str	r3, [r7, #12]
2000934a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
2000934c:	697b      	ldr	r3, [r7, #20]
2000934e:	2201      	movs	r2, #1
20009350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
20009354:	6978      	ldr	r0, [r7, #20]
20009356:	f7ff fdc9 	bl	20008eec <HAL_SPI_AbortCpltCallback>
2000935a:	e000      	b.n	2000935e <SPI_DMARxAbortCallback+0xba>
      return;
2000935c:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000935e:	3718      	adds	r7, #24
20009360:	46bd      	mov	sp, r7
20009362:	bd80      	pop	{r7, pc}

20009364 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
20009364:	b580      	push	{r7, lr}
20009366:	b082      	sub	sp, #8
20009368:	af00      	add	r7, sp, #0
2000936a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
2000936c:	687b      	ldr	r3, [r7, #4]
2000936e:	681b      	ldr	r3, [r3, #0]
20009370:	f103 020c 	add.w	r2, r3, #12
20009374:	687b      	ldr	r3, [r7, #4]
20009376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009378:	7812      	ldrb	r2, [r2, #0]
2000937a:	b2d2      	uxtb	r2, r2
2000937c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
2000937e:	687b      	ldr	r3, [r7, #4]
20009380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009382:	1c5a      	adds	r2, r3, #1
20009384:	687b      	ldr	r3, [r7, #4]
20009386:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
20009388:	687b      	ldr	r3, [r7, #4]
2000938a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
2000938c:	b29b      	uxth	r3, r3
2000938e:	3b01      	subs	r3, #1
20009390:	b29a      	uxth	r2, r3
20009392:	687b      	ldr	r3, [r7, #4]
20009394:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
20009396:	687b      	ldr	r3, [r7, #4]
20009398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
2000939a:	b29b      	uxth	r3, r3
2000939c:	2b00      	cmp	r3, #0
2000939e:	d10f      	bne.n	200093c0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
200093a0:	687b      	ldr	r3, [r7, #4]
200093a2:	681b      	ldr	r3, [r3, #0]
200093a4:	685a      	ldr	r2, [r3, #4]
200093a6:	687b      	ldr	r3, [r7, #4]
200093a8:	681b      	ldr	r3, [r3, #0]
200093aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
200093ae:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
200093b0:	687b      	ldr	r3, [r7, #4]
200093b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
200093b4:	b29b      	uxth	r3, r3
200093b6:	2b00      	cmp	r3, #0
200093b8:	d102      	bne.n	200093c0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
200093ba:	6878      	ldr	r0, [r7, #4]
200093bc:	f000 fa62 	bl	20009884 <SPI_CloseRxTx_ISR>
    }
  }
}
200093c0:	bf00      	nop
200093c2:	3708      	adds	r7, #8
200093c4:	46bd      	mov	sp, r7
200093c6:	bd80      	pop	{r7, pc}

200093c8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
200093c8:	b580      	push	{r7, lr}
200093ca:	b082      	sub	sp, #8
200093cc:	af00      	add	r7, sp, #0
200093ce:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
200093d0:	687b      	ldr	r3, [r7, #4]
200093d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
200093d4:	687b      	ldr	r3, [r7, #4]
200093d6:	681b      	ldr	r3, [r3, #0]
200093d8:	330c      	adds	r3, #12
200093da:	7812      	ldrb	r2, [r2, #0]
200093dc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
200093de:	687b      	ldr	r3, [r7, #4]
200093e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200093e2:	1c5a      	adds	r2, r3, #1
200093e4:	687b      	ldr	r3, [r7, #4]
200093e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
200093e8:	687b      	ldr	r3, [r7, #4]
200093ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
200093ec:	b29b      	uxth	r3, r3
200093ee:	3b01      	subs	r3, #1
200093f0:	b29a      	uxth	r2, r3
200093f2:	687b      	ldr	r3, [r7, #4]
200093f4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
200093f6:	687b      	ldr	r3, [r7, #4]
200093f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
200093fa:	b29b      	uxth	r3, r3
200093fc:	2b00      	cmp	r3, #0
200093fe:	d10f      	bne.n	20009420 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
20009400:	687b      	ldr	r3, [r7, #4]
20009402:	681b      	ldr	r3, [r3, #0]
20009404:	685a      	ldr	r2, [r3, #4]
20009406:	687b      	ldr	r3, [r7, #4]
20009408:	681b      	ldr	r3, [r3, #0]
2000940a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
2000940e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
20009410:	687b      	ldr	r3, [r7, #4]
20009412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20009414:	b29b      	uxth	r3, r3
20009416:	2b00      	cmp	r3, #0
20009418:	d102      	bne.n	20009420 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
2000941a:	6878      	ldr	r0, [r7, #4]
2000941c:	f000 fa32 	bl	20009884 <SPI_CloseRxTx_ISR>
    }
  }
}
20009420:	bf00      	nop
20009422:	3708      	adds	r7, #8
20009424:	46bd      	mov	sp, r7
20009426:	bd80      	pop	{r7, pc}

20009428 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
20009428:	b580      	push	{r7, lr}
2000942a:	b082      	sub	sp, #8
2000942c:	af00      	add	r7, sp, #0
2000942e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
20009430:	687b      	ldr	r3, [r7, #4]
20009432:	681b      	ldr	r3, [r3, #0]
20009434:	68da      	ldr	r2, [r3, #12]
20009436:	687b      	ldr	r3, [r7, #4]
20009438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000943a:	b292      	uxth	r2, r2
2000943c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
2000943e:	687b      	ldr	r3, [r7, #4]
20009440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009442:	1c9a      	adds	r2, r3, #2
20009444:	687b      	ldr	r3, [r7, #4]
20009446:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
20009448:	687b      	ldr	r3, [r7, #4]
2000944a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
2000944c:	b29b      	uxth	r3, r3
2000944e:	3b01      	subs	r3, #1
20009450:	b29a      	uxth	r2, r3
20009452:	687b      	ldr	r3, [r7, #4]
20009454:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
20009456:	687b      	ldr	r3, [r7, #4]
20009458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
2000945a:	b29b      	uxth	r3, r3
2000945c:	2b00      	cmp	r3, #0
2000945e:	d10f      	bne.n	20009480 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
20009460:	687b      	ldr	r3, [r7, #4]
20009462:	681b      	ldr	r3, [r3, #0]
20009464:	685a      	ldr	r2, [r3, #4]
20009466:	687b      	ldr	r3, [r7, #4]
20009468:	681b      	ldr	r3, [r3, #0]
2000946a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
2000946e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
20009470:	687b      	ldr	r3, [r7, #4]
20009472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
20009474:	b29b      	uxth	r3, r3
20009476:	2b00      	cmp	r3, #0
20009478:	d102      	bne.n	20009480 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
2000947a:	6878      	ldr	r0, [r7, #4]
2000947c:	f000 fa02 	bl	20009884 <SPI_CloseRxTx_ISR>
    }
  }
}
20009480:	bf00      	nop
20009482:	3708      	adds	r7, #8
20009484:	46bd      	mov	sp, r7
20009486:	bd80      	pop	{r7, pc}

20009488 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
20009488:	b580      	push	{r7, lr}
2000948a:	b082      	sub	sp, #8
2000948c:	af00      	add	r7, sp, #0
2000948e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
20009490:	687b      	ldr	r3, [r7, #4]
20009492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20009494:	881a      	ldrh	r2, [r3, #0]
20009496:	687b      	ldr	r3, [r7, #4]
20009498:	681b      	ldr	r3, [r3, #0]
2000949a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
2000949c:	687b      	ldr	r3, [r7, #4]
2000949e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200094a0:	1c9a      	adds	r2, r3, #2
200094a2:	687b      	ldr	r3, [r7, #4]
200094a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
200094a6:	687b      	ldr	r3, [r7, #4]
200094a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
200094aa:	b29b      	uxth	r3, r3
200094ac:	3b01      	subs	r3, #1
200094ae:	b29a      	uxth	r2, r3
200094b0:	687b      	ldr	r3, [r7, #4]
200094b2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
200094b4:	687b      	ldr	r3, [r7, #4]
200094b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
200094b8:	b29b      	uxth	r3, r3
200094ba:	2b00      	cmp	r3, #0
200094bc:	d10f      	bne.n	200094de <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
200094be:	687b      	ldr	r3, [r7, #4]
200094c0:	681b      	ldr	r3, [r3, #0]
200094c2:	685a      	ldr	r2, [r3, #4]
200094c4:	687b      	ldr	r3, [r7, #4]
200094c6:	681b      	ldr	r3, [r3, #0]
200094c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
200094cc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
200094ce:	687b      	ldr	r3, [r7, #4]
200094d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
200094d2:	b29b      	uxth	r3, r3
200094d4:	2b00      	cmp	r3, #0
200094d6:	d102      	bne.n	200094de <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
200094d8:	6878      	ldr	r0, [r7, #4]
200094da:	f000 f9d3 	bl	20009884 <SPI_CloseRxTx_ISR>
    }
  }
}
200094de:	bf00      	nop
200094e0:	3708      	adds	r7, #8
200094e2:	46bd      	mov	sp, r7
200094e4:	bd80      	pop	{r7, pc}

200094e6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
200094e6:	b580      	push	{r7, lr}
200094e8:	b082      	sub	sp, #8
200094ea:	af00      	add	r7, sp, #0
200094ec:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
200094ee:	687b      	ldr	r3, [r7, #4]
200094f0:	681b      	ldr	r3, [r3, #0]
200094f2:	f103 020c 	add.w	r2, r3, #12
200094f6:	687b      	ldr	r3, [r7, #4]
200094f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
200094fa:	7812      	ldrb	r2, [r2, #0]
200094fc:	b2d2      	uxtb	r2, r2
200094fe:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
20009500:	687b      	ldr	r3, [r7, #4]
20009502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009504:	1c5a      	adds	r2, r3, #1
20009506:	687b      	ldr	r3, [r7, #4]
20009508:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
2000950a:	687b      	ldr	r3, [r7, #4]
2000950c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
2000950e:	b29b      	uxth	r3, r3
20009510:	3b01      	subs	r3, #1
20009512:	b29a      	uxth	r2, r3
20009514:	687b      	ldr	r3, [r7, #4]
20009516:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
20009518:	687b      	ldr	r3, [r7, #4]
2000951a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
2000951c:	b29b      	uxth	r3, r3
2000951e:	2b00      	cmp	r3, #0
20009520:	d102      	bne.n	20009528 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
20009522:	6878      	ldr	r0, [r7, #4]
20009524:	f000 fa22 	bl	2000996c <SPI_CloseRx_ISR>
  }
}
20009528:	bf00      	nop
2000952a:	3708      	adds	r7, #8
2000952c:	46bd      	mov	sp, r7
2000952e:	bd80      	pop	{r7, pc}

20009530 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
20009530:	b580      	push	{r7, lr}
20009532:	b082      	sub	sp, #8
20009534:	af00      	add	r7, sp, #0
20009536:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
20009538:	687b      	ldr	r3, [r7, #4]
2000953a:	681b      	ldr	r3, [r3, #0]
2000953c:	68da      	ldr	r2, [r3, #12]
2000953e:	687b      	ldr	r3, [r7, #4]
20009540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
20009542:	b292      	uxth	r2, r2
20009544:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
20009546:	687b      	ldr	r3, [r7, #4]
20009548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2000954a:	1c9a      	adds	r2, r3, #2
2000954c:	687b      	ldr	r3, [r7, #4]
2000954e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
20009550:	687b      	ldr	r3, [r7, #4]
20009552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20009554:	b29b      	uxth	r3, r3
20009556:	3b01      	subs	r3, #1
20009558:	b29a      	uxth	r2, r3
2000955a:	687b      	ldr	r3, [r7, #4]
2000955c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
2000955e:	687b      	ldr	r3, [r7, #4]
20009560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
20009562:	b29b      	uxth	r3, r3
20009564:	2b00      	cmp	r3, #0
20009566:	d102      	bne.n	2000956e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
20009568:	6878      	ldr	r0, [r7, #4]
2000956a:	f000 f9ff 	bl	2000996c <SPI_CloseRx_ISR>
  }
}
2000956e:	bf00      	nop
20009570:	3708      	adds	r7, #8
20009572:	46bd      	mov	sp, r7
20009574:	bd80      	pop	{r7, pc}

20009576 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
20009576:	b580      	push	{r7, lr}
20009578:	b082      	sub	sp, #8
2000957a:	af00      	add	r7, sp, #0
2000957c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
2000957e:	687b      	ldr	r3, [r7, #4]
20009580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
20009582:	687b      	ldr	r3, [r7, #4]
20009584:	681b      	ldr	r3, [r3, #0]
20009586:	330c      	adds	r3, #12
20009588:	7812      	ldrb	r2, [r2, #0]
2000958a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
2000958c:	687b      	ldr	r3, [r7, #4]
2000958e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
20009590:	1c5a      	adds	r2, r3, #1
20009592:	687b      	ldr	r3, [r7, #4]
20009594:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
20009596:	687b      	ldr	r3, [r7, #4]
20009598:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
2000959a:	b29b      	uxth	r3, r3
2000959c:	3b01      	subs	r3, #1
2000959e:	b29a      	uxth	r2, r3
200095a0:	687b      	ldr	r3, [r7, #4]
200095a2:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
200095a4:	687b      	ldr	r3, [r7, #4]
200095a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
200095a8:	b29b      	uxth	r3, r3
200095aa:	2b00      	cmp	r3, #0
200095ac:	d102      	bne.n	200095b4 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
200095ae:	6878      	ldr	r0, [r7, #4]
200095b0:	f000 fa1c 	bl	200099ec <SPI_CloseTx_ISR>
  }
}
200095b4:	bf00      	nop
200095b6:	3708      	adds	r7, #8
200095b8:	46bd      	mov	sp, r7
200095ba:	bd80      	pop	{r7, pc}

200095bc <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
200095bc:	b580      	push	{r7, lr}
200095be:	b082      	sub	sp, #8
200095c0:	af00      	add	r7, sp, #0
200095c2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
200095c4:	687b      	ldr	r3, [r7, #4]
200095c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200095c8:	881a      	ldrh	r2, [r3, #0]
200095ca:	687b      	ldr	r3, [r7, #4]
200095cc:	681b      	ldr	r3, [r3, #0]
200095ce:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
200095d0:	687b      	ldr	r3, [r7, #4]
200095d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
200095d4:	1c9a      	adds	r2, r3, #2
200095d6:	687b      	ldr	r3, [r7, #4]
200095d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
200095da:	687b      	ldr	r3, [r7, #4]
200095dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
200095de:	b29b      	uxth	r3, r3
200095e0:	3b01      	subs	r3, #1
200095e2:	b29a      	uxth	r2, r3
200095e4:	687b      	ldr	r3, [r7, #4]
200095e6:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
200095e8:	687b      	ldr	r3, [r7, #4]
200095ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
200095ec:	b29b      	uxth	r3, r3
200095ee:	2b00      	cmp	r3, #0
200095f0:	d102      	bne.n	200095f8 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
200095f2:	6878      	ldr	r0, [r7, #4]
200095f4:	f000 f9fa 	bl	200099ec <SPI_CloseTx_ISR>
  }
}
200095f8:	bf00      	nop
200095fa:	3708      	adds	r7, #8
200095fc:	46bd      	mov	sp, r7
200095fe:	bd80      	pop	{r7, pc}

20009600 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
20009600:	b580      	push	{r7, lr}
20009602:	b088      	sub	sp, #32
20009604:	af00      	add	r7, sp, #0
20009606:	60f8      	str	r0, [r7, #12]
20009608:	60b9      	str	r1, [r7, #8]
2000960a:	603b      	str	r3, [r7, #0]
2000960c:	4613      	mov	r3, r2
2000960e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
20009610:	f7f7 fa01 	bl	20000a16 <HAL_GetTick>
20009614:	4602      	mov	r2, r0
20009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20009618:	1a9b      	subs	r3, r3, r2
2000961a:	683a      	ldr	r2, [r7, #0]
2000961c:	4413      	add	r3, r2
2000961e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
20009620:	f7f7 f9f9 	bl	20000a16 <HAL_GetTick>
20009624:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
20009626:	4b39      	ldr	r3, [pc, #228]	@ (2000970c <SPI_WaitFlagStateUntilTimeout+0x10c>)
20009628:	681b      	ldr	r3, [r3, #0]
2000962a:	015b      	lsls	r3, r3, #5
2000962c:	0d1b      	lsrs	r3, r3, #20
2000962e:	69fa      	ldr	r2, [r7, #28]
20009630:	fb02 f303 	mul.w	r3, r2, r3
20009634:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
20009636:	e054      	b.n	200096e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
20009638:	683b      	ldr	r3, [r7, #0]
2000963a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000963e:	d050      	beq.n	200096e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
20009640:	f7f7 f9e9 	bl	20000a16 <HAL_GetTick>
20009644:	4602      	mov	r2, r0
20009646:	69bb      	ldr	r3, [r7, #24]
20009648:	1ad3      	subs	r3, r2, r3
2000964a:	69fa      	ldr	r2, [r7, #28]
2000964c:	429a      	cmp	r2, r3
2000964e:	d902      	bls.n	20009656 <SPI_WaitFlagStateUntilTimeout+0x56>
20009650:	69fb      	ldr	r3, [r7, #28]
20009652:	2b00      	cmp	r3, #0
20009654:	d13d      	bne.n	200096d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
20009656:	68fb      	ldr	r3, [r7, #12]
20009658:	681b      	ldr	r3, [r3, #0]
2000965a:	685a      	ldr	r2, [r3, #4]
2000965c:	68fb      	ldr	r3, [r7, #12]
2000965e:	681b      	ldr	r3, [r3, #0]
20009660:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
20009664:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
20009666:	68fb      	ldr	r3, [r7, #12]
20009668:	685b      	ldr	r3, [r3, #4]
2000966a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
2000966e:	d111      	bne.n	20009694 <SPI_WaitFlagStateUntilTimeout+0x94>
20009670:	68fb      	ldr	r3, [r7, #12]
20009672:	689b      	ldr	r3, [r3, #8]
20009674:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
20009678:	d004      	beq.n	20009684 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
2000967a:	68fb      	ldr	r3, [r7, #12]
2000967c:	689b      	ldr	r3, [r3, #8]
2000967e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
20009682:	d107      	bne.n	20009694 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
20009684:	68fb      	ldr	r3, [r7, #12]
20009686:	681b      	ldr	r3, [r3, #0]
20009688:	681a      	ldr	r2, [r3, #0]
2000968a:	68fb      	ldr	r3, [r7, #12]
2000968c:	681b      	ldr	r3, [r3, #0]
2000968e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20009692:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
20009694:	68fb      	ldr	r3, [r7, #12]
20009696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
20009698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2000969c:	d10f      	bne.n	200096be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
2000969e:	68fb      	ldr	r3, [r7, #12]
200096a0:	681b      	ldr	r3, [r3, #0]
200096a2:	681a      	ldr	r2, [r3, #0]
200096a4:	68fb      	ldr	r3, [r7, #12]
200096a6:	681b      	ldr	r3, [r3, #0]
200096a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
200096ac:	601a      	str	r2, [r3, #0]
200096ae:	68fb      	ldr	r3, [r7, #12]
200096b0:	681b      	ldr	r3, [r3, #0]
200096b2:	681a      	ldr	r2, [r3, #0]
200096b4:	68fb      	ldr	r3, [r7, #12]
200096b6:	681b      	ldr	r3, [r3, #0]
200096b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
200096bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
200096be:	68fb      	ldr	r3, [r7, #12]
200096c0:	2201      	movs	r2, #1
200096c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
200096c6:	68fb      	ldr	r3, [r7, #12]
200096c8:	2200      	movs	r2, #0
200096ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
200096ce:	2303      	movs	r3, #3
200096d0:	e017      	b.n	20009702 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
200096d2:	697b      	ldr	r3, [r7, #20]
200096d4:	2b00      	cmp	r3, #0
200096d6:	d101      	bne.n	200096dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
200096d8:	2300      	movs	r3, #0
200096da:	61fb      	str	r3, [r7, #28]
      }
      count--;
200096dc:	697b      	ldr	r3, [r7, #20]
200096de:	3b01      	subs	r3, #1
200096e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
200096e2:	68fb      	ldr	r3, [r7, #12]
200096e4:	681b      	ldr	r3, [r3, #0]
200096e6:	689a      	ldr	r2, [r3, #8]
200096e8:	68bb      	ldr	r3, [r7, #8]
200096ea:	4013      	ands	r3, r2
200096ec:	68ba      	ldr	r2, [r7, #8]
200096ee:	429a      	cmp	r2, r3
200096f0:	bf0c      	ite	eq
200096f2:	2301      	moveq	r3, #1
200096f4:	2300      	movne	r3, #0
200096f6:	b2db      	uxtb	r3, r3
200096f8:	461a      	mov	r2, r3
200096fa:	79fb      	ldrb	r3, [r7, #7]
200096fc:	429a      	cmp	r2, r3
200096fe:	d19b      	bne.n	20009638 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
20009700:	2300      	movs	r3, #0
}
20009702:	4618      	mov	r0, r3
20009704:	3720      	adds	r7, #32
20009706:	46bd      	mov	sp, r7
20009708:	bd80      	pop	{r7, pc}
2000970a:	bf00      	nop
2000970c:	200003b0 	.word	0x200003b0

20009710 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
20009710:	b580      	push	{r7, lr}
20009712:	b086      	sub	sp, #24
20009714:	af02      	add	r7, sp, #8
20009716:	60f8      	str	r0, [r7, #12]
20009718:	60b9      	str	r1, [r7, #8]
2000971a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
2000971c:	68fb      	ldr	r3, [r7, #12]
2000971e:	685b      	ldr	r3, [r3, #4]
20009720:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
20009724:	d111      	bne.n	2000974a <SPI_EndRxTransaction+0x3a>
20009726:	68fb      	ldr	r3, [r7, #12]
20009728:	689b      	ldr	r3, [r3, #8]
2000972a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2000972e:	d004      	beq.n	2000973a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
20009730:	68fb      	ldr	r3, [r7, #12]
20009732:	689b      	ldr	r3, [r3, #8]
20009734:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
20009738:	d107      	bne.n	2000974a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
2000973a:	68fb      	ldr	r3, [r7, #12]
2000973c:	681b      	ldr	r3, [r3, #0]
2000973e:	681a      	ldr	r2, [r3, #0]
20009740:	68fb      	ldr	r3, [r7, #12]
20009742:	681b      	ldr	r3, [r3, #0]
20009744:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20009748:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2000974a:	68fb      	ldr	r3, [r7, #12]
2000974c:	685b      	ldr	r3, [r3, #4]
2000974e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
20009752:	d12a      	bne.n	200097aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
20009754:	68fb      	ldr	r3, [r7, #12]
20009756:	689b      	ldr	r3, [r3, #8]
20009758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
2000975c:	d012      	beq.n	20009784 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
2000975e:	687b      	ldr	r3, [r7, #4]
20009760:	9300      	str	r3, [sp, #0]
20009762:	68bb      	ldr	r3, [r7, #8]
20009764:	2200      	movs	r2, #0
20009766:	2180      	movs	r1, #128	@ 0x80
20009768:	68f8      	ldr	r0, [r7, #12]
2000976a:	f7ff ff49 	bl	20009600 <SPI_WaitFlagStateUntilTimeout>
2000976e:	4603      	mov	r3, r0
20009770:	2b00      	cmp	r3, #0
20009772:	d02d      	beq.n	200097d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20009774:	68fb      	ldr	r3, [r7, #12]
20009776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20009778:	f043 0220 	orr.w	r2, r3, #32
2000977c:	68fb      	ldr	r3, [r7, #12]
2000977e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
20009780:	2303      	movs	r3, #3
20009782:	e026      	b.n	200097d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
20009784:	687b      	ldr	r3, [r7, #4]
20009786:	9300      	str	r3, [sp, #0]
20009788:	68bb      	ldr	r3, [r7, #8]
2000978a:	2200      	movs	r2, #0
2000978c:	2101      	movs	r1, #1
2000978e:	68f8      	ldr	r0, [r7, #12]
20009790:	f7ff ff36 	bl	20009600 <SPI_WaitFlagStateUntilTimeout>
20009794:	4603      	mov	r3, r0
20009796:	2b00      	cmp	r3, #0
20009798:	d01a      	beq.n	200097d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000979a:	68fb      	ldr	r3, [r7, #12]
2000979c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000979e:	f043 0220 	orr.w	r2, r3, #32
200097a2:	68fb      	ldr	r3, [r7, #12]
200097a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
200097a6:	2303      	movs	r3, #3
200097a8:	e013      	b.n	200097d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
200097aa:	687b      	ldr	r3, [r7, #4]
200097ac:	9300      	str	r3, [sp, #0]
200097ae:	68bb      	ldr	r3, [r7, #8]
200097b0:	2200      	movs	r2, #0
200097b2:	2101      	movs	r1, #1
200097b4:	68f8      	ldr	r0, [r7, #12]
200097b6:	f7ff ff23 	bl	20009600 <SPI_WaitFlagStateUntilTimeout>
200097ba:	4603      	mov	r3, r0
200097bc:	2b00      	cmp	r3, #0
200097be:	d007      	beq.n	200097d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200097c0:	68fb      	ldr	r3, [r7, #12]
200097c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200097c4:	f043 0220 	orr.w	r2, r3, #32
200097c8:	68fb      	ldr	r3, [r7, #12]
200097ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
200097cc:	2303      	movs	r3, #3
200097ce:	e000      	b.n	200097d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
200097d0:	2300      	movs	r3, #0
}
200097d2:	4618      	mov	r0, r3
200097d4:	3710      	adds	r7, #16
200097d6:	46bd      	mov	sp, r7
200097d8:	bd80      	pop	{r7, pc}
	...

200097dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
200097dc:	b580      	push	{r7, lr}
200097de:	b088      	sub	sp, #32
200097e0:	af02      	add	r7, sp, #8
200097e2:	60f8      	str	r0, [r7, #12]
200097e4:	60b9      	str	r1, [r7, #8]
200097e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
200097e8:	687b      	ldr	r3, [r7, #4]
200097ea:	9300      	str	r3, [sp, #0]
200097ec:	68bb      	ldr	r3, [r7, #8]
200097ee:	2201      	movs	r2, #1
200097f0:	2102      	movs	r1, #2
200097f2:	68f8      	ldr	r0, [r7, #12]
200097f4:	f7ff ff04 	bl	20009600 <SPI_WaitFlagStateUntilTimeout>
200097f8:	4603      	mov	r3, r0
200097fa:	2b00      	cmp	r3, #0
200097fc:	d007      	beq.n	2000980e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200097fe:	68fb      	ldr	r3, [r7, #12]
20009800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20009802:	f043 0220 	orr.w	r2, r3, #32
20009806:	68fb      	ldr	r3, [r7, #12]
20009808:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
2000980a:	2303      	movs	r3, #3
2000980c:	e032      	b.n	20009874 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
2000980e:	4b1b      	ldr	r3, [pc, #108]	@ (2000987c <SPI_EndRxTxTransaction+0xa0>)
20009810:	681b      	ldr	r3, [r3, #0]
20009812:	4a1b      	ldr	r2, [pc, #108]	@ (20009880 <SPI_EndRxTxTransaction+0xa4>)
20009814:	fba2 2303 	umull	r2, r3, r2, r3
20009818:	0d5b      	lsrs	r3, r3, #21
2000981a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
2000981e:	fb02 f303 	mul.w	r3, r2, r3
20009822:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
20009824:	68fb      	ldr	r3, [r7, #12]
20009826:	685b      	ldr	r3, [r3, #4]
20009828:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
2000982c:	d112      	bne.n	20009854 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
2000982e:	687b      	ldr	r3, [r7, #4]
20009830:	9300      	str	r3, [sp, #0]
20009832:	68bb      	ldr	r3, [r7, #8]
20009834:	2200      	movs	r2, #0
20009836:	2180      	movs	r1, #128	@ 0x80
20009838:	68f8      	ldr	r0, [r7, #12]
2000983a:	f7ff fee1 	bl	20009600 <SPI_WaitFlagStateUntilTimeout>
2000983e:	4603      	mov	r3, r0
20009840:	2b00      	cmp	r3, #0
20009842:	d016      	beq.n	20009872 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20009844:	68fb      	ldr	r3, [r7, #12]
20009846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20009848:	f043 0220 	orr.w	r2, r3, #32
2000984c:	68fb      	ldr	r3, [r7, #12]
2000984e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
20009850:	2303      	movs	r3, #3
20009852:	e00f      	b.n	20009874 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
20009854:	697b      	ldr	r3, [r7, #20]
20009856:	2b00      	cmp	r3, #0
20009858:	d00a      	beq.n	20009870 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
2000985a:	697b      	ldr	r3, [r7, #20]
2000985c:	3b01      	subs	r3, #1
2000985e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
20009860:	68fb      	ldr	r3, [r7, #12]
20009862:	681b      	ldr	r3, [r3, #0]
20009864:	689b      	ldr	r3, [r3, #8]
20009866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2000986a:	2b80      	cmp	r3, #128	@ 0x80
2000986c:	d0f2      	beq.n	20009854 <SPI_EndRxTxTransaction+0x78>
2000986e:	e000      	b.n	20009872 <SPI_EndRxTxTransaction+0x96>
        break;
20009870:	bf00      	nop
  }

  return HAL_OK;
20009872:	2300      	movs	r3, #0
}
20009874:	4618      	mov	r0, r3
20009876:	3718      	adds	r7, #24
20009878:	46bd      	mov	sp, r7
2000987a:	bd80      	pop	{r7, pc}
2000987c:	200003b0 	.word	0x200003b0
20009880:	165e9f81 	.word	0x165e9f81

20009884 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
20009884:	b580      	push	{r7, lr}
20009886:	b086      	sub	sp, #24
20009888:	af00      	add	r7, sp, #0
2000988a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
2000988c:	4b35      	ldr	r3, [pc, #212]	@ (20009964 <SPI_CloseRxTx_ISR+0xe0>)
2000988e:	681b      	ldr	r3, [r3, #0]
20009890:	4a35      	ldr	r2, [pc, #212]	@ (20009968 <SPI_CloseRxTx_ISR+0xe4>)
20009892:	fba2 2303 	umull	r2, r3, r2, r3
20009896:	0a5b      	lsrs	r3, r3, #9
20009898:	2264      	movs	r2, #100	@ 0x64
2000989a:	fb02 f303 	mul.w	r3, r2, r3
2000989e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
200098a0:	f7f7 f8b9 	bl	20000a16 <HAL_GetTick>
200098a4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
200098a6:	687b      	ldr	r3, [r7, #4]
200098a8:	681b      	ldr	r3, [r3, #0]
200098aa:	685a      	ldr	r2, [r3, #4]
200098ac:	687b      	ldr	r3, [r7, #4]
200098ae:	681b      	ldr	r3, [r3, #0]
200098b0:	f022 0220 	bic.w	r2, r2, #32
200098b4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
200098b6:	693b      	ldr	r3, [r7, #16]
200098b8:	2b00      	cmp	r3, #0
200098ba:	d106      	bne.n	200098ca <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200098bc:	687b      	ldr	r3, [r7, #4]
200098be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200098c0:	f043 0220 	orr.w	r2, r3, #32
200098c4:	687b      	ldr	r3, [r7, #4]
200098c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
200098c8:	e009      	b.n	200098de <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
200098ca:	693b      	ldr	r3, [r7, #16]
200098cc:	3b01      	subs	r3, #1
200098ce:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
200098d0:	687b      	ldr	r3, [r7, #4]
200098d2:	681b      	ldr	r3, [r3, #0]
200098d4:	689b      	ldr	r3, [r3, #8]
200098d6:	f003 0302 	and.w	r3, r3, #2
200098da:	2b00      	cmp	r3, #0
200098dc:	d0eb      	beq.n	200098b6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
200098de:	697a      	ldr	r2, [r7, #20]
200098e0:	2164      	movs	r1, #100	@ 0x64
200098e2:	6878      	ldr	r0, [r7, #4]
200098e4:	f7ff ff7a 	bl	200097dc <SPI_EndRxTxTransaction>
200098e8:	4603      	mov	r3, r0
200098ea:	2b00      	cmp	r3, #0
200098ec:	d005      	beq.n	200098fa <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200098ee:	687b      	ldr	r3, [r7, #4]
200098f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200098f2:	f043 0220 	orr.w	r2, r3, #32
200098f6:	687b      	ldr	r3, [r7, #4]
200098f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
200098fa:	687b      	ldr	r3, [r7, #4]
200098fc:	689b      	ldr	r3, [r3, #8]
200098fe:	2b00      	cmp	r3, #0
20009900:	d10a      	bne.n	20009918 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20009902:	2300      	movs	r3, #0
20009904:	60fb      	str	r3, [r7, #12]
20009906:	687b      	ldr	r3, [r7, #4]
20009908:	681b      	ldr	r3, [r3, #0]
2000990a:	68db      	ldr	r3, [r3, #12]
2000990c:	60fb      	str	r3, [r7, #12]
2000990e:	687b      	ldr	r3, [r7, #4]
20009910:	681b      	ldr	r3, [r3, #0]
20009912:	689b      	ldr	r3, [r3, #8]
20009914:	60fb      	str	r3, [r7, #12]
20009916:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
20009918:	687b      	ldr	r3, [r7, #4]
2000991a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000991c:	2b00      	cmp	r3, #0
2000991e:	d115      	bne.n	2000994c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
20009920:	687b      	ldr	r3, [r7, #4]
20009922:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
20009926:	b2db      	uxtb	r3, r3
20009928:	2b04      	cmp	r3, #4
2000992a:	d107      	bne.n	2000993c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
2000992c:	687b      	ldr	r3, [r7, #4]
2000992e:	2201      	movs	r2, #1
20009930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
20009934:	6878      	ldr	r0, [r7, #4]
20009936:	f7ff fa9d 	bl	20008e74 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
2000993a:	e00e      	b.n	2000995a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
2000993c:	687b      	ldr	r3, [r7, #4]
2000993e:	2201      	movs	r2, #1
20009940:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
20009944:	6878      	ldr	r0, [r7, #4]
20009946:	f7ff fa9f 	bl	20008e88 <HAL_SPI_TxRxCpltCallback>
}
2000994a:	e006      	b.n	2000995a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
2000994c:	687b      	ldr	r3, [r7, #4]
2000994e:	2201      	movs	r2, #1
20009950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
20009954:	6878      	ldr	r0, [r7, #4]
20009956:	f7ff fabf 	bl	20008ed8 <HAL_SPI_ErrorCallback>
}
2000995a:	bf00      	nop
2000995c:	3718      	adds	r7, #24
2000995e:	46bd      	mov	sp, r7
20009960:	bd80      	pop	{r7, pc}
20009962:	bf00      	nop
20009964:	200003b0 	.word	0x200003b0
20009968:	057619f1 	.word	0x057619f1

2000996c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
2000996c:	b580      	push	{r7, lr}
2000996e:	b084      	sub	sp, #16
20009970:	af00      	add	r7, sp, #0
20009972:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
20009974:	687b      	ldr	r3, [r7, #4]
20009976:	681b      	ldr	r3, [r3, #0]
20009978:	685a      	ldr	r2, [r3, #4]
2000997a:	687b      	ldr	r3, [r7, #4]
2000997c:	681b      	ldr	r3, [r3, #0]
2000997e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
20009982:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
20009984:	f7f7 f847 	bl	20000a16 <HAL_GetTick>
20009988:	4603      	mov	r3, r0
2000998a:	461a      	mov	r2, r3
2000998c:	2164      	movs	r1, #100	@ 0x64
2000998e:	6878      	ldr	r0, [r7, #4]
20009990:	f7ff febe 	bl	20009710 <SPI_EndRxTransaction>
20009994:	4603      	mov	r3, r0
20009996:	2b00      	cmp	r3, #0
20009998:	d005      	beq.n	200099a6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000999a:	687b      	ldr	r3, [r7, #4]
2000999c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2000999e:	f043 0220 	orr.w	r2, r3, #32
200099a2:	687b      	ldr	r3, [r7, #4]
200099a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
200099a6:	687b      	ldr	r3, [r7, #4]
200099a8:	689b      	ldr	r3, [r3, #8]
200099aa:	2b00      	cmp	r3, #0
200099ac:	d10a      	bne.n	200099c4 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
200099ae:	2300      	movs	r3, #0
200099b0:	60fb      	str	r3, [r7, #12]
200099b2:	687b      	ldr	r3, [r7, #4]
200099b4:	681b      	ldr	r3, [r3, #0]
200099b6:	68db      	ldr	r3, [r3, #12]
200099b8:	60fb      	str	r3, [r7, #12]
200099ba:	687b      	ldr	r3, [r7, #4]
200099bc:	681b      	ldr	r3, [r3, #0]
200099be:	689b      	ldr	r3, [r3, #8]
200099c0:	60fb      	str	r3, [r7, #12]
200099c2:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
200099c4:	687b      	ldr	r3, [r7, #4]
200099c6:	2201      	movs	r2, #1
200099c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
200099cc:	687b      	ldr	r3, [r7, #4]
200099ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
200099d0:	2b00      	cmp	r3, #0
200099d2:	d103      	bne.n	200099dc <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
200099d4:	6878      	ldr	r0, [r7, #4]
200099d6:	f7ff fa4d 	bl	20008e74 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
200099da:	e002      	b.n	200099e2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
200099dc:	6878      	ldr	r0, [r7, #4]
200099de:	f7ff fa7b 	bl	20008ed8 <HAL_SPI_ErrorCallback>
}
200099e2:	bf00      	nop
200099e4:	3710      	adds	r7, #16
200099e6:	46bd      	mov	sp, r7
200099e8:	bd80      	pop	{r7, pc}
	...

200099ec <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
200099ec:	b580      	push	{r7, lr}
200099ee:	b086      	sub	sp, #24
200099f0:	af00      	add	r7, sp, #0
200099f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
200099f4:	4b2c      	ldr	r3, [pc, #176]	@ (20009aa8 <SPI_CloseTx_ISR+0xbc>)
200099f6:	681b      	ldr	r3, [r3, #0]
200099f8:	4a2c      	ldr	r2, [pc, #176]	@ (20009aac <SPI_CloseTx_ISR+0xc0>)
200099fa:	fba2 2303 	umull	r2, r3, r2, r3
200099fe:	0a5b      	lsrs	r3, r3, #9
20009a00:	2264      	movs	r2, #100	@ 0x64
20009a02:	fb02 f303 	mul.w	r3, r2, r3
20009a06:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20009a08:	f7f7 f805 	bl	20000a16 <HAL_GetTick>
20009a0c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
20009a0e:	693b      	ldr	r3, [r7, #16]
20009a10:	2b00      	cmp	r3, #0
20009a12:	d106      	bne.n	20009a22 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20009a14:	687b      	ldr	r3, [r7, #4]
20009a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20009a18:	f043 0220 	orr.w	r2, r3, #32
20009a1c:	687b      	ldr	r3, [r7, #4]
20009a1e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
20009a20:	e009      	b.n	20009a36 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
20009a22:	693b      	ldr	r3, [r7, #16]
20009a24:	3b01      	subs	r3, #1
20009a26:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20009a28:	687b      	ldr	r3, [r7, #4]
20009a2a:	681b      	ldr	r3, [r3, #0]
20009a2c:	689b      	ldr	r3, [r3, #8]
20009a2e:	f003 0302 	and.w	r3, r3, #2
20009a32:	2b00      	cmp	r3, #0
20009a34:	d0eb      	beq.n	20009a0e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
20009a36:	687b      	ldr	r3, [r7, #4]
20009a38:	681b      	ldr	r3, [r3, #0]
20009a3a:	685a      	ldr	r2, [r3, #4]
20009a3c:	687b      	ldr	r3, [r7, #4]
20009a3e:	681b      	ldr	r3, [r3, #0]
20009a40:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
20009a44:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
20009a46:	697a      	ldr	r2, [r7, #20]
20009a48:	2164      	movs	r1, #100	@ 0x64
20009a4a:	6878      	ldr	r0, [r7, #4]
20009a4c:	f7ff fec6 	bl	200097dc <SPI_EndRxTxTransaction>
20009a50:	4603      	mov	r3, r0
20009a52:	2b00      	cmp	r3, #0
20009a54:	d005      	beq.n	20009a62 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20009a56:	687b      	ldr	r3, [r7, #4]
20009a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20009a5a:	f043 0220 	orr.w	r2, r3, #32
20009a5e:	687b      	ldr	r3, [r7, #4]
20009a60:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20009a62:	687b      	ldr	r3, [r7, #4]
20009a64:	689b      	ldr	r3, [r3, #8]
20009a66:	2b00      	cmp	r3, #0
20009a68:	d10a      	bne.n	20009a80 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20009a6a:	2300      	movs	r3, #0
20009a6c:	60fb      	str	r3, [r7, #12]
20009a6e:	687b      	ldr	r3, [r7, #4]
20009a70:	681b      	ldr	r3, [r3, #0]
20009a72:	68db      	ldr	r3, [r3, #12]
20009a74:	60fb      	str	r3, [r7, #12]
20009a76:	687b      	ldr	r3, [r7, #4]
20009a78:	681b      	ldr	r3, [r3, #0]
20009a7a:	689b      	ldr	r3, [r3, #8]
20009a7c:	60fb      	str	r3, [r7, #12]
20009a7e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
20009a80:	687b      	ldr	r3, [r7, #4]
20009a82:	2201      	movs	r2, #1
20009a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20009a88:	687b      	ldr	r3, [r7, #4]
20009a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20009a8c:	2b00      	cmp	r3, #0
20009a8e:	d003      	beq.n	20009a98 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
20009a90:	6878      	ldr	r0, [r7, #4]
20009a92:	f7ff fa21 	bl	20008ed8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
20009a96:	e002      	b.n	20009a9e <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
20009a98:	6878      	ldr	r0, [r7, #4]
20009a9a:	f7ff f9e1 	bl	20008e60 <HAL_SPI_TxCpltCallback>
}
20009a9e:	bf00      	nop
20009aa0:	3718      	adds	r7, #24
20009aa2:	46bd      	mov	sp, r7
20009aa4:	bd80      	pop	{r7, pc}
20009aa6:	bf00      	nop
20009aa8:	200003b0 	.word	0x200003b0
20009aac:	057619f1 	.word	0x057619f1

20009ab0 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
20009ab0:	b480      	push	{r7}
20009ab2:	b085      	sub	sp, #20
20009ab4:	af00      	add	r7, sp, #0
20009ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
20009ab8:	2300      	movs	r3, #0
20009aba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20009abc:	4b1e      	ldr	r3, [pc, #120]	@ (20009b38 <SPI_AbortRx_ISR+0x88>)
20009abe:	681b      	ldr	r3, [r3, #0]
20009ac0:	4a1e      	ldr	r2, [pc, #120]	@ (20009b3c <SPI_AbortRx_ISR+0x8c>)
20009ac2:	fba2 2303 	umull	r2, r3, r2, r3
20009ac6:	0a5b      	lsrs	r3, r3, #9
20009ac8:	2264      	movs	r2, #100	@ 0x64
20009aca:	fb02 f303 	mul.w	r3, r2, r3
20009ace:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
20009ad0:	68bb      	ldr	r3, [r7, #8]
20009ad2:	2b00      	cmp	r3, #0
20009ad4:	d106      	bne.n	20009ae4 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20009ad6:	687b      	ldr	r3, [r7, #4]
20009ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
20009ada:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
20009ade:	687b      	ldr	r3, [r7, #4]
20009ae0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
20009ae2:	e009      	b.n	20009af8 <SPI_AbortRx_ISR+0x48>
    }
    count--;
20009ae4:	68bb      	ldr	r3, [r7, #8]
20009ae6:	3b01      	subs	r3, #1
20009ae8:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20009aea:	687b      	ldr	r3, [r7, #4]
20009aec:	681b      	ldr	r3, [r3, #0]
20009aee:	689b      	ldr	r3, [r3, #8]
20009af0:	f003 0302 	and.w	r3, r3, #2
20009af4:	2b00      	cmp	r3, #0
20009af6:	d0eb      	beq.n	20009ad0 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
20009af8:	687b      	ldr	r3, [r7, #4]
20009afa:	681b      	ldr	r3, [r3, #0]
20009afc:	681a      	ldr	r2, [r3, #0]
20009afe:	687b      	ldr	r3, [r7, #4]
20009b00:	681b      	ldr	r3, [r3, #0]
20009b02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20009b06:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
20009b08:	687b      	ldr	r3, [r7, #4]
20009b0a:	681b      	ldr	r3, [r3, #0]
20009b0c:	685a      	ldr	r2, [r3, #4]
20009b0e:	687b      	ldr	r3, [r7, #4]
20009b10:	681b      	ldr	r3, [r3, #0]
20009b12:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
20009b16:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
20009b18:	687b      	ldr	r3, [r7, #4]
20009b1a:	681b      	ldr	r3, [r3, #0]
20009b1c:	68db      	ldr	r3, [r3, #12]
20009b1e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
20009b20:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
20009b22:	687b      	ldr	r3, [r7, #4]
20009b24:	2207      	movs	r2, #7
20009b26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
20009b2a:	bf00      	nop
20009b2c:	3714      	adds	r7, #20
20009b2e:	46bd      	mov	sp, r7
20009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
20009b34:	4770      	bx	lr
20009b36:	bf00      	nop
20009b38:	200003b0 	.word	0x200003b0
20009b3c:	057619f1 	.word	0x057619f1

20009b40 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
20009b40:	b480      	push	{r7}
20009b42:	b083      	sub	sp, #12
20009b44:	af00      	add	r7, sp, #0
20009b46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
20009b48:	687b      	ldr	r3, [r7, #4]
20009b4a:	681b      	ldr	r3, [r3, #0]
20009b4c:	685a      	ldr	r2, [r3, #4]
20009b4e:	687b      	ldr	r3, [r7, #4]
20009b50:	681b      	ldr	r3, [r3, #0]
20009b52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
20009b56:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
20009b58:	687b      	ldr	r3, [r7, #4]
20009b5a:	681b      	ldr	r3, [r3, #0]
20009b5c:	681a      	ldr	r2, [r3, #0]
20009b5e:	687b      	ldr	r3, [r7, #4]
20009b60:	681b      	ldr	r3, [r3, #0]
20009b62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
20009b66:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
20009b68:	687b      	ldr	r3, [r7, #4]
20009b6a:	2207      	movs	r2, #7
20009b6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
}
20009b70:	bf00      	nop
20009b72:	370c      	adds	r7, #12
20009b74:	46bd      	mov	sp, r7
20009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
20009b7a:	4770      	bx	lr

20009b7c <exit>:
20009b7c:	b508      	push	{r3, lr}
20009b7e:	4b06      	ldr	r3, [pc, #24]	@ (20009b98 <exit+0x1c>)
20009b80:	4604      	mov	r4, r0
20009b82:	b113      	cbz	r3, 20009b8a <exit+0xe>
20009b84:	2100      	movs	r1, #0
20009b86:	f3af 8000 	nop.w
20009b8a:	4b04      	ldr	r3, [pc, #16]	@ (20009b9c <exit+0x20>)
20009b8c:	681b      	ldr	r3, [r3, #0]
20009b8e:	b103      	cbz	r3, 20009b92 <exit+0x16>
20009b90:	4798      	blx	r3
20009b92:	4620      	mov	r0, r4
20009b94:	f7f7 fb4c 	bl	20001230 <_exit>
20009b98:	00000000 	.word	0x00000000
20009b9c:	200005f0 	.word	0x200005f0

20009ba0 <std>:
20009ba0:	2300      	movs	r3, #0
20009ba2:	b510      	push	{r4, lr}
20009ba4:	4604      	mov	r4, r0
20009ba6:	e9c0 3300 	strd	r3, r3, [r0]
20009baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
20009bae:	6083      	str	r3, [r0, #8]
20009bb0:	8181      	strh	r1, [r0, #12]
20009bb2:	6643      	str	r3, [r0, #100]	@ 0x64
20009bb4:	81c2      	strh	r2, [r0, #14]
20009bb6:	6183      	str	r3, [r0, #24]
20009bb8:	4619      	mov	r1, r3
20009bba:	2208      	movs	r2, #8
20009bbc:	305c      	adds	r0, #92	@ 0x5c
20009bbe:	f000 f97c 	bl	20009eba <memset>
20009bc2:	4b0d      	ldr	r3, [pc, #52]	@ (20009bf8 <std+0x58>)
20009bc4:	6263      	str	r3, [r4, #36]	@ 0x24
20009bc6:	4b0d      	ldr	r3, [pc, #52]	@ (20009bfc <std+0x5c>)
20009bc8:	62a3      	str	r3, [r4, #40]	@ 0x28
20009bca:	4b0d      	ldr	r3, [pc, #52]	@ (20009c00 <std+0x60>)
20009bcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
20009bce:	4b0d      	ldr	r3, [pc, #52]	@ (20009c04 <std+0x64>)
20009bd0:	6323      	str	r3, [r4, #48]	@ 0x30
20009bd2:	4b0d      	ldr	r3, [pc, #52]	@ (20009c08 <std+0x68>)
20009bd4:	6224      	str	r4, [r4, #32]
20009bd6:	429c      	cmp	r4, r3
20009bd8:	d006      	beq.n	20009be8 <std+0x48>
20009bda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
20009bde:	4294      	cmp	r4, r2
20009be0:	d002      	beq.n	20009be8 <std+0x48>
20009be2:	33d0      	adds	r3, #208	@ 0xd0
20009be4:	429c      	cmp	r4, r3
20009be6:	d105      	bne.n	20009bf4 <std+0x54>
20009be8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
20009bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20009bf0:	f000 ba33 	b.w	2000a05a <__retarget_lock_init_recursive>
20009bf4:	bd10      	pop	{r4, pc}
20009bf6:	bf00      	nop
20009bf8:	20009e31 	.word	0x20009e31
20009bfc:	20009e57 	.word	0x20009e57
20009c00:	20009e8f 	.word	0x20009e8f
20009c04:	20009eb3 	.word	0x20009eb3
20009c08:	200004b8 	.word	0x200004b8

20009c0c <stdio_exit_handler>:
20009c0c:	4a02      	ldr	r2, [pc, #8]	@ (20009c18 <stdio_exit_handler+0xc>)
20009c0e:	4903      	ldr	r1, [pc, #12]	@ (20009c1c <stdio_exit_handler+0x10>)
20009c10:	4803      	ldr	r0, [pc, #12]	@ (20009c20 <stdio_exit_handler+0x14>)
20009c12:	f000 b8ef 	b.w	20009df4 <_fwalk_sglue>
20009c16:	bf00      	nop
20009c18:	200003bc 	.word	0x200003bc
20009c1c:	2000a369 	.word	0x2000a369
20009c20:	200003cc 	.word	0x200003cc

20009c24 <cleanup_stdio>:
20009c24:	6841      	ldr	r1, [r0, #4]
20009c26:	4b0c      	ldr	r3, [pc, #48]	@ (20009c58 <cleanup_stdio+0x34>)
20009c28:	4299      	cmp	r1, r3
20009c2a:	b510      	push	{r4, lr}
20009c2c:	4604      	mov	r4, r0
20009c2e:	d001      	beq.n	20009c34 <cleanup_stdio+0x10>
20009c30:	f000 fb9a 	bl	2000a368 <_fflush_r>
20009c34:	68a1      	ldr	r1, [r4, #8]
20009c36:	4b09      	ldr	r3, [pc, #36]	@ (20009c5c <cleanup_stdio+0x38>)
20009c38:	4299      	cmp	r1, r3
20009c3a:	d002      	beq.n	20009c42 <cleanup_stdio+0x1e>
20009c3c:	4620      	mov	r0, r4
20009c3e:	f000 fb93 	bl	2000a368 <_fflush_r>
20009c42:	68e1      	ldr	r1, [r4, #12]
20009c44:	4b06      	ldr	r3, [pc, #24]	@ (20009c60 <cleanup_stdio+0x3c>)
20009c46:	4299      	cmp	r1, r3
20009c48:	d004      	beq.n	20009c54 <cleanup_stdio+0x30>
20009c4a:	4620      	mov	r0, r4
20009c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20009c50:	f000 bb8a 	b.w	2000a368 <_fflush_r>
20009c54:	bd10      	pop	{r4, pc}
20009c56:	bf00      	nop
20009c58:	200004b8 	.word	0x200004b8
20009c5c:	20000520 	.word	0x20000520
20009c60:	20000588 	.word	0x20000588

20009c64 <__fp_lock>:
20009c64:	b508      	push	{r3, lr}
20009c66:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
20009c68:	07da      	lsls	r2, r3, #31
20009c6a:	d405      	bmi.n	20009c78 <__fp_lock+0x14>
20009c6c:	898b      	ldrh	r3, [r1, #12]
20009c6e:	059b      	lsls	r3, r3, #22
20009c70:	d402      	bmi.n	20009c78 <__fp_lock+0x14>
20009c72:	6d88      	ldr	r0, [r1, #88]	@ 0x58
20009c74:	f000 f9f5 	bl	2000a062 <__retarget_lock_acquire_recursive>
20009c78:	2000      	movs	r0, #0
20009c7a:	bd08      	pop	{r3, pc}

20009c7c <__fp_unlock>:
20009c7c:	b508      	push	{r3, lr}
20009c7e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
20009c80:	07da      	lsls	r2, r3, #31
20009c82:	d405      	bmi.n	20009c90 <__fp_unlock+0x14>
20009c84:	898b      	ldrh	r3, [r1, #12]
20009c86:	059b      	lsls	r3, r3, #22
20009c88:	d402      	bmi.n	20009c90 <__fp_unlock+0x14>
20009c8a:	6d88      	ldr	r0, [r1, #88]	@ 0x58
20009c8c:	f000 f9ef 	bl	2000a06e <__retarget_lock_release_recursive>
20009c90:	2000      	movs	r0, #0
20009c92:	bd08      	pop	{r3, pc}

20009c94 <global_stdio_init.part.0>:
20009c94:	b510      	push	{r4, lr}
20009c96:	4b0b      	ldr	r3, [pc, #44]	@ (20009cc4 <global_stdio_init.part.0+0x30>)
20009c98:	4c0b      	ldr	r4, [pc, #44]	@ (20009cc8 <global_stdio_init.part.0+0x34>)
20009c9a:	4a0c      	ldr	r2, [pc, #48]	@ (20009ccc <global_stdio_init.part.0+0x38>)
20009c9c:	601a      	str	r2, [r3, #0]
20009c9e:	4620      	mov	r0, r4
20009ca0:	2200      	movs	r2, #0
20009ca2:	2104      	movs	r1, #4
20009ca4:	f7ff ff7c 	bl	20009ba0 <std>
20009ca8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
20009cac:	2201      	movs	r2, #1
20009cae:	2109      	movs	r1, #9
20009cb0:	f7ff ff76 	bl	20009ba0 <std>
20009cb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
20009cb8:	2202      	movs	r2, #2
20009cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20009cbe:	2112      	movs	r1, #18
20009cc0:	f7ff bf6e 	b.w	20009ba0 <std>
20009cc4:	200005f0 	.word	0x200005f0
20009cc8:	200004b8 	.word	0x200004b8
20009ccc:	20009c0d 	.word	0x20009c0d

20009cd0 <__sfp_lock_acquire>:
20009cd0:	4801      	ldr	r0, [pc, #4]	@ (20009cd8 <__sfp_lock_acquire+0x8>)
20009cd2:	f000 b9c6 	b.w	2000a062 <__retarget_lock_acquire_recursive>
20009cd6:	bf00      	nop
20009cd8:	200005ff 	.word	0x200005ff

20009cdc <__sfp_lock_release>:
20009cdc:	4801      	ldr	r0, [pc, #4]	@ (20009ce4 <__sfp_lock_release+0x8>)
20009cde:	f000 b9c6 	b.w	2000a06e <__retarget_lock_release_recursive>
20009ce2:	bf00      	nop
20009ce4:	200005ff 	.word	0x200005ff

20009ce8 <__sfp>:
20009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20009cea:	4607      	mov	r7, r0
20009cec:	f7ff fff0 	bl	20009cd0 <__sfp_lock_acquire>
20009cf0:	4b23      	ldr	r3, [pc, #140]	@ (20009d80 <__sfp+0x98>)
20009cf2:	681b      	ldr	r3, [r3, #0]
20009cf4:	b90b      	cbnz	r3, 20009cfa <__sfp+0x12>
20009cf6:	f7ff ffcd 	bl	20009c94 <global_stdio_init.part.0>
20009cfa:	4e22      	ldr	r6, [pc, #136]	@ (20009d84 <__sfp+0x9c>)
20009cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
20009d00:	3b01      	subs	r3, #1
20009d02:	d50f      	bpl.n	20009d24 <__sfp+0x3c>
20009d04:	6835      	ldr	r5, [r6, #0]
20009d06:	2d00      	cmp	r5, #0
20009d08:	d137      	bne.n	20009d7a <__sfp+0x92>
20009d0a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
20009d0e:	4638      	mov	r0, r7
20009d10:	f000 fa1a 	bl	2000a148 <_malloc_r>
20009d14:	4604      	mov	r4, r0
20009d16:	bb28      	cbnz	r0, 20009d64 <__sfp+0x7c>
20009d18:	6030      	str	r0, [r6, #0]
20009d1a:	f7ff ffdf 	bl	20009cdc <__sfp_lock_release>
20009d1e:	230c      	movs	r3, #12
20009d20:	603b      	str	r3, [r7, #0]
20009d22:	e01b      	b.n	20009d5c <__sfp+0x74>
20009d24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
20009d28:	b9d5      	cbnz	r5, 20009d60 <__sfp+0x78>
20009d2a:	4b17      	ldr	r3, [pc, #92]	@ (20009d88 <__sfp+0xa0>)
20009d2c:	60e3      	str	r3, [r4, #12]
20009d2e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
20009d32:	6665      	str	r5, [r4, #100]	@ 0x64
20009d34:	f000 f991 	bl	2000a05a <__retarget_lock_init_recursive>
20009d38:	f7ff ffd0 	bl	20009cdc <__sfp_lock_release>
20009d3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
20009d40:	e9c4 5504 	strd	r5, r5, [r4, #16]
20009d44:	6025      	str	r5, [r4, #0]
20009d46:	61a5      	str	r5, [r4, #24]
20009d48:	2208      	movs	r2, #8
20009d4a:	4629      	mov	r1, r5
20009d4c:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
20009d50:	f000 f8b3 	bl	20009eba <memset>
20009d54:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
20009d58:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
20009d5c:	4620      	mov	r0, r4
20009d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20009d60:	3468      	adds	r4, #104	@ 0x68
20009d62:	e7cd      	b.n	20009d00 <__sfp+0x18>
20009d64:	2304      	movs	r3, #4
20009d66:	6005      	str	r5, [r0, #0]
20009d68:	6043      	str	r3, [r0, #4]
20009d6a:	300c      	adds	r0, #12
20009d6c:	60a0      	str	r0, [r4, #8]
20009d6e:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
20009d72:	4629      	mov	r1, r5
20009d74:	f000 f8a1 	bl	20009eba <memset>
20009d78:	6034      	str	r4, [r6, #0]
20009d7a:	6836      	ldr	r6, [r6, #0]
20009d7c:	e7be      	b.n	20009cfc <__sfp+0x14>
20009d7e:	bf00      	nop
20009d80:	200005f0 	.word	0x200005f0
20009d84:	200003bc 	.word	0x200003bc
20009d88:	ffff0001 	.word	0xffff0001

20009d8c <__sinit>:
20009d8c:	b510      	push	{r4, lr}
20009d8e:	4604      	mov	r4, r0
20009d90:	f7ff ff9e 	bl	20009cd0 <__sfp_lock_acquire>
20009d94:	6a23      	ldr	r3, [r4, #32]
20009d96:	b11b      	cbz	r3, 20009da0 <__sinit+0x14>
20009d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20009d9c:	f7ff bf9e 	b.w	20009cdc <__sfp_lock_release>
20009da0:	4b04      	ldr	r3, [pc, #16]	@ (20009db4 <__sinit+0x28>)
20009da2:	6223      	str	r3, [r4, #32]
20009da4:	4b04      	ldr	r3, [pc, #16]	@ (20009db8 <__sinit+0x2c>)
20009da6:	681b      	ldr	r3, [r3, #0]
20009da8:	2b00      	cmp	r3, #0
20009daa:	d1f5      	bne.n	20009d98 <__sinit+0xc>
20009dac:	f7ff ff72 	bl	20009c94 <global_stdio_init.part.0>
20009db0:	e7f2      	b.n	20009d98 <__sinit+0xc>
20009db2:	bf00      	nop
20009db4:	20009c25 	.word	0x20009c25
20009db8:	200005f0 	.word	0x200005f0

20009dbc <__fp_lock_all>:
20009dbc:	b508      	push	{r3, lr}
20009dbe:	f7ff ff87 	bl	20009cd0 <__sfp_lock_acquire>
20009dc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
20009dc6:	4a02      	ldr	r2, [pc, #8]	@ (20009dd0 <__fp_lock_all+0x14>)
20009dc8:	4902      	ldr	r1, [pc, #8]	@ (20009dd4 <__fp_lock_all+0x18>)
20009dca:	2000      	movs	r0, #0
20009dcc:	f000 b812 	b.w	20009df4 <_fwalk_sglue>
20009dd0:	200003bc 	.word	0x200003bc
20009dd4:	20009c65 	.word	0x20009c65

20009dd8 <__fp_unlock_all>:
20009dd8:	b508      	push	{r3, lr}
20009dda:	4a04      	ldr	r2, [pc, #16]	@ (20009dec <__fp_unlock_all+0x14>)
20009ddc:	4904      	ldr	r1, [pc, #16]	@ (20009df0 <__fp_unlock_all+0x18>)
20009dde:	2000      	movs	r0, #0
20009de0:	f000 f808 	bl	20009df4 <_fwalk_sglue>
20009de4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
20009de8:	f7ff bf78 	b.w	20009cdc <__sfp_lock_release>
20009dec:	200003bc 	.word	0x200003bc
20009df0:	20009c7d 	.word	0x20009c7d

20009df4 <_fwalk_sglue>:
20009df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
20009df8:	4607      	mov	r7, r0
20009dfa:	4688      	mov	r8, r1
20009dfc:	4614      	mov	r4, r2
20009dfe:	2600      	movs	r6, #0
20009e00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
20009e04:	f1b9 0901 	subs.w	r9, r9, #1
20009e08:	d505      	bpl.n	20009e16 <_fwalk_sglue+0x22>
20009e0a:	6824      	ldr	r4, [r4, #0]
20009e0c:	2c00      	cmp	r4, #0
20009e0e:	d1f7      	bne.n	20009e00 <_fwalk_sglue+0xc>
20009e10:	4630      	mov	r0, r6
20009e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
20009e16:	89ab      	ldrh	r3, [r5, #12]
20009e18:	2b01      	cmp	r3, #1
20009e1a:	d907      	bls.n	20009e2c <_fwalk_sglue+0x38>
20009e1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
20009e20:	3301      	adds	r3, #1
20009e22:	d003      	beq.n	20009e2c <_fwalk_sglue+0x38>
20009e24:	4629      	mov	r1, r5
20009e26:	4638      	mov	r0, r7
20009e28:	47c0      	blx	r8
20009e2a:	4306      	orrs	r6, r0
20009e2c:	3568      	adds	r5, #104	@ 0x68
20009e2e:	e7e9      	b.n	20009e04 <_fwalk_sglue+0x10>

20009e30 <__sread>:
20009e30:	b510      	push	{r4, lr}
20009e32:	460c      	mov	r4, r1
20009e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20009e38:	f000 f8c0 	bl	20009fbc <_read_r>
20009e3c:	2800      	cmp	r0, #0
20009e3e:	bfab      	itete	ge
20009e40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
20009e42:	89a3      	ldrhlt	r3, [r4, #12]
20009e44:	181b      	addge	r3, r3, r0
20009e46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
20009e4a:	bfac      	ite	ge
20009e4c:	6563      	strge	r3, [r4, #84]	@ 0x54
20009e4e:	81a3      	strhlt	r3, [r4, #12]
20009e50:	bd10      	pop	{r4, pc}

20009e52 <__seofread>:
20009e52:	2000      	movs	r0, #0
20009e54:	4770      	bx	lr

20009e56 <__swrite>:
20009e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20009e5a:	461f      	mov	r7, r3
20009e5c:	898b      	ldrh	r3, [r1, #12]
20009e5e:	05db      	lsls	r3, r3, #23
20009e60:	4605      	mov	r5, r0
20009e62:	460c      	mov	r4, r1
20009e64:	4616      	mov	r6, r2
20009e66:	d505      	bpl.n	20009e74 <__swrite+0x1e>
20009e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20009e6c:	2302      	movs	r3, #2
20009e6e:	2200      	movs	r2, #0
20009e70:	f000 f892 	bl	20009f98 <_lseek_r>
20009e74:	89a3      	ldrh	r3, [r4, #12]
20009e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
20009e7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
20009e7e:	81a3      	strh	r3, [r4, #12]
20009e80:	4632      	mov	r2, r6
20009e82:	463b      	mov	r3, r7
20009e84:	4628      	mov	r0, r5
20009e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
20009e8a:	f000 b8a9 	b.w	20009fe0 <_write_r>

20009e8e <__sseek>:
20009e8e:	b510      	push	{r4, lr}
20009e90:	460c      	mov	r4, r1
20009e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20009e96:	f000 f87f 	bl	20009f98 <_lseek_r>
20009e9a:	1c43      	adds	r3, r0, #1
20009e9c:	89a3      	ldrh	r3, [r4, #12]
20009e9e:	bf15      	itete	ne
20009ea0:	6560      	strne	r0, [r4, #84]	@ 0x54
20009ea2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
20009ea6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
20009eaa:	81a3      	strheq	r3, [r4, #12]
20009eac:	bf18      	it	ne
20009eae:	81a3      	strhne	r3, [r4, #12]
20009eb0:	bd10      	pop	{r4, pc}

20009eb2 <__sclose>:
20009eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20009eb6:	f000 b809 	b.w	20009ecc <_close_r>

20009eba <memset>:
20009eba:	4402      	add	r2, r0
20009ebc:	4603      	mov	r3, r0
20009ebe:	4293      	cmp	r3, r2
20009ec0:	d100      	bne.n	20009ec4 <memset+0xa>
20009ec2:	4770      	bx	lr
20009ec4:	f803 1b01 	strb.w	r1, [r3], #1
20009ec8:	e7f9      	b.n	20009ebe <memset+0x4>
	...

20009ecc <_close_r>:
20009ecc:	b538      	push	{r3, r4, r5, lr}
20009ece:	4d06      	ldr	r5, [pc, #24]	@ (20009ee8 <_close_r+0x1c>)
20009ed0:	2300      	movs	r3, #0
20009ed2:	4604      	mov	r4, r0
20009ed4:	4608      	mov	r0, r1
20009ed6:	602b      	str	r3, [r5, #0]
20009ed8:	f7f7 f9ee 	bl	200012b8 <_close>
20009edc:	1c43      	adds	r3, r0, #1
20009ede:	d102      	bne.n	20009ee6 <_close_r+0x1a>
20009ee0:	682b      	ldr	r3, [r5, #0]
20009ee2:	b103      	cbz	r3, 20009ee6 <_close_r+0x1a>
20009ee4:	6023      	str	r3, [r4, #0]
20009ee6:	bd38      	pop	{r3, r4, r5, pc}
20009ee8:	200005f4 	.word	0x200005f4

20009eec <_reclaim_reent>:
20009eec:	4b29      	ldr	r3, [pc, #164]	@ (20009f94 <_reclaim_reent+0xa8>)
20009eee:	681b      	ldr	r3, [r3, #0]
20009ef0:	4283      	cmp	r3, r0
20009ef2:	b570      	push	{r4, r5, r6, lr}
20009ef4:	4604      	mov	r4, r0
20009ef6:	d04b      	beq.n	20009f90 <_reclaim_reent+0xa4>
20009ef8:	69c3      	ldr	r3, [r0, #28]
20009efa:	b1ab      	cbz	r3, 20009f28 <_reclaim_reent+0x3c>
20009efc:	68db      	ldr	r3, [r3, #12]
20009efe:	b16b      	cbz	r3, 20009f1c <_reclaim_reent+0x30>
20009f00:	2500      	movs	r5, #0
20009f02:	69e3      	ldr	r3, [r4, #28]
20009f04:	68db      	ldr	r3, [r3, #12]
20009f06:	5959      	ldr	r1, [r3, r5]
20009f08:	2900      	cmp	r1, #0
20009f0a:	d13b      	bne.n	20009f84 <_reclaim_reent+0x98>
20009f0c:	3504      	adds	r5, #4
20009f0e:	2d80      	cmp	r5, #128	@ 0x80
20009f10:	d1f7      	bne.n	20009f02 <_reclaim_reent+0x16>
20009f12:	69e3      	ldr	r3, [r4, #28]
20009f14:	4620      	mov	r0, r4
20009f16:	68d9      	ldr	r1, [r3, #12]
20009f18:	f000 f8aa 	bl	2000a070 <_free_r>
20009f1c:	69e3      	ldr	r3, [r4, #28]
20009f1e:	6819      	ldr	r1, [r3, #0]
20009f20:	b111      	cbz	r1, 20009f28 <_reclaim_reent+0x3c>
20009f22:	4620      	mov	r0, r4
20009f24:	f000 f8a4 	bl	2000a070 <_free_r>
20009f28:	6961      	ldr	r1, [r4, #20]
20009f2a:	b111      	cbz	r1, 20009f32 <_reclaim_reent+0x46>
20009f2c:	4620      	mov	r0, r4
20009f2e:	f000 f89f 	bl	2000a070 <_free_r>
20009f32:	69e1      	ldr	r1, [r4, #28]
20009f34:	b111      	cbz	r1, 20009f3c <_reclaim_reent+0x50>
20009f36:	4620      	mov	r0, r4
20009f38:	f000 f89a 	bl	2000a070 <_free_r>
20009f3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
20009f3e:	b111      	cbz	r1, 20009f46 <_reclaim_reent+0x5a>
20009f40:	4620      	mov	r0, r4
20009f42:	f000 f895 	bl	2000a070 <_free_r>
20009f46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
20009f48:	b111      	cbz	r1, 20009f50 <_reclaim_reent+0x64>
20009f4a:	4620      	mov	r0, r4
20009f4c:	f000 f890 	bl	2000a070 <_free_r>
20009f50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
20009f52:	b111      	cbz	r1, 20009f5a <_reclaim_reent+0x6e>
20009f54:	4620      	mov	r0, r4
20009f56:	f000 f88b 	bl	2000a070 <_free_r>
20009f5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
20009f5c:	b111      	cbz	r1, 20009f64 <_reclaim_reent+0x78>
20009f5e:	4620      	mov	r0, r4
20009f60:	f000 f886 	bl	2000a070 <_free_r>
20009f64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
20009f66:	b111      	cbz	r1, 20009f6e <_reclaim_reent+0x82>
20009f68:	4620      	mov	r0, r4
20009f6a:	f000 f881 	bl	2000a070 <_free_r>
20009f6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
20009f70:	b111      	cbz	r1, 20009f78 <_reclaim_reent+0x8c>
20009f72:	4620      	mov	r0, r4
20009f74:	f000 f87c 	bl	2000a070 <_free_r>
20009f78:	6a23      	ldr	r3, [r4, #32]
20009f7a:	b14b      	cbz	r3, 20009f90 <_reclaim_reent+0xa4>
20009f7c:	4620      	mov	r0, r4
20009f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
20009f82:	4718      	bx	r3
20009f84:	680e      	ldr	r6, [r1, #0]
20009f86:	4620      	mov	r0, r4
20009f88:	f000 f872 	bl	2000a070 <_free_r>
20009f8c:	4631      	mov	r1, r6
20009f8e:	e7bb      	b.n	20009f08 <_reclaim_reent+0x1c>
20009f90:	bd70      	pop	{r4, r5, r6, pc}
20009f92:	bf00      	nop
20009f94:	200003c8 	.word	0x200003c8

20009f98 <_lseek_r>:
20009f98:	b538      	push	{r3, r4, r5, lr}
20009f9a:	4d07      	ldr	r5, [pc, #28]	@ (20009fb8 <_lseek_r+0x20>)
20009f9c:	4604      	mov	r4, r0
20009f9e:	4608      	mov	r0, r1
20009fa0:	4611      	mov	r1, r2
20009fa2:	2200      	movs	r2, #0
20009fa4:	602a      	str	r2, [r5, #0]
20009fa6:	461a      	mov	r2, r3
20009fa8:	f7f7 f9ad 	bl	20001306 <_lseek>
20009fac:	1c43      	adds	r3, r0, #1
20009fae:	d102      	bne.n	20009fb6 <_lseek_r+0x1e>
20009fb0:	682b      	ldr	r3, [r5, #0]
20009fb2:	b103      	cbz	r3, 20009fb6 <_lseek_r+0x1e>
20009fb4:	6023      	str	r3, [r4, #0]
20009fb6:	bd38      	pop	{r3, r4, r5, pc}
20009fb8:	200005f4 	.word	0x200005f4

20009fbc <_read_r>:
20009fbc:	b538      	push	{r3, r4, r5, lr}
20009fbe:	4d07      	ldr	r5, [pc, #28]	@ (20009fdc <_read_r+0x20>)
20009fc0:	4604      	mov	r4, r0
20009fc2:	4608      	mov	r0, r1
20009fc4:	4611      	mov	r1, r2
20009fc6:	2200      	movs	r2, #0
20009fc8:	602a      	str	r2, [r5, #0]
20009fca:	461a      	mov	r2, r3
20009fcc:	f7f7 f93b 	bl	20001246 <_read>
20009fd0:	1c43      	adds	r3, r0, #1
20009fd2:	d102      	bne.n	20009fda <_read_r+0x1e>
20009fd4:	682b      	ldr	r3, [r5, #0]
20009fd6:	b103      	cbz	r3, 20009fda <_read_r+0x1e>
20009fd8:	6023      	str	r3, [r4, #0]
20009fda:	bd38      	pop	{r3, r4, r5, pc}
20009fdc:	200005f4 	.word	0x200005f4

20009fe0 <_write_r>:
20009fe0:	b538      	push	{r3, r4, r5, lr}
20009fe2:	4d07      	ldr	r5, [pc, #28]	@ (2000a000 <_write_r+0x20>)
20009fe4:	4604      	mov	r4, r0
20009fe6:	4608      	mov	r0, r1
20009fe8:	4611      	mov	r1, r2
20009fea:	2200      	movs	r2, #0
20009fec:	602a      	str	r2, [r5, #0]
20009fee:	461a      	mov	r2, r3
20009ff0:	f7f7 f946 	bl	20001280 <_write>
20009ff4:	1c43      	adds	r3, r0, #1
20009ff6:	d102      	bne.n	20009ffe <_write_r+0x1e>
20009ff8:	682b      	ldr	r3, [r5, #0]
20009ffa:	b103      	cbz	r3, 20009ffe <_write_r+0x1e>
20009ffc:	6023      	str	r3, [r4, #0]
20009ffe:	bd38      	pop	{r3, r4, r5, pc}
2000a000:	200005f4 	.word	0x200005f4

2000a004 <__errno>:
2000a004:	4b01      	ldr	r3, [pc, #4]	@ (2000a00c <__errno+0x8>)
2000a006:	6818      	ldr	r0, [r3, #0]
2000a008:	4770      	bx	lr
2000a00a:	bf00      	nop
2000a00c:	200003c8 	.word	0x200003c8

2000a010 <__libc_init_array>:
2000a010:	b570      	push	{r4, r5, r6, lr}
2000a012:	4d0d      	ldr	r5, [pc, #52]	@ (2000a048 <__libc_init_array+0x38>)
2000a014:	4c0d      	ldr	r4, [pc, #52]	@ (2000a04c <__libc_init_array+0x3c>)
2000a016:	1b64      	subs	r4, r4, r5
2000a018:	10a4      	asrs	r4, r4, #2
2000a01a:	2600      	movs	r6, #0
2000a01c:	42a6      	cmp	r6, r4
2000a01e:	d109      	bne.n	2000a034 <__libc_init_array+0x24>
2000a020:	4d0b      	ldr	r5, [pc, #44]	@ (2000a050 <__libc_init_array+0x40>)
2000a022:	4c0c      	ldr	r4, [pc, #48]	@ (2000a054 <__libc_init_array+0x44>)
2000a024:	f000 f9ec 	bl	2000a400 <_init>
2000a028:	1b64      	subs	r4, r4, r5
2000a02a:	10a4      	asrs	r4, r4, #2
2000a02c:	2600      	movs	r6, #0
2000a02e:	42a6      	cmp	r6, r4
2000a030:	d105      	bne.n	2000a03e <__libc_init_array+0x2e>
2000a032:	bd70      	pop	{r4, r5, r6, pc}
2000a034:	f855 3b04 	ldr.w	r3, [r5], #4
2000a038:	4798      	blx	r3
2000a03a:	3601      	adds	r6, #1
2000a03c:	e7ee      	b.n	2000a01c <__libc_init_array+0xc>
2000a03e:	f855 3b04 	ldr.w	r3, [r5], #4
2000a042:	4798      	blx	r3
2000a044:	3601      	adds	r6, #1
2000a046:	e7f2      	b.n	2000a02e <__libc_init_array+0x1e>
2000a048:	200003a0 	.word	0x200003a0
2000a04c:	200003a0 	.word	0x200003a0
2000a050:	200003a0 	.word	0x200003a0
2000a054:	200003a4 	.word	0x200003a4

2000a058 <__retarget_lock_init>:
2000a058:	4770      	bx	lr

2000a05a <__retarget_lock_init_recursive>:
2000a05a:	4770      	bx	lr

2000a05c <__retarget_lock_close>:
2000a05c:	4770      	bx	lr

2000a05e <__retarget_lock_close_recursive>:
2000a05e:	4770      	bx	lr

2000a060 <__retarget_lock_acquire>:
2000a060:	4770      	bx	lr

2000a062 <__retarget_lock_acquire_recursive>:
2000a062:	4770      	bx	lr

2000a064 <__retarget_lock_try_acquire>:
2000a064:	2001      	movs	r0, #1
2000a066:	4770      	bx	lr

2000a068 <__retarget_lock_try_acquire_recursive>:
2000a068:	2001      	movs	r0, #1
2000a06a:	4770      	bx	lr

2000a06c <__retarget_lock_release>:
2000a06c:	4770      	bx	lr

2000a06e <__retarget_lock_release_recursive>:
2000a06e:	4770      	bx	lr

2000a070 <_free_r>:
2000a070:	b538      	push	{r3, r4, r5, lr}
2000a072:	4605      	mov	r5, r0
2000a074:	2900      	cmp	r1, #0
2000a076:	d041      	beq.n	2000a0fc <_free_r+0x8c>
2000a078:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000a07c:	1f0c      	subs	r4, r1, #4
2000a07e:	2b00      	cmp	r3, #0
2000a080:	bfb8      	it	lt
2000a082:	18e4      	addlt	r4, r4, r3
2000a084:	f000 f8e0 	bl	2000a248 <__malloc_lock>
2000a088:	4a1d      	ldr	r2, [pc, #116]	@ (2000a100 <_free_r+0x90>)
2000a08a:	6813      	ldr	r3, [r2, #0]
2000a08c:	b933      	cbnz	r3, 2000a09c <_free_r+0x2c>
2000a08e:	6063      	str	r3, [r4, #4]
2000a090:	6014      	str	r4, [r2, #0]
2000a092:	4628      	mov	r0, r5
2000a094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000a098:	f000 b8dc 	b.w	2000a254 <__malloc_unlock>
2000a09c:	42a3      	cmp	r3, r4
2000a09e:	d908      	bls.n	2000a0b2 <_free_r+0x42>
2000a0a0:	6820      	ldr	r0, [r4, #0]
2000a0a2:	1821      	adds	r1, r4, r0
2000a0a4:	428b      	cmp	r3, r1
2000a0a6:	bf01      	itttt	eq
2000a0a8:	6819      	ldreq	r1, [r3, #0]
2000a0aa:	685b      	ldreq	r3, [r3, #4]
2000a0ac:	1809      	addeq	r1, r1, r0
2000a0ae:	6021      	streq	r1, [r4, #0]
2000a0b0:	e7ed      	b.n	2000a08e <_free_r+0x1e>
2000a0b2:	461a      	mov	r2, r3
2000a0b4:	685b      	ldr	r3, [r3, #4]
2000a0b6:	b10b      	cbz	r3, 2000a0bc <_free_r+0x4c>
2000a0b8:	42a3      	cmp	r3, r4
2000a0ba:	d9fa      	bls.n	2000a0b2 <_free_r+0x42>
2000a0bc:	6811      	ldr	r1, [r2, #0]
2000a0be:	1850      	adds	r0, r2, r1
2000a0c0:	42a0      	cmp	r0, r4
2000a0c2:	d10b      	bne.n	2000a0dc <_free_r+0x6c>
2000a0c4:	6820      	ldr	r0, [r4, #0]
2000a0c6:	4401      	add	r1, r0
2000a0c8:	1850      	adds	r0, r2, r1
2000a0ca:	4283      	cmp	r3, r0
2000a0cc:	6011      	str	r1, [r2, #0]
2000a0ce:	d1e0      	bne.n	2000a092 <_free_r+0x22>
2000a0d0:	6818      	ldr	r0, [r3, #0]
2000a0d2:	685b      	ldr	r3, [r3, #4]
2000a0d4:	6053      	str	r3, [r2, #4]
2000a0d6:	4408      	add	r0, r1
2000a0d8:	6010      	str	r0, [r2, #0]
2000a0da:	e7da      	b.n	2000a092 <_free_r+0x22>
2000a0dc:	d902      	bls.n	2000a0e4 <_free_r+0x74>
2000a0de:	230c      	movs	r3, #12
2000a0e0:	602b      	str	r3, [r5, #0]
2000a0e2:	e7d6      	b.n	2000a092 <_free_r+0x22>
2000a0e4:	6820      	ldr	r0, [r4, #0]
2000a0e6:	1821      	adds	r1, r4, r0
2000a0e8:	428b      	cmp	r3, r1
2000a0ea:	bf04      	itt	eq
2000a0ec:	6819      	ldreq	r1, [r3, #0]
2000a0ee:	685b      	ldreq	r3, [r3, #4]
2000a0f0:	6063      	str	r3, [r4, #4]
2000a0f2:	bf04      	itt	eq
2000a0f4:	1809      	addeq	r1, r1, r0
2000a0f6:	6021      	streq	r1, [r4, #0]
2000a0f8:	6054      	str	r4, [r2, #4]
2000a0fa:	e7ca      	b.n	2000a092 <_free_r+0x22>
2000a0fc:	bd38      	pop	{r3, r4, r5, pc}
2000a0fe:	bf00      	nop
2000a100:	20000604 	.word	0x20000604

2000a104 <sbrk_aligned>:
2000a104:	b570      	push	{r4, r5, r6, lr}
2000a106:	4e0f      	ldr	r6, [pc, #60]	@ (2000a144 <sbrk_aligned+0x40>)
2000a108:	460c      	mov	r4, r1
2000a10a:	6831      	ldr	r1, [r6, #0]
2000a10c:	4605      	mov	r5, r0
2000a10e:	b911      	cbnz	r1, 2000a116 <sbrk_aligned+0x12>
2000a110:	f000 f966 	bl	2000a3e0 <_sbrk_r>
2000a114:	6030      	str	r0, [r6, #0]
2000a116:	4621      	mov	r1, r4
2000a118:	4628      	mov	r0, r5
2000a11a:	f000 f961 	bl	2000a3e0 <_sbrk_r>
2000a11e:	1c43      	adds	r3, r0, #1
2000a120:	d103      	bne.n	2000a12a <sbrk_aligned+0x26>
2000a122:	f04f 34ff 	mov.w	r4, #4294967295
2000a126:	4620      	mov	r0, r4
2000a128:	bd70      	pop	{r4, r5, r6, pc}
2000a12a:	1cc4      	adds	r4, r0, #3
2000a12c:	f024 0403 	bic.w	r4, r4, #3
2000a130:	42a0      	cmp	r0, r4
2000a132:	d0f8      	beq.n	2000a126 <sbrk_aligned+0x22>
2000a134:	1a21      	subs	r1, r4, r0
2000a136:	4628      	mov	r0, r5
2000a138:	f000 f952 	bl	2000a3e0 <_sbrk_r>
2000a13c:	3001      	adds	r0, #1
2000a13e:	d1f2      	bne.n	2000a126 <sbrk_aligned+0x22>
2000a140:	e7ef      	b.n	2000a122 <sbrk_aligned+0x1e>
2000a142:	bf00      	nop
2000a144:	20000600 	.word	0x20000600

2000a148 <_malloc_r>:
2000a148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000a14c:	1ccd      	adds	r5, r1, #3
2000a14e:	f025 0503 	bic.w	r5, r5, #3
2000a152:	3508      	adds	r5, #8
2000a154:	2d0c      	cmp	r5, #12
2000a156:	bf38      	it	cc
2000a158:	250c      	movcc	r5, #12
2000a15a:	2d00      	cmp	r5, #0
2000a15c:	4606      	mov	r6, r0
2000a15e:	db01      	blt.n	2000a164 <_malloc_r+0x1c>
2000a160:	42a9      	cmp	r1, r5
2000a162:	d904      	bls.n	2000a16e <_malloc_r+0x26>
2000a164:	230c      	movs	r3, #12
2000a166:	6033      	str	r3, [r6, #0]
2000a168:	2000      	movs	r0, #0
2000a16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000a16e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 2000a244 <_malloc_r+0xfc>
2000a172:	f000 f869 	bl	2000a248 <__malloc_lock>
2000a176:	f8d8 3000 	ldr.w	r3, [r8]
2000a17a:	461c      	mov	r4, r3
2000a17c:	bb44      	cbnz	r4, 2000a1d0 <_malloc_r+0x88>
2000a17e:	4629      	mov	r1, r5
2000a180:	4630      	mov	r0, r6
2000a182:	f7ff ffbf 	bl	2000a104 <sbrk_aligned>
2000a186:	1c43      	adds	r3, r0, #1
2000a188:	4604      	mov	r4, r0
2000a18a:	d158      	bne.n	2000a23e <_malloc_r+0xf6>
2000a18c:	f8d8 4000 	ldr.w	r4, [r8]
2000a190:	4627      	mov	r7, r4
2000a192:	2f00      	cmp	r7, #0
2000a194:	d143      	bne.n	2000a21e <_malloc_r+0xd6>
2000a196:	2c00      	cmp	r4, #0
2000a198:	d04b      	beq.n	2000a232 <_malloc_r+0xea>
2000a19a:	6823      	ldr	r3, [r4, #0]
2000a19c:	4639      	mov	r1, r7
2000a19e:	4630      	mov	r0, r6
2000a1a0:	eb04 0903 	add.w	r9, r4, r3
2000a1a4:	f000 f91c 	bl	2000a3e0 <_sbrk_r>
2000a1a8:	4581      	cmp	r9, r0
2000a1aa:	d142      	bne.n	2000a232 <_malloc_r+0xea>
2000a1ac:	6821      	ldr	r1, [r4, #0]
2000a1ae:	1a6d      	subs	r5, r5, r1
2000a1b0:	4629      	mov	r1, r5
2000a1b2:	4630      	mov	r0, r6
2000a1b4:	f7ff ffa6 	bl	2000a104 <sbrk_aligned>
2000a1b8:	3001      	adds	r0, #1
2000a1ba:	d03a      	beq.n	2000a232 <_malloc_r+0xea>
2000a1bc:	6823      	ldr	r3, [r4, #0]
2000a1be:	442b      	add	r3, r5
2000a1c0:	6023      	str	r3, [r4, #0]
2000a1c2:	f8d8 3000 	ldr.w	r3, [r8]
2000a1c6:	685a      	ldr	r2, [r3, #4]
2000a1c8:	bb62      	cbnz	r2, 2000a224 <_malloc_r+0xdc>
2000a1ca:	f8c8 7000 	str.w	r7, [r8]
2000a1ce:	e00f      	b.n	2000a1f0 <_malloc_r+0xa8>
2000a1d0:	6822      	ldr	r2, [r4, #0]
2000a1d2:	1b52      	subs	r2, r2, r5
2000a1d4:	d420      	bmi.n	2000a218 <_malloc_r+0xd0>
2000a1d6:	2a0b      	cmp	r2, #11
2000a1d8:	d917      	bls.n	2000a20a <_malloc_r+0xc2>
2000a1da:	1961      	adds	r1, r4, r5
2000a1dc:	42a3      	cmp	r3, r4
2000a1de:	6025      	str	r5, [r4, #0]
2000a1e0:	bf18      	it	ne
2000a1e2:	6059      	strne	r1, [r3, #4]
2000a1e4:	6863      	ldr	r3, [r4, #4]
2000a1e6:	bf08      	it	eq
2000a1e8:	f8c8 1000 	streq.w	r1, [r8]
2000a1ec:	5162      	str	r2, [r4, r5]
2000a1ee:	604b      	str	r3, [r1, #4]
2000a1f0:	4630      	mov	r0, r6
2000a1f2:	f000 f82f 	bl	2000a254 <__malloc_unlock>
2000a1f6:	f104 000b 	add.w	r0, r4, #11
2000a1fa:	1d23      	adds	r3, r4, #4
2000a1fc:	f020 0007 	bic.w	r0, r0, #7
2000a200:	1ac2      	subs	r2, r0, r3
2000a202:	bf1c      	itt	ne
2000a204:	1a1b      	subne	r3, r3, r0
2000a206:	50a3      	strne	r3, [r4, r2]
2000a208:	e7af      	b.n	2000a16a <_malloc_r+0x22>
2000a20a:	6862      	ldr	r2, [r4, #4]
2000a20c:	42a3      	cmp	r3, r4
2000a20e:	bf0c      	ite	eq
2000a210:	f8c8 2000 	streq.w	r2, [r8]
2000a214:	605a      	strne	r2, [r3, #4]
2000a216:	e7eb      	b.n	2000a1f0 <_malloc_r+0xa8>
2000a218:	4623      	mov	r3, r4
2000a21a:	6864      	ldr	r4, [r4, #4]
2000a21c:	e7ae      	b.n	2000a17c <_malloc_r+0x34>
2000a21e:	463c      	mov	r4, r7
2000a220:	687f      	ldr	r7, [r7, #4]
2000a222:	e7b6      	b.n	2000a192 <_malloc_r+0x4a>
2000a224:	461a      	mov	r2, r3
2000a226:	685b      	ldr	r3, [r3, #4]
2000a228:	42a3      	cmp	r3, r4
2000a22a:	d1fb      	bne.n	2000a224 <_malloc_r+0xdc>
2000a22c:	2300      	movs	r3, #0
2000a22e:	6053      	str	r3, [r2, #4]
2000a230:	e7de      	b.n	2000a1f0 <_malloc_r+0xa8>
2000a232:	230c      	movs	r3, #12
2000a234:	6033      	str	r3, [r6, #0]
2000a236:	4630      	mov	r0, r6
2000a238:	f000 f80c 	bl	2000a254 <__malloc_unlock>
2000a23c:	e794      	b.n	2000a168 <_malloc_r+0x20>
2000a23e:	6005      	str	r5, [r0, #0]
2000a240:	e7d6      	b.n	2000a1f0 <_malloc_r+0xa8>
2000a242:	bf00      	nop
2000a244:	20000604 	.word	0x20000604

2000a248 <__malloc_lock>:
2000a248:	4801      	ldr	r0, [pc, #4]	@ (2000a250 <__malloc_lock+0x8>)
2000a24a:	f7ff bf0a 	b.w	2000a062 <__retarget_lock_acquire_recursive>
2000a24e:	bf00      	nop
2000a250:	200005fc 	.word	0x200005fc

2000a254 <__malloc_unlock>:
2000a254:	4801      	ldr	r0, [pc, #4]	@ (2000a25c <__malloc_unlock+0x8>)
2000a256:	f7ff bf0a 	b.w	2000a06e <__retarget_lock_release_recursive>
2000a25a:	bf00      	nop
2000a25c:	200005fc 	.word	0x200005fc

2000a260 <__sflush_r>:
2000a260:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
2000a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000a268:	0716      	lsls	r6, r2, #28
2000a26a:	4605      	mov	r5, r0
2000a26c:	460c      	mov	r4, r1
2000a26e:	d454      	bmi.n	2000a31a <__sflush_r+0xba>
2000a270:	684b      	ldr	r3, [r1, #4]
2000a272:	2b00      	cmp	r3, #0
2000a274:	dc02      	bgt.n	2000a27c <__sflush_r+0x1c>
2000a276:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
2000a278:	2b00      	cmp	r3, #0
2000a27a:	dd48      	ble.n	2000a30e <__sflush_r+0xae>
2000a27c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
2000a27e:	2e00      	cmp	r6, #0
2000a280:	d045      	beq.n	2000a30e <__sflush_r+0xae>
2000a282:	2300      	movs	r3, #0
2000a284:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
2000a288:	682f      	ldr	r7, [r5, #0]
2000a28a:	6a21      	ldr	r1, [r4, #32]
2000a28c:	602b      	str	r3, [r5, #0]
2000a28e:	d030      	beq.n	2000a2f2 <__sflush_r+0x92>
2000a290:	6d62      	ldr	r2, [r4, #84]	@ 0x54
2000a292:	89a3      	ldrh	r3, [r4, #12]
2000a294:	0759      	lsls	r1, r3, #29
2000a296:	d505      	bpl.n	2000a2a4 <__sflush_r+0x44>
2000a298:	6863      	ldr	r3, [r4, #4]
2000a29a:	1ad2      	subs	r2, r2, r3
2000a29c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
2000a29e:	b10b      	cbz	r3, 2000a2a4 <__sflush_r+0x44>
2000a2a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
2000a2a2:	1ad2      	subs	r2, r2, r3
2000a2a4:	2300      	movs	r3, #0
2000a2a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
2000a2a8:	6a21      	ldr	r1, [r4, #32]
2000a2aa:	4628      	mov	r0, r5
2000a2ac:	47b0      	blx	r6
2000a2ae:	1c43      	adds	r3, r0, #1
2000a2b0:	89a3      	ldrh	r3, [r4, #12]
2000a2b2:	d106      	bne.n	2000a2c2 <__sflush_r+0x62>
2000a2b4:	6829      	ldr	r1, [r5, #0]
2000a2b6:	291d      	cmp	r1, #29
2000a2b8:	d82b      	bhi.n	2000a312 <__sflush_r+0xb2>
2000a2ba:	4a2a      	ldr	r2, [pc, #168]	@ (2000a364 <__sflush_r+0x104>)
2000a2bc:	410a      	asrs	r2, r1
2000a2be:	07d6      	lsls	r6, r2, #31
2000a2c0:	d427      	bmi.n	2000a312 <__sflush_r+0xb2>
2000a2c2:	2200      	movs	r2, #0
2000a2c4:	6062      	str	r2, [r4, #4]
2000a2c6:	04d9      	lsls	r1, r3, #19
2000a2c8:	6922      	ldr	r2, [r4, #16]
2000a2ca:	6022      	str	r2, [r4, #0]
2000a2cc:	d504      	bpl.n	2000a2d8 <__sflush_r+0x78>
2000a2ce:	1c42      	adds	r2, r0, #1
2000a2d0:	d101      	bne.n	2000a2d6 <__sflush_r+0x76>
2000a2d2:	682b      	ldr	r3, [r5, #0]
2000a2d4:	b903      	cbnz	r3, 2000a2d8 <__sflush_r+0x78>
2000a2d6:	6560      	str	r0, [r4, #84]	@ 0x54
2000a2d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
2000a2da:	602f      	str	r7, [r5, #0]
2000a2dc:	b1b9      	cbz	r1, 2000a30e <__sflush_r+0xae>
2000a2de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
2000a2e2:	4299      	cmp	r1, r3
2000a2e4:	d002      	beq.n	2000a2ec <__sflush_r+0x8c>
2000a2e6:	4628      	mov	r0, r5
2000a2e8:	f7ff fec2 	bl	2000a070 <_free_r>
2000a2ec:	2300      	movs	r3, #0
2000a2ee:	6363      	str	r3, [r4, #52]	@ 0x34
2000a2f0:	e00d      	b.n	2000a30e <__sflush_r+0xae>
2000a2f2:	2301      	movs	r3, #1
2000a2f4:	4628      	mov	r0, r5
2000a2f6:	47b0      	blx	r6
2000a2f8:	4602      	mov	r2, r0
2000a2fa:	1c50      	adds	r0, r2, #1
2000a2fc:	d1c9      	bne.n	2000a292 <__sflush_r+0x32>
2000a2fe:	682b      	ldr	r3, [r5, #0]
2000a300:	2b00      	cmp	r3, #0
2000a302:	d0c6      	beq.n	2000a292 <__sflush_r+0x32>
2000a304:	2b1d      	cmp	r3, #29
2000a306:	d001      	beq.n	2000a30c <__sflush_r+0xac>
2000a308:	2b16      	cmp	r3, #22
2000a30a:	d11e      	bne.n	2000a34a <__sflush_r+0xea>
2000a30c:	602f      	str	r7, [r5, #0]
2000a30e:	2000      	movs	r0, #0
2000a310:	e022      	b.n	2000a358 <__sflush_r+0xf8>
2000a312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2000a316:	b21b      	sxth	r3, r3
2000a318:	e01b      	b.n	2000a352 <__sflush_r+0xf2>
2000a31a:	690f      	ldr	r7, [r1, #16]
2000a31c:	2f00      	cmp	r7, #0
2000a31e:	d0f6      	beq.n	2000a30e <__sflush_r+0xae>
2000a320:	0793      	lsls	r3, r2, #30
2000a322:	680e      	ldr	r6, [r1, #0]
2000a324:	bf08      	it	eq
2000a326:	694b      	ldreq	r3, [r1, #20]
2000a328:	600f      	str	r7, [r1, #0]
2000a32a:	bf18      	it	ne
2000a32c:	2300      	movne	r3, #0
2000a32e:	eba6 0807 	sub.w	r8, r6, r7
2000a332:	608b      	str	r3, [r1, #8]
2000a334:	f1b8 0f00 	cmp.w	r8, #0
2000a338:	dde9      	ble.n	2000a30e <__sflush_r+0xae>
2000a33a:	6a21      	ldr	r1, [r4, #32]
2000a33c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
2000a33e:	4643      	mov	r3, r8
2000a340:	463a      	mov	r2, r7
2000a342:	4628      	mov	r0, r5
2000a344:	47b0      	blx	r6
2000a346:	2800      	cmp	r0, #0
2000a348:	dc08      	bgt.n	2000a35c <__sflush_r+0xfc>
2000a34a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2000a34e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2000a352:	81a3      	strh	r3, [r4, #12]
2000a354:	f04f 30ff 	mov.w	r0, #4294967295
2000a358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000a35c:	4407      	add	r7, r0
2000a35e:	eba8 0800 	sub.w	r8, r8, r0
2000a362:	e7e7      	b.n	2000a334 <__sflush_r+0xd4>
2000a364:	dfbffffe 	.word	0xdfbffffe

2000a368 <_fflush_r>:
2000a368:	b538      	push	{r3, r4, r5, lr}
2000a36a:	690b      	ldr	r3, [r1, #16]
2000a36c:	4605      	mov	r5, r0
2000a36e:	460c      	mov	r4, r1
2000a370:	b913      	cbnz	r3, 2000a378 <_fflush_r+0x10>
2000a372:	2500      	movs	r5, #0
2000a374:	4628      	mov	r0, r5
2000a376:	bd38      	pop	{r3, r4, r5, pc}
2000a378:	b118      	cbz	r0, 2000a382 <_fflush_r+0x1a>
2000a37a:	6a03      	ldr	r3, [r0, #32]
2000a37c:	b90b      	cbnz	r3, 2000a382 <_fflush_r+0x1a>
2000a37e:	f7ff fd05 	bl	20009d8c <__sinit>
2000a382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2000a386:	2b00      	cmp	r3, #0
2000a388:	d0f3      	beq.n	2000a372 <_fflush_r+0xa>
2000a38a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
2000a38c:	07d0      	lsls	r0, r2, #31
2000a38e:	d404      	bmi.n	2000a39a <_fflush_r+0x32>
2000a390:	0599      	lsls	r1, r3, #22
2000a392:	d402      	bmi.n	2000a39a <_fflush_r+0x32>
2000a394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
2000a396:	f7ff fe64 	bl	2000a062 <__retarget_lock_acquire_recursive>
2000a39a:	4628      	mov	r0, r5
2000a39c:	4621      	mov	r1, r4
2000a39e:	f7ff ff5f 	bl	2000a260 <__sflush_r>
2000a3a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
2000a3a4:	07da      	lsls	r2, r3, #31
2000a3a6:	4605      	mov	r5, r0
2000a3a8:	d4e4      	bmi.n	2000a374 <_fflush_r+0xc>
2000a3aa:	89a3      	ldrh	r3, [r4, #12]
2000a3ac:	059b      	lsls	r3, r3, #22
2000a3ae:	d4e1      	bmi.n	2000a374 <_fflush_r+0xc>
2000a3b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
2000a3b2:	f7ff fe5c 	bl	2000a06e <__retarget_lock_release_recursive>
2000a3b6:	e7dd      	b.n	2000a374 <_fflush_r+0xc>

2000a3b8 <fflush>:
2000a3b8:	4601      	mov	r1, r0
2000a3ba:	b920      	cbnz	r0, 2000a3c6 <fflush+0xe>
2000a3bc:	4a04      	ldr	r2, [pc, #16]	@ (2000a3d0 <fflush+0x18>)
2000a3be:	4905      	ldr	r1, [pc, #20]	@ (2000a3d4 <fflush+0x1c>)
2000a3c0:	4805      	ldr	r0, [pc, #20]	@ (2000a3d8 <fflush+0x20>)
2000a3c2:	f7ff bd17 	b.w	20009df4 <_fwalk_sglue>
2000a3c6:	4b05      	ldr	r3, [pc, #20]	@ (2000a3dc <fflush+0x24>)
2000a3c8:	6818      	ldr	r0, [r3, #0]
2000a3ca:	f7ff bfcd 	b.w	2000a368 <_fflush_r>
2000a3ce:	bf00      	nop
2000a3d0:	200003bc 	.word	0x200003bc
2000a3d4:	2000a369 	.word	0x2000a369
2000a3d8:	200003cc 	.word	0x200003cc
2000a3dc:	200003c8 	.word	0x200003c8

2000a3e0 <_sbrk_r>:
2000a3e0:	b538      	push	{r3, r4, r5, lr}
2000a3e2:	4d06      	ldr	r5, [pc, #24]	@ (2000a3fc <_sbrk_r+0x1c>)
2000a3e4:	2300      	movs	r3, #0
2000a3e6:	4604      	mov	r4, r0
2000a3e8:	4608      	mov	r0, r1
2000a3ea:	602b      	str	r3, [r5, #0]
2000a3ec:	f7f7 f80c 	bl	20001408 <_sbrk>
2000a3f0:	1c43      	adds	r3, r0, #1
2000a3f2:	d102      	bne.n	2000a3fa <_sbrk_r+0x1a>
2000a3f4:	682b      	ldr	r3, [r5, #0]
2000a3f6:	b103      	cbz	r3, 2000a3fa <_sbrk_r+0x1a>
2000a3f8:	6023      	str	r3, [r4, #0]
2000a3fa:	bd38      	pop	{r3, r4, r5, pc}
2000a3fc:	200005f4 	.word	0x200005f4

2000a400 <_init>:
2000a400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000a402:	bf00      	nop
2000a404:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000a406:	bc08      	pop	{r3}
2000a408:	469e      	mov	lr, r3
2000a40a:	4770      	bx	lr

2000a40c <_fini>:
2000a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000a40e:	bf00      	nop
2000a410:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000a412:	bc08      	pop	{r3}
2000a414:	469e      	mov	lr, r3
2000a416:	4770      	bx	lr

Disassembly of section .RamFunc:

2000a418 <HAL_FLASHEx_StopFlashInterfaceClk>:
  * @note  This mode couldn't be set while executing with the flash itself.
  *        It should be done with specific routine executed from RAM.
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_StopFlashInterfaceClk(void)
{
2000a418:	b480      	push	{r7}
2000a41a:	b083      	sub	sp, #12
2000a41c:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000a41e:	2300      	movs	r3, #0
2000a420:	607b      	str	r3, [r7, #4]
2000a422:	4b0c      	ldr	r3, [pc, #48]	@ (2000a454 <HAL_FLASHEx_StopFlashInterfaceClk+0x3c>)
2000a424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000a426:	4a0b      	ldr	r2, [pc, #44]	@ (2000a454 <HAL_FLASHEx_StopFlashInterfaceClk+0x3c>)
2000a428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a42c:	6413      	str	r3, [r2, #64]	@ 0x40
2000a42e:	4b09      	ldr	r3, [pc, #36]	@ (2000a454 <HAL_FLASHEx_StopFlashInterfaceClk+0x3c>)
2000a430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000a432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2000a436:	607b      	str	r3, [r7, #4]
2000a438:	687b      	ldr	r3, [r7, #4]
  /* Stop the flash interface while System Run */
  SET_BIT(PWR->CR, PWR_CR_FISSR);
2000a43a:	4b07      	ldr	r3, [pc, #28]	@ (2000a458 <HAL_FLASHEx_StopFlashInterfaceClk+0x40>)
2000a43c:	681b      	ldr	r3, [r3, #0]
2000a43e:	4a06      	ldr	r2, [pc, #24]	@ (2000a458 <HAL_FLASHEx_StopFlashInterfaceClk+0x40>)
2000a440:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
2000a444:	6013      	str	r3, [r2, #0]

  return HAL_OK;
2000a446:	2300      	movs	r3, #0
}
2000a448:	4618      	mov	r0, r3
2000a44a:	370c      	adds	r7, #12
2000a44c:	46bd      	mov	sp, r7
2000a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a452:	4770      	bx	lr
2000a454:	40023800 	.word	0x40023800
2000a458:	40007000 	.word	0x40007000

2000a45c <HAL_FLASHEx_StartFlashInterfaceClk>:
  * @note  This mode couldn't be set while executing with the flash itself.
  *        It should be done with specific routine executed from RAM.
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_StartFlashInterfaceClk(void)
{
2000a45c:	b480      	push	{r7}
2000a45e:	b083      	sub	sp, #12
2000a460:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000a462:	2300      	movs	r3, #0
2000a464:	607b      	str	r3, [r7, #4]
2000a466:	4b0c      	ldr	r3, [pc, #48]	@ (2000a498 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
2000a468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000a46a:	4a0b      	ldr	r2, [pc, #44]	@ (2000a498 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
2000a46c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a470:	6413      	str	r3, [r2, #64]	@ 0x40
2000a472:	4b09      	ldr	r3, [pc, #36]	@ (2000a498 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
2000a474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000a476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2000a47a:	607b      	str	r3, [r7, #4]
2000a47c:	687b      	ldr	r3, [r7, #4]
  /* Start the flash interface while System Run */
  CLEAR_BIT(PWR->CR, PWR_CR_FISSR);
2000a47e:	4b07      	ldr	r3, [pc, #28]	@ (2000a49c <HAL_FLASHEx_StartFlashInterfaceClk+0x40>)
2000a480:	681b      	ldr	r3, [r3, #0]
2000a482:	4a06      	ldr	r2, [pc, #24]	@ (2000a49c <HAL_FLASHEx_StartFlashInterfaceClk+0x40>)
2000a484:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
2000a488:	6013      	str	r3, [r2, #0]

  return HAL_OK;
2000a48a:	2300      	movs	r3, #0
}
2000a48c:	4618      	mov	r0, r3
2000a48e:	370c      	adds	r7, #12
2000a490:	46bd      	mov	sp, r7
2000a492:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a496:	4770      	bx	lr
2000a498:	40023800 	.word	0x40023800
2000a49c:	40007000 	.word	0x40007000

2000a4a0 <HAL_FLASHEx_EnableFlashSleepMode>:
  * @note  This mode could n't be set while executing with the flash itself.
  *        It should be done with specific routine executed from RAM.
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_EnableFlashSleepMode(void)
{
2000a4a0:	b480      	push	{r7}
2000a4a2:	b083      	sub	sp, #12
2000a4a4:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000a4a6:	2300      	movs	r3, #0
2000a4a8:	607b      	str	r3, [r7, #4]
2000a4aa:	4b0c      	ldr	r3, [pc, #48]	@ (2000a4dc <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
2000a4ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000a4ae:	4a0b      	ldr	r2, [pc, #44]	@ (2000a4dc <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
2000a4b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a4b4:	6413      	str	r3, [r2, #64]	@ 0x40
2000a4b6:	4b09      	ldr	r3, [pc, #36]	@ (2000a4dc <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
2000a4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000a4ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2000a4be:	607b      	str	r3, [r7, #4]
2000a4c0:	687b      	ldr	r3, [r7, #4]
  /* Enable the flash sleep while System Run */
  SET_BIT(PWR->CR, PWR_CR_FMSSR);
2000a4c2:	4b07      	ldr	r3, [pc, #28]	@ (2000a4e0 <HAL_FLASHEx_EnableFlashSleepMode+0x40>)
2000a4c4:	681b      	ldr	r3, [r3, #0]
2000a4c6:	4a06      	ldr	r2, [pc, #24]	@ (2000a4e0 <HAL_FLASHEx_EnableFlashSleepMode+0x40>)
2000a4c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
2000a4cc:	6013      	str	r3, [r2, #0]

  return HAL_OK;
2000a4ce:	2300      	movs	r3, #0
}
2000a4d0:	4618      	mov	r0, r3
2000a4d2:	370c      	adds	r7, #12
2000a4d4:	46bd      	mov	sp, r7
2000a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a4da:	4770      	bx	lr
2000a4dc:	40023800 	.word	0x40023800
2000a4e0:	40007000 	.word	0x40007000

2000a4e4 <HAL_FLASHEx_DisableFlashSleepMode>:
  * @note  This mode couldn't be set while executing with the flash itself.
  *        It should be done with specific routine executed from RAM.
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_DisableFlashSleepMode(void)
{
2000a4e4:	b480      	push	{r7}
2000a4e6:	b083      	sub	sp, #12
2000a4e8:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000a4ea:	2300      	movs	r3, #0
2000a4ec:	607b      	str	r3, [r7, #4]
2000a4ee:	4b0c      	ldr	r3, [pc, #48]	@ (2000a520 <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
2000a4f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000a4f2:	4a0b      	ldr	r2, [pc, #44]	@ (2000a520 <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
2000a4f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
2000a4f8:	6413      	str	r3, [r2, #64]	@ 0x40
2000a4fa:	4b09      	ldr	r3, [pc, #36]	@ (2000a520 <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
2000a4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2000a4fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
2000a502:	607b      	str	r3, [r7, #4]
2000a504:	687b      	ldr	r3, [r7, #4]
  /* Disable the flash sleep while System Run */
  CLEAR_BIT(PWR->CR, PWR_CR_FMSSR);
2000a506:	4b07      	ldr	r3, [pc, #28]	@ (2000a524 <HAL_FLASHEx_DisableFlashSleepMode+0x40>)
2000a508:	681b      	ldr	r3, [r3, #0]
2000a50a:	4a06      	ldr	r2, [pc, #24]	@ (2000a524 <HAL_FLASHEx_DisableFlashSleepMode+0x40>)
2000a50c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
2000a510:	6013      	str	r3, [r2, #0]

  return HAL_OK;
2000a512:	2300      	movs	r3, #0
}
2000a514:	4618      	mov	r0, r3
2000a516:	370c      	adds	r7, #12
2000a518:	46bd      	mov	sp, r7
2000a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a51e:	4770      	bx	lr
2000a520:	40023800 	.word	0x40023800
2000a524:	40007000 	.word	0x40007000
